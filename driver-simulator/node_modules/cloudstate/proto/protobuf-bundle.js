/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.cloudstate = (function() {

    /**
     * Namespace cloudstate.
     * @exports cloudstate
     * @namespace
     */
    var cloudstate = {};

    cloudstate.crdt = (function() {

        /**
         * Namespace crdt.
         * @memberof cloudstate
         * @namespace
         */
        var crdt = {};

        crdt.Crdt = (function() {

            /**
             * Constructs a new Crdt service.
             * @memberof cloudstate.crdt
             * @classdesc Represents a Crdt
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function Crdt(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (Crdt.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Crdt;

            /**
             * Creates new Crdt service using the specified rpc implementation.
             * @function create
             * @memberof cloudstate.crdt.Crdt
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {Crdt} RPC service. Useful where requests and/or responses are streamed.
             */
            Crdt.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link cloudstate.crdt.Crdt#handle}.
             * @memberof cloudstate.crdt.Crdt
             * @typedef handleCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {cloudstate.crdt.CrdtStreamOut} [response] CrdtStreamOut
             */

            /**
             * Calls handle.
             * @function handle
             * @memberof cloudstate.crdt.Crdt
             * @instance
             * @param {cloudstate.crdt.ICrdtStreamIn} request CrdtStreamIn message or plain object
             * @param {cloudstate.crdt.Crdt.handleCallback} callback Node-style callback called with the error, if any, and CrdtStreamOut
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(Crdt.prototype.handle = function handle(request, callback) {
                return this.rpcCall(handle, $root.cloudstate.crdt.CrdtStreamIn, $root.cloudstate.crdt.CrdtStreamOut, request, callback);
            }, "name", { value: "handle" });

            /**
             * Calls handle.
             * @function handle
             * @memberof cloudstate.crdt.Crdt
             * @instance
             * @param {cloudstate.crdt.ICrdtStreamIn} request CrdtStreamIn message or plain object
             * @returns {Promise<cloudstate.crdt.CrdtStreamOut>} Promise
             * @variation 2
             */

            return Crdt;
        })();

        crdt.CrdtStreamIn = (function() {

            /**
             * Properties of a CrdtStreamIn.
             * @memberof cloudstate.crdt
             * @interface ICrdtStreamIn
             * @property {cloudstate.crdt.ICrdtInit|null} [init] CrdtStreamIn init
             * @property {cloudstate.crdt.ICrdtState|null} [state] CrdtStreamIn state
             * @property {cloudstate.crdt.ICrdtDelta|null} [changed] CrdtStreamIn changed
             * @property {cloudstate.crdt.ICrdtDelete|null} [deleted] CrdtStreamIn deleted
             * @property {cloudstate.ICommand|null} [command] CrdtStreamIn command
             * @property {cloudstate.IStreamCancelled|null} [streamCancelled] CrdtStreamIn streamCancelled
             */

            /**
             * Constructs a new CrdtStreamIn.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtStreamIn.
             * @implements ICrdtStreamIn
             * @constructor
             * @param {cloudstate.crdt.ICrdtStreamIn=} [properties] Properties to set
             */
            function CrdtStreamIn(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CrdtStreamIn init.
             * @member {cloudstate.crdt.ICrdtInit|null|undefined} init
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @instance
             */
            CrdtStreamIn.prototype.init = null;

            /**
             * CrdtStreamIn state.
             * @member {cloudstate.crdt.ICrdtState|null|undefined} state
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @instance
             */
            CrdtStreamIn.prototype.state = null;

            /**
             * CrdtStreamIn changed.
             * @member {cloudstate.crdt.ICrdtDelta|null|undefined} changed
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @instance
             */
            CrdtStreamIn.prototype.changed = null;

            /**
             * CrdtStreamIn deleted.
             * @member {cloudstate.crdt.ICrdtDelete|null|undefined} deleted
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @instance
             */
            CrdtStreamIn.prototype.deleted = null;

            /**
             * CrdtStreamIn command.
             * @member {cloudstate.ICommand|null|undefined} command
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @instance
             */
            CrdtStreamIn.prototype.command = null;

            /**
             * CrdtStreamIn streamCancelled.
             * @member {cloudstate.IStreamCancelled|null|undefined} streamCancelled
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @instance
             */
            CrdtStreamIn.prototype.streamCancelled = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * CrdtStreamIn message.
             * @member {"init"|"state"|"changed"|"deleted"|"command"|"streamCancelled"|undefined} message
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @instance
             */
            Object.defineProperty(CrdtStreamIn.prototype, "message", {
                get: $util.oneOfGetter($oneOfFields = ["init", "state", "changed", "deleted", "command", "streamCancelled"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new CrdtStreamIn instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @static
             * @param {cloudstate.crdt.ICrdtStreamIn=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtStreamIn} CrdtStreamIn instance
             */
            CrdtStreamIn.create = function create(properties) {
                return new CrdtStreamIn(properties);
            };

            /**
             * Encodes the specified CrdtStreamIn message. Does not implicitly {@link cloudstate.crdt.CrdtStreamIn.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @static
             * @param {cloudstate.crdt.ICrdtStreamIn} message CrdtStreamIn message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStreamIn.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.init != null && message.hasOwnProperty("init"))
                    $root.cloudstate.crdt.CrdtInit.encode(message.init, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.state != null && message.hasOwnProperty("state"))
                    $root.cloudstate.crdt.CrdtState.encode(message.state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.changed != null && message.hasOwnProperty("changed"))
                    $root.cloudstate.crdt.CrdtDelta.encode(message.changed, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.deleted != null && message.hasOwnProperty("deleted"))
                    $root.cloudstate.crdt.CrdtDelete.encode(message.deleted, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.command != null && message.hasOwnProperty("command"))
                    $root.cloudstate.Command.encode(message.command, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.streamCancelled != null && message.hasOwnProperty("streamCancelled"))
                    $root.cloudstate.StreamCancelled.encode(message.streamCancelled, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CrdtStreamIn message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtStreamIn.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @static
             * @param {cloudstate.crdt.ICrdtStreamIn} message CrdtStreamIn message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStreamIn.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtStreamIn message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtStreamIn} CrdtStreamIn
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStreamIn.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtStreamIn();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.init = $root.cloudstate.crdt.CrdtInit.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.state = $root.cloudstate.crdt.CrdtState.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.changed = $root.cloudstate.crdt.CrdtDelta.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.deleted = $root.cloudstate.crdt.CrdtDelete.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.command = $root.cloudstate.Command.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.streamCancelled = $root.cloudstate.StreamCancelled.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtStreamIn message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtStreamIn} CrdtStreamIn
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStreamIn.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtStreamIn message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtStreamIn.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.init != null && message.hasOwnProperty("init")) {
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtInit.verify(message.init);
                        if (error)
                            return "init." + error;
                    }
                }
                if (message.state != null && message.hasOwnProperty("state")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtState.verify(message.state);
                        if (error)
                            return "state." + error;
                    }
                }
                if (message.changed != null && message.hasOwnProperty("changed")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtDelta.verify(message.changed);
                        if (error)
                            return "changed." + error;
                    }
                }
                if (message.deleted != null && message.hasOwnProperty("deleted")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtDelete.verify(message.deleted);
                        if (error)
                            return "deleted." + error;
                    }
                }
                if (message.command != null && message.hasOwnProperty("command")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.Command.verify(message.command);
                        if (error)
                            return "command." + error;
                    }
                }
                if (message.streamCancelled != null && message.hasOwnProperty("streamCancelled")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.StreamCancelled.verify(message.streamCancelled);
                        if (error)
                            return "streamCancelled." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CrdtStreamIn message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtStreamIn} CrdtStreamIn
             */
            CrdtStreamIn.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtStreamIn)
                    return object;
                var message = new $root.cloudstate.crdt.CrdtStreamIn();
                if (object.init != null) {
                    if (typeof object.init !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamIn.init: object expected");
                    message.init = $root.cloudstate.crdt.CrdtInit.fromObject(object.init);
                }
                if (object.state != null) {
                    if (typeof object.state !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamIn.state: object expected");
                    message.state = $root.cloudstate.crdt.CrdtState.fromObject(object.state);
                }
                if (object.changed != null) {
                    if (typeof object.changed !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamIn.changed: object expected");
                    message.changed = $root.cloudstate.crdt.CrdtDelta.fromObject(object.changed);
                }
                if (object.deleted != null) {
                    if (typeof object.deleted !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamIn.deleted: object expected");
                    message.deleted = $root.cloudstate.crdt.CrdtDelete.fromObject(object.deleted);
                }
                if (object.command != null) {
                    if (typeof object.command !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamIn.command: object expected");
                    message.command = $root.cloudstate.Command.fromObject(object.command);
                }
                if (object.streamCancelled != null) {
                    if (typeof object.streamCancelled !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamIn.streamCancelled: object expected");
                    message.streamCancelled = $root.cloudstate.StreamCancelled.fromObject(object.streamCancelled);
                }
                return message;
            };

            /**
             * Creates a plain object from a CrdtStreamIn message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @static
             * @param {cloudstate.crdt.CrdtStreamIn} message CrdtStreamIn
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtStreamIn.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.init != null && message.hasOwnProperty("init")) {
                    object.init = $root.cloudstate.crdt.CrdtInit.toObject(message.init, options);
                    if (options.oneofs)
                        object.message = "init";
                }
                if (message.state != null && message.hasOwnProperty("state")) {
                    object.state = $root.cloudstate.crdt.CrdtState.toObject(message.state, options);
                    if (options.oneofs)
                        object.message = "state";
                }
                if (message.changed != null && message.hasOwnProperty("changed")) {
                    object.changed = $root.cloudstate.crdt.CrdtDelta.toObject(message.changed, options);
                    if (options.oneofs)
                        object.message = "changed";
                }
                if (message.deleted != null && message.hasOwnProperty("deleted")) {
                    object.deleted = $root.cloudstate.crdt.CrdtDelete.toObject(message.deleted, options);
                    if (options.oneofs)
                        object.message = "deleted";
                }
                if (message.command != null && message.hasOwnProperty("command")) {
                    object.command = $root.cloudstate.Command.toObject(message.command, options);
                    if (options.oneofs)
                        object.message = "command";
                }
                if (message.streamCancelled != null && message.hasOwnProperty("streamCancelled")) {
                    object.streamCancelled = $root.cloudstate.StreamCancelled.toObject(message.streamCancelled, options);
                    if (options.oneofs)
                        object.message = "streamCancelled";
                }
                return object;
            };

            /**
             * Converts this CrdtStreamIn to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtStreamIn
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtStreamIn.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtStreamIn;
        })();

        crdt.CrdtStreamOut = (function() {

            /**
             * Properties of a CrdtStreamOut.
             * @memberof cloudstate.crdt
             * @interface ICrdtStreamOut
             * @property {cloudstate.crdt.ICrdtReply|null} [reply] CrdtStreamOut reply
             * @property {cloudstate.crdt.ICrdtStreamedMessage|null} [streamedMessage] CrdtStreamOut streamedMessage
             * @property {cloudstate.crdt.ICrdtStreamCancelledResponse|null} [streamCancelledResponse] CrdtStreamOut streamCancelledResponse
             * @property {cloudstate.IFailure|null} [failure] CrdtStreamOut failure
             */

            /**
             * Constructs a new CrdtStreamOut.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtStreamOut.
             * @implements ICrdtStreamOut
             * @constructor
             * @param {cloudstate.crdt.ICrdtStreamOut=} [properties] Properties to set
             */
            function CrdtStreamOut(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CrdtStreamOut reply.
             * @member {cloudstate.crdt.ICrdtReply|null|undefined} reply
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @instance
             */
            CrdtStreamOut.prototype.reply = null;

            /**
             * CrdtStreamOut streamedMessage.
             * @member {cloudstate.crdt.ICrdtStreamedMessage|null|undefined} streamedMessage
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @instance
             */
            CrdtStreamOut.prototype.streamedMessage = null;

            /**
             * CrdtStreamOut streamCancelledResponse.
             * @member {cloudstate.crdt.ICrdtStreamCancelledResponse|null|undefined} streamCancelledResponse
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @instance
             */
            CrdtStreamOut.prototype.streamCancelledResponse = null;

            /**
             * CrdtStreamOut failure.
             * @member {cloudstate.IFailure|null|undefined} failure
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @instance
             */
            CrdtStreamOut.prototype.failure = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * CrdtStreamOut message.
             * @member {"reply"|"streamedMessage"|"streamCancelledResponse"|"failure"|undefined} message
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @instance
             */
            Object.defineProperty(CrdtStreamOut.prototype, "message", {
                get: $util.oneOfGetter($oneOfFields = ["reply", "streamedMessage", "streamCancelledResponse", "failure"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new CrdtStreamOut instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @static
             * @param {cloudstate.crdt.ICrdtStreamOut=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtStreamOut} CrdtStreamOut instance
             */
            CrdtStreamOut.create = function create(properties) {
                return new CrdtStreamOut(properties);
            };

            /**
             * Encodes the specified CrdtStreamOut message. Does not implicitly {@link cloudstate.crdt.CrdtStreamOut.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @static
             * @param {cloudstate.crdt.ICrdtStreamOut} message CrdtStreamOut message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStreamOut.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.reply != null && message.hasOwnProperty("reply"))
                    $root.cloudstate.crdt.CrdtReply.encode(message.reply, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.streamedMessage != null && message.hasOwnProperty("streamedMessage"))
                    $root.cloudstate.crdt.CrdtStreamedMessage.encode(message.streamedMessage, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.streamCancelledResponse != null && message.hasOwnProperty("streamCancelledResponse"))
                    $root.cloudstate.crdt.CrdtStreamCancelledResponse.encode(message.streamCancelledResponse, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.failure != null && message.hasOwnProperty("failure"))
                    $root.cloudstate.Failure.encode(message.failure, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CrdtStreamOut message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtStreamOut.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @static
             * @param {cloudstate.crdt.ICrdtStreamOut} message CrdtStreamOut message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStreamOut.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtStreamOut message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtStreamOut} CrdtStreamOut
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStreamOut.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtStreamOut();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.reply = $root.cloudstate.crdt.CrdtReply.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.streamedMessage = $root.cloudstate.crdt.CrdtStreamedMessage.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.streamCancelledResponse = $root.cloudstate.crdt.CrdtStreamCancelledResponse.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.failure = $root.cloudstate.Failure.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtStreamOut message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtStreamOut} CrdtStreamOut
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStreamOut.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtStreamOut message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtStreamOut.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.reply != null && message.hasOwnProperty("reply")) {
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtReply.verify(message.reply);
                        if (error)
                            return "reply." + error;
                    }
                }
                if (message.streamedMessage != null && message.hasOwnProperty("streamedMessage")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtStreamedMessage.verify(message.streamedMessage);
                        if (error)
                            return "streamedMessage." + error;
                    }
                }
                if (message.streamCancelledResponse != null && message.hasOwnProperty("streamCancelledResponse")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtStreamCancelledResponse.verify(message.streamCancelledResponse);
                        if (error)
                            return "streamCancelledResponse." + error;
                    }
                }
                if (message.failure != null && message.hasOwnProperty("failure")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.Failure.verify(message.failure);
                        if (error)
                            return "failure." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CrdtStreamOut message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtStreamOut} CrdtStreamOut
             */
            CrdtStreamOut.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtStreamOut)
                    return object;
                var message = new $root.cloudstate.crdt.CrdtStreamOut();
                if (object.reply != null) {
                    if (typeof object.reply !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamOut.reply: object expected");
                    message.reply = $root.cloudstate.crdt.CrdtReply.fromObject(object.reply);
                }
                if (object.streamedMessage != null) {
                    if (typeof object.streamedMessage !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamOut.streamedMessage: object expected");
                    message.streamedMessage = $root.cloudstate.crdt.CrdtStreamedMessage.fromObject(object.streamedMessage);
                }
                if (object.streamCancelledResponse != null) {
                    if (typeof object.streamCancelledResponse !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamOut.streamCancelledResponse: object expected");
                    message.streamCancelledResponse = $root.cloudstate.crdt.CrdtStreamCancelledResponse.fromObject(object.streamCancelledResponse);
                }
                if (object.failure != null) {
                    if (typeof object.failure !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamOut.failure: object expected");
                    message.failure = $root.cloudstate.Failure.fromObject(object.failure);
                }
                return message;
            };

            /**
             * Creates a plain object from a CrdtStreamOut message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @static
             * @param {cloudstate.crdt.CrdtStreamOut} message CrdtStreamOut
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtStreamOut.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.reply != null && message.hasOwnProperty("reply")) {
                    object.reply = $root.cloudstate.crdt.CrdtReply.toObject(message.reply, options);
                    if (options.oneofs)
                        object.message = "reply";
                }
                if (message.streamedMessage != null && message.hasOwnProperty("streamedMessage")) {
                    object.streamedMessage = $root.cloudstate.crdt.CrdtStreamedMessage.toObject(message.streamedMessage, options);
                    if (options.oneofs)
                        object.message = "streamedMessage";
                }
                if (message.streamCancelledResponse != null && message.hasOwnProperty("streamCancelledResponse")) {
                    object.streamCancelledResponse = $root.cloudstate.crdt.CrdtStreamCancelledResponse.toObject(message.streamCancelledResponse, options);
                    if (options.oneofs)
                        object.message = "streamCancelledResponse";
                }
                if (message.failure != null && message.hasOwnProperty("failure")) {
                    object.failure = $root.cloudstate.Failure.toObject(message.failure, options);
                    if (options.oneofs)
                        object.message = "failure";
                }
                return object;
            };

            /**
             * Converts this CrdtStreamOut to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtStreamOut
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtStreamOut.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtStreamOut;
        })();

        crdt.CrdtState = (function() {

            /**
             * Properties of a CrdtState.
             * @memberof cloudstate.crdt
             * @interface ICrdtState
             * @property {cloudstate.crdt.IGCounterState|null} [gcounter] CrdtState gcounter
             * @property {cloudstate.crdt.IPNCounterState|null} [pncounter] CrdtState pncounter
             * @property {cloudstate.crdt.IGSetState|null} [gset] CrdtState gset
             * @property {cloudstate.crdt.IORSetState|null} [orset] CrdtState orset
             * @property {cloudstate.crdt.ILWWRegisterState|null} [lwwregister] CrdtState lwwregister
             * @property {cloudstate.crdt.IFlagState|null} [flag] CrdtState flag
             * @property {cloudstate.crdt.IORMapState|null} [ormap] CrdtState ormap
             * @property {cloudstate.crdt.IVoteState|null} [vote] CrdtState vote
             */

            /**
             * Constructs a new CrdtState.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtState.
             * @implements ICrdtState
             * @constructor
             * @param {cloudstate.crdt.ICrdtState=} [properties] Properties to set
             */
            function CrdtState(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CrdtState gcounter.
             * @member {cloudstate.crdt.IGCounterState|null|undefined} gcounter
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             */
            CrdtState.prototype.gcounter = null;

            /**
             * CrdtState pncounter.
             * @member {cloudstate.crdt.IPNCounterState|null|undefined} pncounter
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             */
            CrdtState.prototype.pncounter = null;

            /**
             * CrdtState gset.
             * @member {cloudstate.crdt.IGSetState|null|undefined} gset
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             */
            CrdtState.prototype.gset = null;

            /**
             * CrdtState orset.
             * @member {cloudstate.crdt.IORSetState|null|undefined} orset
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             */
            CrdtState.prototype.orset = null;

            /**
             * CrdtState lwwregister.
             * @member {cloudstate.crdt.ILWWRegisterState|null|undefined} lwwregister
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             */
            CrdtState.prototype.lwwregister = null;

            /**
             * CrdtState flag.
             * @member {cloudstate.crdt.IFlagState|null|undefined} flag
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             */
            CrdtState.prototype.flag = null;

            /**
             * CrdtState ormap.
             * @member {cloudstate.crdt.IORMapState|null|undefined} ormap
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             */
            CrdtState.prototype.ormap = null;

            /**
             * CrdtState vote.
             * @member {cloudstate.crdt.IVoteState|null|undefined} vote
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             */
            CrdtState.prototype.vote = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * CrdtState state.
             * @member {"gcounter"|"pncounter"|"gset"|"orset"|"lwwregister"|"flag"|"ormap"|"vote"|undefined} state
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             */
            Object.defineProperty(CrdtState.prototype, "state", {
                get: $util.oneOfGetter($oneOfFields = ["gcounter", "pncounter", "gset", "orset", "lwwregister", "flag", "ormap", "vote"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new CrdtState instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtState
             * @static
             * @param {cloudstate.crdt.ICrdtState=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtState} CrdtState instance
             */
            CrdtState.create = function create(properties) {
                return new CrdtState(properties);
            };

            /**
             * Encodes the specified CrdtState message. Does not implicitly {@link cloudstate.crdt.CrdtState.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtState
             * @static
             * @param {cloudstate.crdt.ICrdtState} message CrdtState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gcounter != null && message.hasOwnProperty("gcounter"))
                    $root.cloudstate.crdt.GCounterState.encode(message.gcounter, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pncounter != null && message.hasOwnProperty("pncounter"))
                    $root.cloudstate.crdt.PNCounterState.encode(message.pncounter, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.gset != null && message.hasOwnProperty("gset"))
                    $root.cloudstate.crdt.GSetState.encode(message.gset, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.orset != null && message.hasOwnProperty("orset"))
                    $root.cloudstate.crdt.ORSetState.encode(message.orset, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.lwwregister != null && message.hasOwnProperty("lwwregister"))
                    $root.cloudstate.crdt.LWWRegisterState.encode(message.lwwregister, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.flag != null && message.hasOwnProperty("flag"))
                    $root.cloudstate.crdt.FlagState.encode(message.flag, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.ormap != null && message.hasOwnProperty("ormap"))
                    $root.cloudstate.crdt.ORMapState.encode(message.ormap, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.vote != null && message.hasOwnProperty("vote"))
                    $root.cloudstate.crdt.VoteState.encode(message.vote, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CrdtState message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtState
             * @static
             * @param {cloudstate.crdt.ICrdtState} message CrdtState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtState message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtState} CrdtState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gcounter = $root.cloudstate.crdt.GCounterState.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.pncounter = $root.cloudstate.crdt.PNCounterState.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.gset = $root.cloudstate.crdt.GSetState.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.orset = $root.cloudstate.crdt.ORSetState.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.lwwregister = $root.cloudstate.crdt.LWWRegisterState.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.flag = $root.cloudstate.crdt.FlagState.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.ormap = $root.cloudstate.crdt.ORMapState.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.vote = $root.cloudstate.crdt.VoteState.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtState} CrdtState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtState message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.gcounter != null && message.hasOwnProperty("gcounter")) {
                    properties.state = 1;
                    {
                        var error = $root.cloudstate.crdt.GCounterState.verify(message.gcounter);
                        if (error)
                            return "gcounter." + error;
                    }
                }
                if (message.pncounter != null && message.hasOwnProperty("pncounter")) {
                    if (properties.state === 1)
                        return "state: multiple values";
                    properties.state = 1;
                    {
                        var error = $root.cloudstate.crdt.PNCounterState.verify(message.pncounter);
                        if (error)
                            return "pncounter." + error;
                    }
                }
                if (message.gset != null && message.hasOwnProperty("gset")) {
                    if (properties.state === 1)
                        return "state: multiple values";
                    properties.state = 1;
                    {
                        var error = $root.cloudstate.crdt.GSetState.verify(message.gset);
                        if (error)
                            return "gset." + error;
                    }
                }
                if (message.orset != null && message.hasOwnProperty("orset")) {
                    if (properties.state === 1)
                        return "state: multiple values";
                    properties.state = 1;
                    {
                        var error = $root.cloudstate.crdt.ORSetState.verify(message.orset);
                        if (error)
                            return "orset." + error;
                    }
                }
                if (message.lwwregister != null && message.hasOwnProperty("lwwregister")) {
                    if (properties.state === 1)
                        return "state: multiple values";
                    properties.state = 1;
                    {
                        var error = $root.cloudstate.crdt.LWWRegisterState.verify(message.lwwregister);
                        if (error)
                            return "lwwregister." + error;
                    }
                }
                if (message.flag != null && message.hasOwnProperty("flag")) {
                    if (properties.state === 1)
                        return "state: multiple values";
                    properties.state = 1;
                    {
                        var error = $root.cloudstate.crdt.FlagState.verify(message.flag);
                        if (error)
                            return "flag." + error;
                    }
                }
                if (message.ormap != null && message.hasOwnProperty("ormap")) {
                    if (properties.state === 1)
                        return "state: multiple values";
                    properties.state = 1;
                    {
                        var error = $root.cloudstate.crdt.ORMapState.verify(message.ormap);
                        if (error)
                            return "ormap." + error;
                    }
                }
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    if (properties.state === 1)
                        return "state: multiple values";
                    properties.state = 1;
                    {
                        var error = $root.cloudstate.crdt.VoteState.verify(message.vote);
                        if (error)
                            return "vote." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CrdtState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtState} CrdtState
             */
            CrdtState.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtState)
                    return object;
                var message = new $root.cloudstate.crdt.CrdtState();
                if (object.gcounter != null) {
                    if (typeof object.gcounter !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtState.gcounter: object expected");
                    message.gcounter = $root.cloudstate.crdt.GCounterState.fromObject(object.gcounter);
                }
                if (object.pncounter != null) {
                    if (typeof object.pncounter !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtState.pncounter: object expected");
                    message.pncounter = $root.cloudstate.crdt.PNCounterState.fromObject(object.pncounter);
                }
                if (object.gset != null) {
                    if (typeof object.gset !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtState.gset: object expected");
                    message.gset = $root.cloudstate.crdt.GSetState.fromObject(object.gset);
                }
                if (object.orset != null) {
                    if (typeof object.orset !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtState.orset: object expected");
                    message.orset = $root.cloudstate.crdt.ORSetState.fromObject(object.orset);
                }
                if (object.lwwregister != null) {
                    if (typeof object.lwwregister !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtState.lwwregister: object expected");
                    message.lwwregister = $root.cloudstate.crdt.LWWRegisterState.fromObject(object.lwwregister);
                }
                if (object.flag != null) {
                    if (typeof object.flag !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtState.flag: object expected");
                    message.flag = $root.cloudstate.crdt.FlagState.fromObject(object.flag);
                }
                if (object.ormap != null) {
                    if (typeof object.ormap !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtState.ormap: object expected");
                    message.ormap = $root.cloudstate.crdt.ORMapState.fromObject(object.ormap);
                }
                if (object.vote != null) {
                    if (typeof object.vote !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtState.vote: object expected");
                    message.vote = $root.cloudstate.crdt.VoteState.fromObject(object.vote);
                }
                return message;
            };

            /**
             * Creates a plain object from a CrdtState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtState
             * @static
             * @param {cloudstate.crdt.CrdtState} message CrdtState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.gcounter != null && message.hasOwnProperty("gcounter")) {
                    object.gcounter = $root.cloudstate.crdt.GCounterState.toObject(message.gcounter, options);
                    if (options.oneofs)
                        object.state = "gcounter";
                }
                if (message.pncounter != null && message.hasOwnProperty("pncounter")) {
                    object.pncounter = $root.cloudstate.crdt.PNCounterState.toObject(message.pncounter, options);
                    if (options.oneofs)
                        object.state = "pncounter";
                }
                if (message.gset != null && message.hasOwnProperty("gset")) {
                    object.gset = $root.cloudstate.crdt.GSetState.toObject(message.gset, options);
                    if (options.oneofs)
                        object.state = "gset";
                }
                if (message.orset != null && message.hasOwnProperty("orset")) {
                    object.orset = $root.cloudstate.crdt.ORSetState.toObject(message.orset, options);
                    if (options.oneofs)
                        object.state = "orset";
                }
                if (message.lwwregister != null && message.hasOwnProperty("lwwregister")) {
                    object.lwwregister = $root.cloudstate.crdt.LWWRegisterState.toObject(message.lwwregister, options);
                    if (options.oneofs)
                        object.state = "lwwregister";
                }
                if (message.flag != null && message.hasOwnProperty("flag")) {
                    object.flag = $root.cloudstate.crdt.FlagState.toObject(message.flag, options);
                    if (options.oneofs)
                        object.state = "flag";
                }
                if (message.ormap != null && message.hasOwnProperty("ormap")) {
                    object.ormap = $root.cloudstate.crdt.ORMapState.toObject(message.ormap, options);
                    if (options.oneofs)
                        object.state = "ormap";
                }
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    object.vote = $root.cloudstate.crdt.VoteState.toObject(message.vote, options);
                    if (options.oneofs)
                        object.state = "vote";
                }
                return object;
            };

            /**
             * Converts this CrdtState to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtState;
        })();

        crdt.GCounterState = (function() {

            /**
             * Properties of a GCounterState.
             * @memberof cloudstate.crdt
             * @interface IGCounterState
             * @property {number|Long|null} [value] GCounterState value
             */

            /**
             * Constructs a new GCounterState.
             * @memberof cloudstate.crdt
             * @classdesc Represents a GCounterState.
             * @implements IGCounterState
             * @constructor
             * @param {cloudstate.crdt.IGCounterState=} [properties] Properties to set
             */
            function GCounterState(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GCounterState value.
             * @member {number|Long} value
             * @memberof cloudstate.crdt.GCounterState
             * @instance
             */
            GCounterState.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new GCounterState instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.GCounterState
             * @static
             * @param {cloudstate.crdt.IGCounterState=} [properties] Properties to set
             * @returns {cloudstate.crdt.GCounterState} GCounterState instance
             */
            GCounterState.create = function create(properties) {
                return new GCounterState(properties);
            };

            /**
             * Encodes the specified GCounterState message. Does not implicitly {@link cloudstate.crdt.GCounterState.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.GCounterState
             * @static
             * @param {cloudstate.crdt.IGCounterState} message GCounterState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GCounterState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.value);
                return writer;
            };

            /**
             * Encodes the specified GCounterState message, length delimited. Does not implicitly {@link cloudstate.crdt.GCounterState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.GCounterState
             * @static
             * @param {cloudstate.crdt.IGCounterState} message GCounterState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GCounterState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GCounterState message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.GCounterState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.GCounterState} GCounterState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GCounterState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.GCounterState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GCounterState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.GCounterState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.GCounterState} GCounterState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GCounterState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GCounterState message.
             * @function verify
             * @memberof cloudstate.crdt.GCounterState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GCounterState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                        return "value: integer|Long expected";
                return null;
            };

            /**
             * Creates a GCounterState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.GCounterState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.GCounterState} GCounterState
             */
            GCounterState.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.GCounterState)
                    return object;
                var message = new $root.cloudstate.crdt.GCounterState();
                if (object.value != null)
                    if ($util.Long)
                        (message.value = $util.Long.fromValue(object.value)).unsigned = true;
                    else if (typeof object.value === "string")
                        message.value = parseInt(object.value, 10);
                    else if (typeof object.value === "number")
                        message.value = object.value;
                    else if (typeof object.value === "object")
                        message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a GCounterState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.GCounterState
             * @static
             * @param {cloudstate.crdt.GCounterState} message GCounterState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GCounterState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.value = options.longs === String ? "0" : 0;
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value === "number")
                        object.value = options.longs === String ? String(message.value) : message.value;
                    else
                        object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber(true) : message.value;
                return object;
            };

            /**
             * Converts this GCounterState to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.GCounterState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GCounterState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GCounterState;
        })();

        crdt.PNCounterState = (function() {

            /**
             * Properties of a PNCounterState.
             * @memberof cloudstate.crdt
             * @interface IPNCounterState
             * @property {number|Long|null} [value] PNCounterState value
             */

            /**
             * Constructs a new PNCounterState.
             * @memberof cloudstate.crdt
             * @classdesc Represents a PNCounterState.
             * @implements IPNCounterState
             * @constructor
             * @param {cloudstate.crdt.IPNCounterState=} [properties] Properties to set
             */
            function PNCounterState(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PNCounterState value.
             * @member {number|Long} value
             * @memberof cloudstate.crdt.PNCounterState
             * @instance
             */
            PNCounterState.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PNCounterState instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.PNCounterState
             * @static
             * @param {cloudstate.crdt.IPNCounterState=} [properties] Properties to set
             * @returns {cloudstate.crdt.PNCounterState} PNCounterState instance
             */
            PNCounterState.create = function create(properties) {
                return new PNCounterState(properties);
            };

            /**
             * Encodes the specified PNCounterState message. Does not implicitly {@link cloudstate.crdt.PNCounterState.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.PNCounterState
             * @static
             * @param {cloudstate.crdt.IPNCounterState} message PNCounterState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PNCounterState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.value);
                return writer;
            };

            /**
             * Encodes the specified PNCounterState message, length delimited. Does not implicitly {@link cloudstate.crdt.PNCounterState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.PNCounterState
             * @static
             * @param {cloudstate.crdt.IPNCounterState} message PNCounterState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PNCounterState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PNCounterState message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.PNCounterState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.PNCounterState} PNCounterState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PNCounterState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.PNCounterState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PNCounterState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.PNCounterState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.PNCounterState} PNCounterState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PNCounterState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PNCounterState message.
             * @function verify
             * @memberof cloudstate.crdt.PNCounterState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PNCounterState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                        return "value: integer|Long expected";
                return null;
            };

            /**
             * Creates a PNCounterState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.PNCounterState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.PNCounterState} PNCounterState
             */
            PNCounterState.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.PNCounterState)
                    return object;
                var message = new $root.cloudstate.crdt.PNCounterState();
                if (object.value != null)
                    if ($util.Long)
                        (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                    else if (typeof object.value === "string")
                        message.value = parseInt(object.value, 10);
                    else if (typeof object.value === "number")
                        message.value = object.value;
                    else if (typeof object.value === "object")
                        message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PNCounterState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.PNCounterState
             * @static
             * @param {cloudstate.crdt.PNCounterState} message PNCounterState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PNCounterState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.value = options.longs === String ? "0" : 0;
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value === "number")
                        object.value = options.longs === String ? String(message.value) : message.value;
                    else
                        object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
                return object;
            };

            /**
             * Converts this PNCounterState to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.PNCounterState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PNCounterState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PNCounterState;
        })();

        crdt.GSetState = (function() {

            /**
             * Properties of a GSetState.
             * @memberof cloudstate.crdt
             * @interface IGSetState
             * @property {Array.<google.protobuf.IAny>|null} [items] GSetState items
             */

            /**
             * Constructs a new GSetState.
             * @memberof cloudstate.crdt
             * @classdesc Represents a GSetState.
             * @implements IGSetState
             * @constructor
             * @param {cloudstate.crdt.IGSetState=} [properties] Properties to set
             */
            function GSetState(properties) {
                this.items = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GSetState items.
             * @member {Array.<google.protobuf.IAny>} items
             * @memberof cloudstate.crdt.GSetState
             * @instance
             */
            GSetState.prototype.items = $util.emptyArray;

            /**
             * Creates a new GSetState instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.GSetState
             * @static
             * @param {cloudstate.crdt.IGSetState=} [properties] Properties to set
             * @returns {cloudstate.crdt.GSetState} GSetState instance
             */
            GSetState.create = function create(properties) {
                return new GSetState(properties);
            };

            /**
             * Encodes the specified GSetState message. Does not implicitly {@link cloudstate.crdt.GSetState.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.GSetState
             * @static
             * @param {cloudstate.crdt.IGSetState} message GSetState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GSetState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.items != null && message.items.length)
                    for (var i = 0; i < message.items.length; ++i)
                        $root.google.protobuf.Any.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GSetState message, length delimited. Does not implicitly {@link cloudstate.crdt.GSetState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.GSetState
             * @static
             * @param {cloudstate.crdt.IGSetState} message GSetState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GSetState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GSetState message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.GSetState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.GSetState} GSetState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GSetState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.GSetState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GSetState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.GSetState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.GSetState} GSetState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GSetState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GSetState message.
             * @function verify
             * @memberof cloudstate.crdt.GSetState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GSetState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.items != null && message.hasOwnProperty("items")) {
                    if (!Array.isArray(message.items))
                        return "items: array expected";
                    for (var i = 0; i < message.items.length; ++i) {
                        var error = $root.google.protobuf.Any.verify(message.items[i]);
                        if (error)
                            return "items." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GSetState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.GSetState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.GSetState} GSetState
             */
            GSetState.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.GSetState)
                    return object;
                var message = new $root.cloudstate.crdt.GSetState();
                if (object.items) {
                    if (!Array.isArray(object.items))
                        throw TypeError(".cloudstate.crdt.GSetState.items: array expected");
                    message.items = [];
                    for (var i = 0; i < object.items.length; ++i) {
                        if (typeof object.items[i] !== "object")
                            throw TypeError(".cloudstate.crdt.GSetState.items: object expected");
                        message.items[i] = $root.google.protobuf.Any.fromObject(object.items[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GSetState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.GSetState
             * @static
             * @param {cloudstate.crdt.GSetState} message GSetState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GSetState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.items = [];
                if (message.items && message.items.length) {
                    object.items = [];
                    for (var j = 0; j < message.items.length; ++j)
                        object.items[j] = $root.google.protobuf.Any.toObject(message.items[j], options);
                }
                return object;
            };

            /**
             * Converts this GSetState to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.GSetState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GSetState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GSetState;
        })();

        crdt.ORSetState = (function() {

            /**
             * Properties of a ORSetState.
             * @memberof cloudstate.crdt
             * @interface IORSetState
             * @property {Array.<google.protobuf.IAny>|null} [items] ORSetState items
             */

            /**
             * Constructs a new ORSetState.
             * @memberof cloudstate.crdt
             * @classdesc Represents a ORSetState.
             * @implements IORSetState
             * @constructor
             * @param {cloudstate.crdt.IORSetState=} [properties] Properties to set
             */
            function ORSetState(properties) {
                this.items = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ORSetState items.
             * @member {Array.<google.protobuf.IAny>} items
             * @memberof cloudstate.crdt.ORSetState
             * @instance
             */
            ORSetState.prototype.items = $util.emptyArray;

            /**
             * Creates a new ORSetState instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.ORSetState
             * @static
             * @param {cloudstate.crdt.IORSetState=} [properties] Properties to set
             * @returns {cloudstate.crdt.ORSetState} ORSetState instance
             */
            ORSetState.create = function create(properties) {
                return new ORSetState(properties);
            };

            /**
             * Encodes the specified ORSetState message. Does not implicitly {@link cloudstate.crdt.ORSetState.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.ORSetState
             * @static
             * @param {cloudstate.crdt.IORSetState} message ORSetState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORSetState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.items != null && message.items.length)
                    for (var i = 0; i < message.items.length; ++i)
                        $root.google.protobuf.Any.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ORSetState message, length delimited. Does not implicitly {@link cloudstate.crdt.ORSetState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.ORSetState
             * @static
             * @param {cloudstate.crdt.IORSetState} message ORSetState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORSetState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ORSetState message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.ORSetState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.ORSetState} ORSetState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORSetState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.ORSetState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.items && message.items.length))
                            message.items = [];
                        message.items.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ORSetState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.ORSetState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.ORSetState} ORSetState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORSetState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ORSetState message.
             * @function verify
             * @memberof cloudstate.crdt.ORSetState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ORSetState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.items != null && message.hasOwnProperty("items")) {
                    if (!Array.isArray(message.items))
                        return "items: array expected";
                    for (var i = 0; i < message.items.length; ++i) {
                        var error = $root.google.protobuf.Any.verify(message.items[i]);
                        if (error)
                            return "items." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ORSetState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.ORSetState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.ORSetState} ORSetState
             */
            ORSetState.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.ORSetState)
                    return object;
                var message = new $root.cloudstate.crdt.ORSetState();
                if (object.items) {
                    if (!Array.isArray(object.items))
                        throw TypeError(".cloudstate.crdt.ORSetState.items: array expected");
                    message.items = [];
                    for (var i = 0; i < object.items.length; ++i) {
                        if (typeof object.items[i] !== "object")
                            throw TypeError(".cloudstate.crdt.ORSetState.items: object expected");
                        message.items[i] = $root.google.protobuf.Any.fromObject(object.items[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ORSetState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.ORSetState
             * @static
             * @param {cloudstate.crdt.ORSetState} message ORSetState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ORSetState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.items = [];
                if (message.items && message.items.length) {
                    object.items = [];
                    for (var j = 0; j < message.items.length; ++j)
                        object.items[j] = $root.google.protobuf.Any.toObject(message.items[j], options);
                }
                return object;
            };

            /**
             * Converts this ORSetState to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.ORSetState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ORSetState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ORSetState;
        })();

        crdt.LWWRegisterState = (function() {

            /**
             * Properties of a LWWRegisterState.
             * @memberof cloudstate.crdt
             * @interface ILWWRegisterState
             * @property {google.protobuf.IAny|null} [value] LWWRegisterState value
             * @property {cloudstate.crdt.CrdtClock|null} [clock] LWWRegisterState clock
             * @property {number|Long|null} [customClockValue] LWWRegisterState customClockValue
             */

            /**
             * Constructs a new LWWRegisterState.
             * @memberof cloudstate.crdt
             * @classdesc Represents a LWWRegisterState.
             * @implements ILWWRegisterState
             * @constructor
             * @param {cloudstate.crdt.ILWWRegisterState=} [properties] Properties to set
             */
            function LWWRegisterState(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LWWRegisterState value.
             * @member {google.protobuf.IAny|null|undefined} value
             * @memberof cloudstate.crdt.LWWRegisterState
             * @instance
             */
            LWWRegisterState.prototype.value = null;

            /**
             * LWWRegisterState clock.
             * @member {cloudstate.crdt.CrdtClock} clock
             * @memberof cloudstate.crdt.LWWRegisterState
             * @instance
             */
            LWWRegisterState.prototype.clock = 0;

            /**
             * LWWRegisterState customClockValue.
             * @member {number|Long} customClockValue
             * @memberof cloudstate.crdt.LWWRegisterState
             * @instance
             */
            LWWRegisterState.prototype.customClockValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new LWWRegisterState instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.LWWRegisterState
             * @static
             * @param {cloudstate.crdt.ILWWRegisterState=} [properties] Properties to set
             * @returns {cloudstate.crdt.LWWRegisterState} LWWRegisterState instance
             */
            LWWRegisterState.create = function create(properties) {
                return new LWWRegisterState(properties);
            };

            /**
             * Encodes the specified LWWRegisterState message. Does not implicitly {@link cloudstate.crdt.LWWRegisterState.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.LWWRegisterState
             * @static
             * @param {cloudstate.crdt.ILWWRegisterState} message LWWRegisterState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LWWRegisterState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && message.hasOwnProperty("value"))
                    $root.google.protobuf.Any.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.clock != null && message.hasOwnProperty("clock"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.clock);
                if (message.customClockValue != null && message.hasOwnProperty("customClockValue"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.customClockValue);
                return writer;
            };

            /**
             * Encodes the specified LWWRegisterState message, length delimited. Does not implicitly {@link cloudstate.crdt.LWWRegisterState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.LWWRegisterState
             * @static
             * @param {cloudstate.crdt.ILWWRegisterState} message LWWRegisterState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LWWRegisterState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LWWRegisterState message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.LWWRegisterState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.LWWRegisterState} LWWRegisterState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LWWRegisterState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.LWWRegisterState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.clock = reader.int32();
                        break;
                    case 3:
                        message.customClockValue = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LWWRegisterState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.LWWRegisterState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.LWWRegisterState} LWWRegisterState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LWWRegisterState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LWWRegisterState message.
             * @function verify
             * @memberof cloudstate.crdt.LWWRegisterState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LWWRegisterState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    var error = $root.google.protobuf.Any.verify(message.value);
                    if (error)
                        return "value." + error;
                }
                if (message.clock != null && message.hasOwnProperty("clock"))
                    switch (message.clock) {
                    default:
                        return "clock: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.customClockValue != null && message.hasOwnProperty("customClockValue"))
                    if (!$util.isInteger(message.customClockValue) && !(message.customClockValue && $util.isInteger(message.customClockValue.low) && $util.isInteger(message.customClockValue.high)))
                        return "customClockValue: integer|Long expected";
                return null;
            };

            /**
             * Creates a LWWRegisterState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.LWWRegisterState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.LWWRegisterState} LWWRegisterState
             */
            LWWRegisterState.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.LWWRegisterState)
                    return object;
                var message = new $root.cloudstate.crdt.LWWRegisterState();
                if (object.value != null) {
                    if (typeof object.value !== "object")
                        throw TypeError(".cloudstate.crdt.LWWRegisterState.value: object expected");
                    message.value = $root.google.protobuf.Any.fromObject(object.value);
                }
                switch (object.clock) {
                case "DEFAULT":
                case 0:
                    message.clock = 0;
                    break;
                case "REVERSE":
                case 1:
                    message.clock = 1;
                    break;
                case "CUSTOM":
                case 2:
                    message.clock = 2;
                    break;
                case "CUSTOM_AUTO_INCREMENT":
                case 3:
                    message.clock = 3;
                    break;
                }
                if (object.customClockValue != null)
                    if ($util.Long)
                        (message.customClockValue = $util.Long.fromValue(object.customClockValue)).unsigned = false;
                    else if (typeof object.customClockValue === "string")
                        message.customClockValue = parseInt(object.customClockValue, 10);
                    else if (typeof object.customClockValue === "number")
                        message.customClockValue = object.customClockValue;
                    else if (typeof object.customClockValue === "object")
                        message.customClockValue = new $util.LongBits(object.customClockValue.low >>> 0, object.customClockValue.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a LWWRegisterState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.LWWRegisterState
             * @static
             * @param {cloudstate.crdt.LWWRegisterState} message LWWRegisterState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LWWRegisterState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.value = null;
                    object.clock = options.enums === String ? "DEFAULT" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.customClockValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.customClockValue = options.longs === String ? "0" : 0;
                }
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = $root.google.protobuf.Any.toObject(message.value, options);
                if (message.clock != null && message.hasOwnProperty("clock"))
                    object.clock = options.enums === String ? $root.cloudstate.crdt.CrdtClock[message.clock] : message.clock;
                if (message.customClockValue != null && message.hasOwnProperty("customClockValue"))
                    if (typeof message.customClockValue === "number")
                        object.customClockValue = options.longs === String ? String(message.customClockValue) : message.customClockValue;
                    else
                        object.customClockValue = options.longs === String ? $util.Long.prototype.toString.call(message.customClockValue) : options.longs === Number ? new $util.LongBits(message.customClockValue.low >>> 0, message.customClockValue.high >>> 0).toNumber() : message.customClockValue;
                return object;
            };

            /**
             * Converts this LWWRegisterState to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.LWWRegisterState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LWWRegisterState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LWWRegisterState;
        })();

        crdt.FlagState = (function() {

            /**
             * Properties of a FlagState.
             * @memberof cloudstate.crdt
             * @interface IFlagState
             * @property {boolean|null} [value] FlagState value
             */

            /**
             * Constructs a new FlagState.
             * @memberof cloudstate.crdt
             * @classdesc Represents a FlagState.
             * @implements IFlagState
             * @constructor
             * @param {cloudstate.crdt.IFlagState=} [properties] Properties to set
             */
            function FlagState(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FlagState value.
             * @member {boolean} value
             * @memberof cloudstate.crdt.FlagState
             * @instance
             */
            FlagState.prototype.value = false;

            /**
             * Creates a new FlagState instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.FlagState
             * @static
             * @param {cloudstate.crdt.IFlagState=} [properties] Properties to set
             * @returns {cloudstate.crdt.FlagState} FlagState instance
             */
            FlagState.create = function create(properties) {
                return new FlagState(properties);
            };

            /**
             * Encodes the specified FlagState message. Does not implicitly {@link cloudstate.crdt.FlagState.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.FlagState
             * @static
             * @param {cloudstate.crdt.IFlagState} message FlagState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FlagState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                return writer;
            };

            /**
             * Encodes the specified FlagState message, length delimited. Does not implicitly {@link cloudstate.crdt.FlagState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.FlagState
             * @static
             * @param {cloudstate.crdt.IFlagState} message FlagState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FlagState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FlagState message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.FlagState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.FlagState} FlagState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FlagState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.FlagState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FlagState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.FlagState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.FlagState} FlagState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FlagState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FlagState message.
             * @function verify
             * @memberof cloudstate.crdt.FlagState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FlagState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value !== "boolean")
                        return "value: boolean expected";
                return null;
            };

            /**
             * Creates a FlagState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.FlagState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.FlagState} FlagState
             */
            FlagState.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.FlagState)
                    return object;
                var message = new $root.cloudstate.crdt.FlagState();
                if (object.value != null)
                    message.value = Boolean(object.value);
                return message;
            };

            /**
             * Creates a plain object from a FlagState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.FlagState
             * @static
             * @param {cloudstate.crdt.FlagState} message FlagState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FlagState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.value = false;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            /**
             * Converts this FlagState to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.FlagState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FlagState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FlagState;
        })();

        crdt.ORMapState = (function() {

            /**
             * Properties of a ORMapState.
             * @memberof cloudstate.crdt
             * @interface IORMapState
             * @property {Array.<cloudstate.crdt.IORMapEntry>|null} [entries] ORMapState entries
             */

            /**
             * Constructs a new ORMapState.
             * @memberof cloudstate.crdt
             * @classdesc Represents a ORMapState.
             * @implements IORMapState
             * @constructor
             * @param {cloudstate.crdt.IORMapState=} [properties] Properties to set
             */
            function ORMapState(properties) {
                this.entries = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ORMapState entries.
             * @member {Array.<cloudstate.crdt.IORMapEntry>} entries
             * @memberof cloudstate.crdt.ORMapState
             * @instance
             */
            ORMapState.prototype.entries = $util.emptyArray;

            /**
             * Creates a new ORMapState instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.ORMapState
             * @static
             * @param {cloudstate.crdt.IORMapState=} [properties] Properties to set
             * @returns {cloudstate.crdt.ORMapState} ORMapState instance
             */
            ORMapState.create = function create(properties) {
                return new ORMapState(properties);
            };

            /**
             * Encodes the specified ORMapState message. Does not implicitly {@link cloudstate.crdt.ORMapState.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.ORMapState
             * @static
             * @param {cloudstate.crdt.IORMapState} message ORMapState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORMapState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.entries != null && message.entries.length)
                    for (var i = 0; i < message.entries.length; ++i)
                        $root.cloudstate.crdt.ORMapEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ORMapState message, length delimited. Does not implicitly {@link cloudstate.crdt.ORMapState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.ORMapState
             * @static
             * @param {cloudstate.crdt.IORMapState} message ORMapState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORMapState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ORMapState message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.ORMapState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.ORMapState} ORMapState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORMapState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.ORMapState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.entries && message.entries.length))
                            message.entries = [];
                        message.entries.push($root.cloudstate.crdt.ORMapEntry.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ORMapState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.ORMapState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.ORMapState} ORMapState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORMapState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ORMapState message.
             * @function verify
             * @memberof cloudstate.crdt.ORMapState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ORMapState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.entries != null && message.hasOwnProperty("entries")) {
                    if (!Array.isArray(message.entries))
                        return "entries: array expected";
                    for (var i = 0; i < message.entries.length; ++i) {
                        var error = $root.cloudstate.crdt.ORMapEntry.verify(message.entries[i]);
                        if (error)
                            return "entries." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ORMapState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.ORMapState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.ORMapState} ORMapState
             */
            ORMapState.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.ORMapState)
                    return object;
                var message = new $root.cloudstate.crdt.ORMapState();
                if (object.entries) {
                    if (!Array.isArray(object.entries))
                        throw TypeError(".cloudstate.crdt.ORMapState.entries: array expected");
                    message.entries = [];
                    for (var i = 0; i < object.entries.length; ++i) {
                        if (typeof object.entries[i] !== "object")
                            throw TypeError(".cloudstate.crdt.ORMapState.entries: object expected");
                        message.entries[i] = $root.cloudstate.crdt.ORMapEntry.fromObject(object.entries[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ORMapState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.ORMapState
             * @static
             * @param {cloudstate.crdt.ORMapState} message ORMapState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ORMapState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.entries = [];
                if (message.entries && message.entries.length) {
                    object.entries = [];
                    for (var j = 0; j < message.entries.length; ++j)
                        object.entries[j] = $root.cloudstate.crdt.ORMapEntry.toObject(message.entries[j], options);
                }
                return object;
            };

            /**
             * Converts this ORMapState to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.ORMapState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ORMapState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ORMapState;
        })();

        crdt.ORMapEntry = (function() {

            /**
             * Properties of a ORMapEntry.
             * @memberof cloudstate.crdt
             * @interface IORMapEntry
             * @property {google.protobuf.IAny|null} [key] ORMapEntry key
             * @property {cloudstate.crdt.ICrdtState|null} [value] ORMapEntry value
             */

            /**
             * Constructs a new ORMapEntry.
             * @memberof cloudstate.crdt
             * @classdesc Represents a ORMapEntry.
             * @implements IORMapEntry
             * @constructor
             * @param {cloudstate.crdt.IORMapEntry=} [properties] Properties to set
             */
            function ORMapEntry(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ORMapEntry key.
             * @member {google.protobuf.IAny|null|undefined} key
             * @memberof cloudstate.crdt.ORMapEntry
             * @instance
             */
            ORMapEntry.prototype.key = null;

            /**
             * ORMapEntry value.
             * @member {cloudstate.crdt.ICrdtState|null|undefined} value
             * @memberof cloudstate.crdt.ORMapEntry
             * @instance
             */
            ORMapEntry.prototype.value = null;

            /**
             * Creates a new ORMapEntry instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.ORMapEntry
             * @static
             * @param {cloudstate.crdt.IORMapEntry=} [properties] Properties to set
             * @returns {cloudstate.crdt.ORMapEntry} ORMapEntry instance
             */
            ORMapEntry.create = function create(properties) {
                return new ORMapEntry(properties);
            };

            /**
             * Encodes the specified ORMapEntry message. Does not implicitly {@link cloudstate.crdt.ORMapEntry.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.ORMapEntry
             * @static
             * @param {cloudstate.crdt.IORMapEntry} message ORMapEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORMapEntry.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && message.hasOwnProperty("key"))
                    $root.google.protobuf.Any.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.value != null && message.hasOwnProperty("value"))
                    $root.cloudstate.crdt.CrdtState.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ORMapEntry message, length delimited. Does not implicitly {@link cloudstate.crdt.ORMapEntry.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.ORMapEntry
             * @static
             * @param {cloudstate.crdt.IORMapEntry} message ORMapEntry message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORMapEntry.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ORMapEntry message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.ORMapEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.ORMapEntry} ORMapEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORMapEntry.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.ORMapEntry();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.value = $root.cloudstate.crdt.CrdtState.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ORMapEntry message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.ORMapEntry
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.ORMapEntry} ORMapEntry
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORMapEntry.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ORMapEntry message.
             * @function verify
             * @memberof cloudstate.crdt.ORMapEntry
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ORMapEntry.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key")) {
                    var error = $root.google.protobuf.Any.verify(message.key);
                    if (error)
                        return "key." + error;
                }
                if (message.value != null && message.hasOwnProperty("value")) {
                    var error = $root.cloudstate.crdt.CrdtState.verify(message.value);
                    if (error)
                        return "value." + error;
                }
                return null;
            };

            /**
             * Creates a ORMapEntry message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.ORMapEntry
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.ORMapEntry} ORMapEntry
             */
            ORMapEntry.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.ORMapEntry)
                    return object;
                var message = new $root.cloudstate.crdt.ORMapEntry();
                if (object.key != null) {
                    if (typeof object.key !== "object")
                        throw TypeError(".cloudstate.crdt.ORMapEntry.key: object expected");
                    message.key = $root.google.protobuf.Any.fromObject(object.key);
                }
                if (object.value != null) {
                    if (typeof object.value !== "object")
                        throw TypeError(".cloudstate.crdt.ORMapEntry.value: object expected");
                    message.value = $root.cloudstate.crdt.CrdtState.fromObject(object.value);
                }
                return message;
            };

            /**
             * Creates a plain object from a ORMapEntry message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.ORMapEntry
             * @static
             * @param {cloudstate.crdt.ORMapEntry} message ORMapEntry
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ORMapEntry.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.key = null;
                    object.value = null;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = $root.google.protobuf.Any.toObject(message.key, options);
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = $root.cloudstate.crdt.CrdtState.toObject(message.value, options);
                return object;
            };

            /**
             * Converts this ORMapEntry to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.ORMapEntry
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ORMapEntry.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ORMapEntry;
        })();

        crdt.VoteState = (function() {

            /**
             * Properties of a VoteState.
             * @memberof cloudstate.crdt
             * @interface IVoteState
             * @property {number|null} [votesFor] VoteState votesFor
             * @property {number|null} [totalVoters] VoteState totalVoters
             * @property {boolean|null} [selfVote] VoteState selfVote
             */

            /**
             * Constructs a new VoteState.
             * @memberof cloudstate.crdt
             * @classdesc Represents a VoteState.
             * @implements IVoteState
             * @constructor
             * @param {cloudstate.crdt.IVoteState=} [properties] Properties to set
             */
            function VoteState(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VoteState votesFor.
             * @member {number} votesFor
             * @memberof cloudstate.crdt.VoteState
             * @instance
             */
            VoteState.prototype.votesFor = 0;

            /**
             * VoteState totalVoters.
             * @member {number} totalVoters
             * @memberof cloudstate.crdt.VoteState
             * @instance
             */
            VoteState.prototype.totalVoters = 0;

            /**
             * VoteState selfVote.
             * @member {boolean} selfVote
             * @memberof cloudstate.crdt.VoteState
             * @instance
             */
            VoteState.prototype.selfVote = false;

            /**
             * Creates a new VoteState instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.VoteState
             * @static
             * @param {cloudstate.crdt.IVoteState=} [properties] Properties to set
             * @returns {cloudstate.crdt.VoteState} VoteState instance
             */
            VoteState.create = function create(properties) {
                return new VoteState(properties);
            };

            /**
             * Encodes the specified VoteState message. Does not implicitly {@link cloudstate.crdt.VoteState.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.VoteState
             * @static
             * @param {cloudstate.crdt.IVoteState} message VoteState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteState.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.votesFor != null && message.hasOwnProperty("votesFor"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.votesFor);
                if (message.totalVoters != null && message.hasOwnProperty("totalVoters"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.totalVoters);
                if (message.selfVote != null && message.hasOwnProperty("selfVote"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.selfVote);
                return writer;
            };

            /**
             * Encodes the specified VoteState message, length delimited. Does not implicitly {@link cloudstate.crdt.VoteState.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.VoteState
             * @static
             * @param {cloudstate.crdt.IVoteState} message VoteState message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteState.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VoteState message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.VoteState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.VoteState} VoteState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteState.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.VoteState();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.votesFor = reader.uint32();
                        break;
                    case 2:
                        message.totalVoters = reader.uint32();
                        break;
                    case 3:
                        message.selfVote = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VoteState message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.VoteState
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.VoteState} VoteState
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteState.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VoteState message.
             * @function verify
             * @memberof cloudstate.crdt.VoteState
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VoteState.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.votesFor != null && message.hasOwnProperty("votesFor"))
                    if (!$util.isInteger(message.votesFor))
                        return "votesFor: integer expected";
                if (message.totalVoters != null && message.hasOwnProperty("totalVoters"))
                    if (!$util.isInteger(message.totalVoters))
                        return "totalVoters: integer expected";
                if (message.selfVote != null && message.hasOwnProperty("selfVote"))
                    if (typeof message.selfVote !== "boolean")
                        return "selfVote: boolean expected";
                return null;
            };

            /**
             * Creates a VoteState message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.VoteState
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.VoteState} VoteState
             */
            VoteState.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.VoteState)
                    return object;
                var message = new $root.cloudstate.crdt.VoteState();
                if (object.votesFor != null)
                    message.votesFor = object.votesFor >>> 0;
                if (object.totalVoters != null)
                    message.totalVoters = object.totalVoters >>> 0;
                if (object.selfVote != null)
                    message.selfVote = Boolean(object.selfVote);
                return message;
            };

            /**
             * Creates a plain object from a VoteState message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.VoteState
             * @static
             * @param {cloudstate.crdt.VoteState} message VoteState
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VoteState.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.votesFor = 0;
                    object.totalVoters = 0;
                    object.selfVote = false;
                }
                if (message.votesFor != null && message.hasOwnProperty("votesFor"))
                    object.votesFor = message.votesFor;
                if (message.totalVoters != null && message.hasOwnProperty("totalVoters"))
                    object.totalVoters = message.totalVoters;
                if (message.selfVote != null && message.hasOwnProperty("selfVote"))
                    object.selfVote = message.selfVote;
                return object;
            };

            /**
             * Converts this VoteState to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.VoteState
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VoteState.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VoteState;
        })();

        crdt.CrdtDelta = (function() {

            /**
             * Properties of a CrdtDelta.
             * @memberof cloudstate.crdt
             * @interface ICrdtDelta
             * @property {cloudstate.crdt.IGCounterDelta|null} [gcounter] CrdtDelta gcounter
             * @property {cloudstate.crdt.IPNCounterDelta|null} [pncounter] CrdtDelta pncounter
             * @property {cloudstate.crdt.IGSetDelta|null} [gset] CrdtDelta gset
             * @property {cloudstate.crdt.IORSetDelta|null} [orset] CrdtDelta orset
             * @property {cloudstate.crdt.ILWWRegisterDelta|null} [lwwregister] CrdtDelta lwwregister
             * @property {cloudstate.crdt.IFlagDelta|null} [flag] CrdtDelta flag
             * @property {cloudstate.crdt.IORMapDelta|null} [ormap] CrdtDelta ormap
             * @property {cloudstate.crdt.IVoteDelta|null} [vote] CrdtDelta vote
             */

            /**
             * Constructs a new CrdtDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtDelta.
             * @implements ICrdtDelta
             * @constructor
             * @param {cloudstate.crdt.ICrdtDelta=} [properties] Properties to set
             */
            function CrdtDelta(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CrdtDelta gcounter.
             * @member {cloudstate.crdt.IGCounterDelta|null|undefined} gcounter
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             */
            CrdtDelta.prototype.gcounter = null;

            /**
             * CrdtDelta pncounter.
             * @member {cloudstate.crdt.IPNCounterDelta|null|undefined} pncounter
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             */
            CrdtDelta.prototype.pncounter = null;

            /**
             * CrdtDelta gset.
             * @member {cloudstate.crdt.IGSetDelta|null|undefined} gset
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             */
            CrdtDelta.prototype.gset = null;

            /**
             * CrdtDelta orset.
             * @member {cloudstate.crdt.IORSetDelta|null|undefined} orset
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             */
            CrdtDelta.prototype.orset = null;

            /**
             * CrdtDelta lwwregister.
             * @member {cloudstate.crdt.ILWWRegisterDelta|null|undefined} lwwregister
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             */
            CrdtDelta.prototype.lwwregister = null;

            /**
             * CrdtDelta flag.
             * @member {cloudstate.crdt.IFlagDelta|null|undefined} flag
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             */
            CrdtDelta.prototype.flag = null;

            /**
             * CrdtDelta ormap.
             * @member {cloudstate.crdt.IORMapDelta|null|undefined} ormap
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             */
            CrdtDelta.prototype.ormap = null;

            /**
             * CrdtDelta vote.
             * @member {cloudstate.crdt.IVoteDelta|null|undefined} vote
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             */
            CrdtDelta.prototype.vote = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * CrdtDelta delta.
             * @member {"gcounter"|"pncounter"|"gset"|"orset"|"lwwregister"|"flag"|"ormap"|"vote"|undefined} delta
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             */
            Object.defineProperty(CrdtDelta.prototype, "delta", {
                get: $util.oneOfGetter($oneOfFields = ["gcounter", "pncounter", "gset", "orset", "lwwregister", "flag", "ormap", "vote"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new CrdtDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtDelta
             * @static
             * @param {cloudstate.crdt.ICrdtDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtDelta} CrdtDelta instance
             */
            CrdtDelta.create = function create(properties) {
                return new CrdtDelta(properties);
            };

            /**
             * Encodes the specified CrdtDelta message. Does not implicitly {@link cloudstate.crdt.CrdtDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtDelta
             * @static
             * @param {cloudstate.crdt.ICrdtDelta} message CrdtDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.gcounter != null && message.hasOwnProperty("gcounter"))
                    $root.cloudstate.crdt.GCounterDelta.encode(message.gcounter, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.pncounter != null && message.hasOwnProperty("pncounter"))
                    $root.cloudstate.crdt.PNCounterDelta.encode(message.pncounter, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.gset != null && message.hasOwnProperty("gset"))
                    $root.cloudstate.crdt.GSetDelta.encode(message.gset, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.orset != null && message.hasOwnProperty("orset"))
                    $root.cloudstate.crdt.ORSetDelta.encode(message.orset, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.lwwregister != null && message.hasOwnProperty("lwwregister"))
                    $root.cloudstate.crdt.LWWRegisterDelta.encode(message.lwwregister, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.flag != null && message.hasOwnProperty("flag"))
                    $root.cloudstate.crdt.FlagDelta.encode(message.flag, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.ormap != null && message.hasOwnProperty("ormap"))
                    $root.cloudstate.crdt.ORMapDelta.encode(message.ormap, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.vote != null && message.hasOwnProperty("vote"))
                    $root.cloudstate.crdt.VoteDelta.encode(message.vote, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CrdtDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtDelta
             * @static
             * @param {cloudstate.crdt.ICrdtDelta} message CrdtDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtDelta} CrdtDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.gcounter = $root.cloudstate.crdt.GCounterDelta.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.pncounter = $root.cloudstate.crdt.PNCounterDelta.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.gset = $root.cloudstate.crdt.GSetDelta.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.orset = $root.cloudstate.crdt.ORSetDelta.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.lwwregister = $root.cloudstate.crdt.LWWRegisterDelta.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.flag = $root.cloudstate.crdt.FlagDelta.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.ormap = $root.cloudstate.crdt.ORMapDelta.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.vote = $root.cloudstate.crdt.VoteDelta.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtDelta} CrdtDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtDelta message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.gcounter != null && message.hasOwnProperty("gcounter")) {
                    properties.delta = 1;
                    {
                        var error = $root.cloudstate.crdt.GCounterDelta.verify(message.gcounter);
                        if (error)
                            return "gcounter." + error;
                    }
                }
                if (message.pncounter != null && message.hasOwnProperty("pncounter")) {
                    if (properties.delta === 1)
                        return "delta: multiple values";
                    properties.delta = 1;
                    {
                        var error = $root.cloudstate.crdt.PNCounterDelta.verify(message.pncounter);
                        if (error)
                            return "pncounter." + error;
                    }
                }
                if (message.gset != null && message.hasOwnProperty("gset")) {
                    if (properties.delta === 1)
                        return "delta: multiple values";
                    properties.delta = 1;
                    {
                        var error = $root.cloudstate.crdt.GSetDelta.verify(message.gset);
                        if (error)
                            return "gset." + error;
                    }
                }
                if (message.orset != null && message.hasOwnProperty("orset")) {
                    if (properties.delta === 1)
                        return "delta: multiple values";
                    properties.delta = 1;
                    {
                        var error = $root.cloudstate.crdt.ORSetDelta.verify(message.orset);
                        if (error)
                            return "orset." + error;
                    }
                }
                if (message.lwwregister != null && message.hasOwnProperty("lwwregister")) {
                    if (properties.delta === 1)
                        return "delta: multiple values";
                    properties.delta = 1;
                    {
                        var error = $root.cloudstate.crdt.LWWRegisterDelta.verify(message.lwwregister);
                        if (error)
                            return "lwwregister." + error;
                    }
                }
                if (message.flag != null && message.hasOwnProperty("flag")) {
                    if (properties.delta === 1)
                        return "delta: multiple values";
                    properties.delta = 1;
                    {
                        var error = $root.cloudstate.crdt.FlagDelta.verify(message.flag);
                        if (error)
                            return "flag." + error;
                    }
                }
                if (message.ormap != null && message.hasOwnProperty("ormap")) {
                    if (properties.delta === 1)
                        return "delta: multiple values";
                    properties.delta = 1;
                    {
                        var error = $root.cloudstate.crdt.ORMapDelta.verify(message.ormap);
                        if (error)
                            return "ormap." + error;
                    }
                }
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    if (properties.delta === 1)
                        return "delta: multiple values";
                    properties.delta = 1;
                    {
                        var error = $root.cloudstate.crdt.VoteDelta.verify(message.vote);
                        if (error)
                            return "vote." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a CrdtDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtDelta} CrdtDelta
             */
            CrdtDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtDelta)
                    return object;
                var message = new $root.cloudstate.crdt.CrdtDelta();
                if (object.gcounter != null) {
                    if (typeof object.gcounter !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtDelta.gcounter: object expected");
                    message.gcounter = $root.cloudstate.crdt.GCounterDelta.fromObject(object.gcounter);
                }
                if (object.pncounter != null) {
                    if (typeof object.pncounter !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtDelta.pncounter: object expected");
                    message.pncounter = $root.cloudstate.crdt.PNCounterDelta.fromObject(object.pncounter);
                }
                if (object.gset != null) {
                    if (typeof object.gset !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtDelta.gset: object expected");
                    message.gset = $root.cloudstate.crdt.GSetDelta.fromObject(object.gset);
                }
                if (object.orset != null) {
                    if (typeof object.orset !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtDelta.orset: object expected");
                    message.orset = $root.cloudstate.crdt.ORSetDelta.fromObject(object.orset);
                }
                if (object.lwwregister != null) {
                    if (typeof object.lwwregister !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtDelta.lwwregister: object expected");
                    message.lwwregister = $root.cloudstate.crdt.LWWRegisterDelta.fromObject(object.lwwregister);
                }
                if (object.flag != null) {
                    if (typeof object.flag !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtDelta.flag: object expected");
                    message.flag = $root.cloudstate.crdt.FlagDelta.fromObject(object.flag);
                }
                if (object.ormap != null) {
                    if (typeof object.ormap !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtDelta.ormap: object expected");
                    message.ormap = $root.cloudstate.crdt.ORMapDelta.fromObject(object.ormap);
                }
                if (object.vote != null) {
                    if (typeof object.vote !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtDelta.vote: object expected");
                    message.vote = $root.cloudstate.crdt.VoteDelta.fromObject(object.vote);
                }
                return message;
            };

            /**
             * Creates a plain object from a CrdtDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtDelta
             * @static
             * @param {cloudstate.crdt.CrdtDelta} message CrdtDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.gcounter != null && message.hasOwnProperty("gcounter")) {
                    object.gcounter = $root.cloudstate.crdt.GCounterDelta.toObject(message.gcounter, options);
                    if (options.oneofs)
                        object.delta = "gcounter";
                }
                if (message.pncounter != null && message.hasOwnProperty("pncounter")) {
                    object.pncounter = $root.cloudstate.crdt.PNCounterDelta.toObject(message.pncounter, options);
                    if (options.oneofs)
                        object.delta = "pncounter";
                }
                if (message.gset != null && message.hasOwnProperty("gset")) {
                    object.gset = $root.cloudstate.crdt.GSetDelta.toObject(message.gset, options);
                    if (options.oneofs)
                        object.delta = "gset";
                }
                if (message.orset != null && message.hasOwnProperty("orset")) {
                    object.orset = $root.cloudstate.crdt.ORSetDelta.toObject(message.orset, options);
                    if (options.oneofs)
                        object.delta = "orset";
                }
                if (message.lwwregister != null && message.hasOwnProperty("lwwregister")) {
                    object.lwwregister = $root.cloudstate.crdt.LWWRegisterDelta.toObject(message.lwwregister, options);
                    if (options.oneofs)
                        object.delta = "lwwregister";
                }
                if (message.flag != null && message.hasOwnProperty("flag")) {
                    object.flag = $root.cloudstate.crdt.FlagDelta.toObject(message.flag, options);
                    if (options.oneofs)
                        object.delta = "flag";
                }
                if (message.ormap != null && message.hasOwnProperty("ormap")) {
                    object.ormap = $root.cloudstate.crdt.ORMapDelta.toObject(message.ormap, options);
                    if (options.oneofs)
                        object.delta = "ormap";
                }
                if (message.vote != null && message.hasOwnProperty("vote")) {
                    object.vote = $root.cloudstate.crdt.VoteDelta.toObject(message.vote, options);
                    if (options.oneofs)
                        object.delta = "vote";
                }
                return object;
            };

            /**
             * Converts this CrdtDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtDelta;
        })();

        crdt.GCounterDelta = (function() {

            /**
             * Properties of a GCounterDelta.
             * @memberof cloudstate.crdt
             * @interface IGCounterDelta
             * @property {number|Long|null} [increment] GCounterDelta increment
             */

            /**
             * Constructs a new GCounterDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a GCounterDelta.
             * @implements IGCounterDelta
             * @constructor
             * @param {cloudstate.crdt.IGCounterDelta=} [properties] Properties to set
             */
            function GCounterDelta(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GCounterDelta increment.
             * @member {number|Long} increment
             * @memberof cloudstate.crdt.GCounterDelta
             * @instance
             */
            GCounterDelta.prototype.increment = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new GCounterDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.GCounterDelta
             * @static
             * @param {cloudstate.crdt.IGCounterDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.GCounterDelta} GCounterDelta instance
             */
            GCounterDelta.create = function create(properties) {
                return new GCounterDelta(properties);
            };

            /**
             * Encodes the specified GCounterDelta message. Does not implicitly {@link cloudstate.crdt.GCounterDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.GCounterDelta
             * @static
             * @param {cloudstate.crdt.IGCounterDelta} message GCounterDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GCounterDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.increment != null && message.hasOwnProperty("increment"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.increment);
                return writer;
            };

            /**
             * Encodes the specified GCounterDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.GCounterDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.GCounterDelta
             * @static
             * @param {cloudstate.crdt.IGCounterDelta} message GCounterDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GCounterDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GCounterDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.GCounterDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.GCounterDelta} GCounterDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GCounterDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.GCounterDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.increment = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GCounterDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.GCounterDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.GCounterDelta} GCounterDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GCounterDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GCounterDelta message.
             * @function verify
             * @memberof cloudstate.crdt.GCounterDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GCounterDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.increment != null && message.hasOwnProperty("increment"))
                    if (!$util.isInteger(message.increment) && !(message.increment && $util.isInteger(message.increment.low) && $util.isInteger(message.increment.high)))
                        return "increment: integer|Long expected";
                return null;
            };

            /**
             * Creates a GCounterDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.GCounterDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.GCounterDelta} GCounterDelta
             */
            GCounterDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.GCounterDelta)
                    return object;
                var message = new $root.cloudstate.crdt.GCounterDelta();
                if (object.increment != null)
                    if ($util.Long)
                        (message.increment = $util.Long.fromValue(object.increment)).unsigned = true;
                    else if (typeof object.increment === "string")
                        message.increment = parseInt(object.increment, 10);
                    else if (typeof object.increment === "number")
                        message.increment = object.increment;
                    else if (typeof object.increment === "object")
                        message.increment = new $util.LongBits(object.increment.low >>> 0, object.increment.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a GCounterDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.GCounterDelta
             * @static
             * @param {cloudstate.crdt.GCounterDelta} message GCounterDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GCounterDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.increment = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.increment = options.longs === String ? "0" : 0;
                if (message.increment != null && message.hasOwnProperty("increment"))
                    if (typeof message.increment === "number")
                        object.increment = options.longs === String ? String(message.increment) : message.increment;
                    else
                        object.increment = options.longs === String ? $util.Long.prototype.toString.call(message.increment) : options.longs === Number ? new $util.LongBits(message.increment.low >>> 0, message.increment.high >>> 0).toNumber(true) : message.increment;
                return object;
            };

            /**
             * Converts this GCounterDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.GCounterDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GCounterDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GCounterDelta;
        })();

        crdt.PNCounterDelta = (function() {

            /**
             * Properties of a PNCounterDelta.
             * @memberof cloudstate.crdt
             * @interface IPNCounterDelta
             * @property {number|Long|null} [change] PNCounterDelta change
             */

            /**
             * Constructs a new PNCounterDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a PNCounterDelta.
             * @implements IPNCounterDelta
             * @constructor
             * @param {cloudstate.crdt.IPNCounterDelta=} [properties] Properties to set
             */
            function PNCounterDelta(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PNCounterDelta change.
             * @member {number|Long} change
             * @memberof cloudstate.crdt.PNCounterDelta
             * @instance
             */
            PNCounterDelta.prototype.change = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new PNCounterDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.PNCounterDelta
             * @static
             * @param {cloudstate.crdt.IPNCounterDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.PNCounterDelta} PNCounterDelta instance
             */
            PNCounterDelta.create = function create(properties) {
                return new PNCounterDelta(properties);
            };

            /**
             * Encodes the specified PNCounterDelta message. Does not implicitly {@link cloudstate.crdt.PNCounterDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.PNCounterDelta
             * @static
             * @param {cloudstate.crdt.IPNCounterDelta} message PNCounterDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PNCounterDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.change != null && message.hasOwnProperty("change"))
                    writer.uint32(/* id 1, wireType 0 =*/8).sint64(message.change);
                return writer;
            };

            /**
             * Encodes the specified PNCounterDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.PNCounterDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.PNCounterDelta
             * @static
             * @param {cloudstate.crdt.IPNCounterDelta} message PNCounterDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PNCounterDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PNCounterDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.PNCounterDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.PNCounterDelta} PNCounterDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PNCounterDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.PNCounterDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.change = reader.sint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PNCounterDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.PNCounterDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.PNCounterDelta} PNCounterDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PNCounterDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PNCounterDelta message.
             * @function verify
             * @memberof cloudstate.crdt.PNCounterDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PNCounterDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.change != null && message.hasOwnProperty("change"))
                    if (!$util.isInteger(message.change) && !(message.change && $util.isInteger(message.change.low) && $util.isInteger(message.change.high)))
                        return "change: integer|Long expected";
                return null;
            };

            /**
             * Creates a PNCounterDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.PNCounterDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.PNCounterDelta} PNCounterDelta
             */
            PNCounterDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.PNCounterDelta)
                    return object;
                var message = new $root.cloudstate.crdt.PNCounterDelta();
                if (object.change != null)
                    if ($util.Long)
                        (message.change = $util.Long.fromValue(object.change)).unsigned = false;
                    else if (typeof object.change === "string")
                        message.change = parseInt(object.change, 10);
                    else if (typeof object.change === "number")
                        message.change = object.change;
                    else if (typeof object.change === "object")
                        message.change = new $util.LongBits(object.change.low >>> 0, object.change.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a PNCounterDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.PNCounterDelta
             * @static
             * @param {cloudstate.crdt.PNCounterDelta} message PNCounterDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PNCounterDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.change = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.change = options.longs === String ? "0" : 0;
                if (message.change != null && message.hasOwnProperty("change"))
                    if (typeof message.change === "number")
                        object.change = options.longs === String ? String(message.change) : message.change;
                    else
                        object.change = options.longs === String ? $util.Long.prototype.toString.call(message.change) : options.longs === Number ? new $util.LongBits(message.change.low >>> 0, message.change.high >>> 0).toNumber() : message.change;
                return object;
            };

            /**
             * Converts this PNCounterDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.PNCounterDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PNCounterDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PNCounterDelta;
        })();

        crdt.GSetDelta = (function() {

            /**
             * Properties of a GSetDelta.
             * @memberof cloudstate.crdt
             * @interface IGSetDelta
             * @property {Array.<google.protobuf.IAny>|null} [added] GSetDelta added
             */

            /**
             * Constructs a new GSetDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a GSetDelta.
             * @implements IGSetDelta
             * @constructor
             * @param {cloudstate.crdt.IGSetDelta=} [properties] Properties to set
             */
            function GSetDelta(properties) {
                this.added = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GSetDelta added.
             * @member {Array.<google.protobuf.IAny>} added
             * @memberof cloudstate.crdt.GSetDelta
             * @instance
             */
            GSetDelta.prototype.added = $util.emptyArray;

            /**
             * Creates a new GSetDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.GSetDelta
             * @static
             * @param {cloudstate.crdt.IGSetDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.GSetDelta} GSetDelta instance
             */
            GSetDelta.create = function create(properties) {
                return new GSetDelta(properties);
            };

            /**
             * Encodes the specified GSetDelta message. Does not implicitly {@link cloudstate.crdt.GSetDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.GSetDelta
             * @static
             * @param {cloudstate.crdt.IGSetDelta} message GSetDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GSetDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.added != null && message.added.length)
                    for (var i = 0; i < message.added.length; ++i)
                        $root.google.protobuf.Any.encode(message.added[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GSetDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.GSetDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.GSetDelta
             * @static
             * @param {cloudstate.crdt.IGSetDelta} message GSetDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GSetDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GSetDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.GSetDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.GSetDelta} GSetDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GSetDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.GSetDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.added && message.added.length))
                            message.added = [];
                        message.added.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GSetDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.GSetDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.GSetDelta} GSetDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GSetDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GSetDelta message.
             * @function verify
             * @memberof cloudstate.crdt.GSetDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GSetDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.added != null && message.hasOwnProperty("added")) {
                    if (!Array.isArray(message.added))
                        return "added: array expected";
                    for (var i = 0; i < message.added.length; ++i) {
                        var error = $root.google.protobuf.Any.verify(message.added[i]);
                        if (error)
                            return "added." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GSetDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.GSetDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.GSetDelta} GSetDelta
             */
            GSetDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.GSetDelta)
                    return object;
                var message = new $root.cloudstate.crdt.GSetDelta();
                if (object.added) {
                    if (!Array.isArray(object.added))
                        throw TypeError(".cloudstate.crdt.GSetDelta.added: array expected");
                    message.added = [];
                    for (var i = 0; i < object.added.length; ++i) {
                        if (typeof object.added[i] !== "object")
                            throw TypeError(".cloudstate.crdt.GSetDelta.added: object expected");
                        message.added[i] = $root.google.protobuf.Any.fromObject(object.added[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GSetDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.GSetDelta
             * @static
             * @param {cloudstate.crdt.GSetDelta} message GSetDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GSetDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.added = [];
                if (message.added && message.added.length) {
                    object.added = [];
                    for (var j = 0; j < message.added.length; ++j)
                        object.added[j] = $root.google.protobuf.Any.toObject(message.added[j], options);
                }
                return object;
            };

            /**
             * Converts this GSetDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.GSetDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GSetDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return GSetDelta;
        })();

        crdt.ORSetDelta = (function() {

            /**
             * Properties of a ORSetDelta.
             * @memberof cloudstate.crdt
             * @interface IORSetDelta
             * @property {boolean|null} [cleared] ORSetDelta cleared
             * @property {Array.<google.protobuf.IAny>|null} [removed] ORSetDelta removed
             * @property {Array.<google.protobuf.IAny>|null} [added] ORSetDelta added
             */

            /**
             * Constructs a new ORSetDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a ORSetDelta.
             * @implements IORSetDelta
             * @constructor
             * @param {cloudstate.crdt.IORSetDelta=} [properties] Properties to set
             */
            function ORSetDelta(properties) {
                this.removed = [];
                this.added = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ORSetDelta cleared.
             * @member {boolean} cleared
             * @memberof cloudstate.crdt.ORSetDelta
             * @instance
             */
            ORSetDelta.prototype.cleared = false;

            /**
             * ORSetDelta removed.
             * @member {Array.<google.protobuf.IAny>} removed
             * @memberof cloudstate.crdt.ORSetDelta
             * @instance
             */
            ORSetDelta.prototype.removed = $util.emptyArray;

            /**
             * ORSetDelta added.
             * @member {Array.<google.protobuf.IAny>} added
             * @memberof cloudstate.crdt.ORSetDelta
             * @instance
             */
            ORSetDelta.prototype.added = $util.emptyArray;

            /**
             * Creates a new ORSetDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.ORSetDelta
             * @static
             * @param {cloudstate.crdt.IORSetDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.ORSetDelta} ORSetDelta instance
             */
            ORSetDelta.create = function create(properties) {
                return new ORSetDelta(properties);
            };

            /**
             * Encodes the specified ORSetDelta message. Does not implicitly {@link cloudstate.crdt.ORSetDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.ORSetDelta
             * @static
             * @param {cloudstate.crdt.IORSetDelta} message ORSetDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORSetDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.cleared != null && message.hasOwnProperty("cleared"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.cleared);
                if (message.removed != null && message.removed.length)
                    for (var i = 0; i < message.removed.length; ++i)
                        $root.google.protobuf.Any.encode(message.removed[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.added != null && message.added.length)
                    for (var i = 0; i < message.added.length; ++i)
                        $root.google.protobuf.Any.encode(message.added[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ORSetDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.ORSetDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.ORSetDelta
             * @static
             * @param {cloudstate.crdt.IORSetDelta} message ORSetDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORSetDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ORSetDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.ORSetDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.ORSetDelta} ORSetDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORSetDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.ORSetDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.cleared = reader.bool();
                        break;
                    case 2:
                        if (!(message.removed && message.removed.length))
                            message.removed = [];
                        message.removed.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.added && message.added.length))
                            message.added = [];
                        message.added.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ORSetDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.ORSetDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.ORSetDelta} ORSetDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORSetDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ORSetDelta message.
             * @function verify
             * @memberof cloudstate.crdt.ORSetDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ORSetDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.cleared != null && message.hasOwnProperty("cleared"))
                    if (typeof message.cleared !== "boolean")
                        return "cleared: boolean expected";
                if (message.removed != null && message.hasOwnProperty("removed")) {
                    if (!Array.isArray(message.removed))
                        return "removed: array expected";
                    for (var i = 0; i < message.removed.length; ++i) {
                        var error = $root.google.protobuf.Any.verify(message.removed[i]);
                        if (error)
                            return "removed." + error;
                    }
                }
                if (message.added != null && message.hasOwnProperty("added")) {
                    if (!Array.isArray(message.added))
                        return "added: array expected";
                    for (var i = 0; i < message.added.length; ++i) {
                        var error = $root.google.protobuf.Any.verify(message.added[i]);
                        if (error)
                            return "added." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ORSetDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.ORSetDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.ORSetDelta} ORSetDelta
             */
            ORSetDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.ORSetDelta)
                    return object;
                var message = new $root.cloudstate.crdt.ORSetDelta();
                if (object.cleared != null)
                    message.cleared = Boolean(object.cleared);
                if (object.removed) {
                    if (!Array.isArray(object.removed))
                        throw TypeError(".cloudstate.crdt.ORSetDelta.removed: array expected");
                    message.removed = [];
                    for (var i = 0; i < object.removed.length; ++i) {
                        if (typeof object.removed[i] !== "object")
                            throw TypeError(".cloudstate.crdt.ORSetDelta.removed: object expected");
                        message.removed[i] = $root.google.protobuf.Any.fromObject(object.removed[i]);
                    }
                }
                if (object.added) {
                    if (!Array.isArray(object.added))
                        throw TypeError(".cloudstate.crdt.ORSetDelta.added: array expected");
                    message.added = [];
                    for (var i = 0; i < object.added.length; ++i) {
                        if (typeof object.added[i] !== "object")
                            throw TypeError(".cloudstate.crdt.ORSetDelta.added: object expected");
                        message.added[i] = $root.google.protobuf.Any.fromObject(object.added[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ORSetDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.ORSetDelta
             * @static
             * @param {cloudstate.crdt.ORSetDelta} message ORSetDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ORSetDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.removed = [];
                    object.added = [];
                }
                if (options.defaults)
                    object.cleared = false;
                if (message.cleared != null && message.hasOwnProperty("cleared"))
                    object.cleared = message.cleared;
                if (message.removed && message.removed.length) {
                    object.removed = [];
                    for (var j = 0; j < message.removed.length; ++j)
                        object.removed[j] = $root.google.protobuf.Any.toObject(message.removed[j], options);
                }
                if (message.added && message.added.length) {
                    object.added = [];
                    for (var j = 0; j < message.added.length; ++j)
                        object.added[j] = $root.google.protobuf.Any.toObject(message.added[j], options);
                }
                return object;
            };

            /**
             * Converts this ORSetDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.ORSetDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ORSetDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ORSetDelta;
        })();

        crdt.LWWRegisterDelta = (function() {

            /**
             * Properties of a LWWRegisterDelta.
             * @memberof cloudstate.crdt
             * @interface ILWWRegisterDelta
             * @property {google.protobuf.IAny|null} [value] LWWRegisterDelta value
             * @property {cloudstate.crdt.CrdtClock|null} [clock] LWWRegisterDelta clock
             * @property {number|Long|null} [customClockValue] LWWRegisterDelta customClockValue
             */

            /**
             * Constructs a new LWWRegisterDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a LWWRegisterDelta.
             * @implements ILWWRegisterDelta
             * @constructor
             * @param {cloudstate.crdt.ILWWRegisterDelta=} [properties] Properties to set
             */
            function LWWRegisterDelta(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LWWRegisterDelta value.
             * @member {google.protobuf.IAny|null|undefined} value
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @instance
             */
            LWWRegisterDelta.prototype.value = null;

            /**
             * LWWRegisterDelta clock.
             * @member {cloudstate.crdt.CrdtClock} clock
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @instance
             */
            LWWRegisterDelta.prototype.clock = 0;

            /**
             * LWWRegisterDelta customClockValue.
             * @member {number|Long} customClockValue
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @instance
             */
            LWWRegisterDelta.prototype.customClockValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new LWWRegisterDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @static
             * @param {cloudstate.crdt.ILWWRegisterDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.LWWRegisterDelta} LWWRegisterDelta instance
             */
            LWWRegisterDelta.create = function create(properties) {
                return new LWWRegisterDelta(properties);
            };

            /**
             * Encodes the specified LWWRegisterDelta message. Does not implicitly {@link cloudstate.crdt.LWWRegisterDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @static
             * @param {cloudstate.crdt.ILWWRegisterDelta} message LWWRegisterDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LWWRegisterDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && message.hasOwnProperty("value"))
                    $root.google.protobuf.Any.encode(message.value, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.clock != null && message.hasOwnProperty("clock"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.clock);
                if (message.customClockValue != null && message.hasOwnProperty("customClockValue"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.customClockValue);
                return writer;
            };

            /**
             * Encodes the specified LWWRegisterDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.LWWRegisterDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @static
             * @param {cloudstate.crdt.ILWWRegisterDelta} message LWWRegisterDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LWWRegisterDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LWWRegisterDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.LWWRegisterDelta} LWWRegisterDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LWWRegisterDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.LWWRegisterDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.clock = reader.int32();
                        break;
                    case 3:
                        message.customClockValue = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LWWRegisterDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.LWWRegisterDelta} LWWRegisterDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LWWRegisterDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LWWRegisterDelta message.
             * @function verify
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LWWRegisterDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    var error = $root.google.protobuf.Any.verify(message.value);
                    if (error)
                        return "value." + error;
                }
                if (message.clock != null && message.hasOwnProperty("clock"))
                    switch (message.clock) {
                    default:
                        return "clock: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.customClockValue != null && message.hasOwnProperty("customClockValue"))
                    if (!$util.isInteger(message.customClockValue) && !(message.customClockValue && $util.isInteger(message.customClockValue.low) && $util.isInteger(message.customClockValue.high)))
                        return "customClockValue: integer|Long expected";
                return null;
            };

            /**
             * Creates a LWWRegisterDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.LWWRegisterDelta} LWWRegisterDelta
             */
            LWWRegisterDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.LWWRegisterDelta)
                    return object;
                var message = new $root.cloudstate.crdt.LWWRegisterDelta();
                if (object.value != null) {
                    if (typeof object.value !== "object")
                        throw TypeError(".cloudstate.crdt.LWWRegisterDelta.value: object expected");
                    message.value = $root.google.protobuf.Any.fromObject(object.value);
                }
                switch (object.clock) {
                case "DEFAULT":
                case 0:
                    message.clock = 0;
                    break;
                case "REVERSE":
                case 1:
                    message.clock = 1;
                    break;
                case "CUSTOM":
                case 2:
                    message.clock = 2;
                    break;
                case "CUSTOM_AUTO_INCREMENT":
                case 3:
                    message.clock = 3;
                    break;
                }
                if (object.customClockValue != null)
                    if ($util.Long)
                        (message.customClockValue = $util.Long.fromValue(object.customClockValue)).unsigned = false;
                    else if (typeof object.customClockValue === "string")
                        message.customClockValue = parseInt(object.customClockValue, 10);
                    else if (typeof object.customClockValue === "number")
                        message.customClockValue = object.customClockValue;
                    else if (typeof object.customClockValue === "object")
                        message.customClockValue = new $util.LongBits(object.customClockValue.low >>> 0, object.customClockValue.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a LWWRegisterDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @static
             * @param {cloudstate.crdt.LWWRegisterDelta} message LWWRegisterDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LWWRegisterDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.value = null;
                    object.clock = options.enums === String ? "DEFAULT" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.customClockValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.customClockValue = options.longs === String ? "0" : 0;
                }
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = $root.google.protobuf.Any.toObject(message.value, options);
                if (message.clock != null && message.hasOwnProperty("clock"))
                    object.clock = options.enums === String ? $root.cloudstate.crdt.CrdtClock[message.clock] : message.clock;
                if (message.customClockValue != null && message.hasOwnProperty("customClockValue"))
                    if (typeof message.customClockValue === "number")
                        object.customClockValue = options.longs === String ? String(message.customClockValue) : message.customClockValue;
                    else
                        object.customClockValue = options.longs === String ? $util.Long.prototype.toString.call(message.customClockValue) : options.longs === Number ? new $util.LongBits(message.customClockValue.low >>> 0, message.customClockValue.high >>> 0).toNumber() : message.customClockValue;
                return object;
            };

            /**
             * Converts this LWWRegisterDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.LWWRegisterDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LWWRegisterDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LWWRegisterDelta;
        })();

        crdt.FlagDelta = (function() {

            /**
             * Properties of a FlagDelta.
             * @memberof cloudstate.crdt
             * @interface IFlagDelta
             * @property {boolean|null} [value] FlagDelta value
             */

            /**
             * Constructs a new FlagDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a FlagDelta.
             * @implements IFlagDelta
             * @constructor
             * @param {cloudstate.crdt.IFlagDelta=} [properties] Properties to set
             */
            function FlagDelta(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FlagDelta value.
             * @member {boolean} value
             * @memberof cloudstate.crdt.FlagDelta
             * @instance
             */
            FlagDelta.prototype.value = false;

            /**
             * Creates a new FlagDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.FlagDelta
             * @static
             * @param {cloudstate.crdt.IFlagDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.FlagDelta} FlagDelta instance
             */
            FlagDelta.create = function create(properties) {
                return new FlagDelta(properties);
            };

            /**
             * Encodes the specified FlagDelta message. Does not implicitly {@link cloudstate.crdt.FlagDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.FlagDelta
             * @static
             * @param {cloudstate.crdt.IFlagDelta} message FlagDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FlagDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                return writer;
            };

            /**
             * Encodes the specified FlagDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.FlagDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.FlagDelta
             * @static
             * @param {cloudstate.crdt.IFlagDelta} message FlagDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FlagDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FlagDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.FlagDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.FlagDelta} FlagDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FlagDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.FlagDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FlagDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.FlagDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.FlagDelta} FlagDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FlagDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FlagDelta message.
             * @function verify
             * @memberof cloudstate.crdt.FlagDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FlagDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value !== "boolean")
                        return "value: boolean expected";
                return null;
            };

            /**
             * Creates a FlagDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.FlagDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.FlagDelta} FlagDelta
             */
            FlagDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.FlagDelta)
                    return object;
                var message = new $root.cloudstate.crdt.FlagDelta();
                if (object.value != null)
                    message.value = Boolean(object.value);
                return message;
            };

            /**
             * Creates a plain object from a FlagDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.FlagDelta
             * @static
             * @param {cloudstate.crdt.FlagDelta} message FlagDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FlagDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.value = false;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            /**
             * Converts this FlagDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.FlagDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FlagDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FlagDelta;
        })();

        crdt.ORMapDelta = (function() {

            /**
             * Properties of a ORMapDelta.
             * @memberof cloudstate.crdt
             * @interface IORMapDelta
             * @property {boolean|null} [cleared] ORMapDelta cleared
             * @property {Array.<google.protobuf.IAny>|null} [removed] ORMapDelta removed
             * @property {Array.<cloudstate.crdt.IORMapEntryDelta>|null} [updated] ORMapDelta updated
             * @property {Array.<cloudstate.crdt.IORMapEntry>|null} [added] ORMapDelta added
             */

            /**
             * Constructs a new ORMapDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a ORMapDelta.
             * @implements IORMapDelta
             * @constructor
             * @param {cloudstate.crdt.IORMapDelta=} [properties] Properties to set
             */
            function ORMapDelta(properties) {
                this.removed = [];
                this.updated = [];
                this.added = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ORMapDelta cleared.
             * @member {boolean} cleared
             * @memberof cloudstate.crdt.ORMapDelta
             * @instance
             */
            ORMapDelta.prototype.cleared = false;

            /**
             * ORMapDelta removed.
             * @member {Array.<google.protobuf.IAny>} removed
             * @memberof cloudstate.crdt.ORMapDelta
             * @instance
             */
            ORMapDelta.prototype.removed = $util.emptyArray;

            /**
             * ORMapDelta updated.
             * @member {Array.<cloudstate.crdt.IORMapEntryDelta>} updated
             * @memberof cloudstate.crdt.ORMapDelta
             * @instance
             */
            ORMapDelta.prototype.updated = $util.emptyArray;

            /**
             * ORMapDelta added.
             * @member {Array.<cloudstate.crdt.IORMapEntry>} added
             * @memberof cloudstate.crdt.ORMapDelta
             * @instance
             */
            ORMapDelta.prototype.added = $util.emptyArray;

            /**
             * Creates a new ORMapDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.ORMapDelta
             * @static
             * @param {cloudstate.crdt.IORMapDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.ORMapDelta} ORMapDelta instance
             */
            ORMapDelta.create = function create(properties) {
                return new ORMapDelta(properties);
            };

            /**
             * Encodes the specified ORMapDelta message. Does not implicitly {@link cloudstate.crdt.ORMapDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.ORMapDelta
             * @static
             * @param {cloudstate.crdt.IORMapDelta} message ORMapDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORMapDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.cleared != null && message.hasOwnProperty("cleared"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.cleared);
                if (message.removed != null && message.removed.length)
                    for (var i = 0; i < message.removed.length; ++i)
                        $root.google.protobuf.Any.encode(message.removed[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.updated != null && message.updated.length)
                    for (var i = 0; i < message.updated.length; ++i)
                        $root.cloudstate.crdt.ORMapEntryDelta.encode(message.updated[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.added != null && message.added.length)
                    for (var i = 0; i < message.added.length; ++i)
                        $root.cloudstate.crdt.ORMapEntry.encode(message.added[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ORMapDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.ORMapDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.ORMapDelta
             * @static
             * @param {cloudstate.crdt.IORMapDelta} message ORMapDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORMapDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ORMapDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.ORMapDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.ORMapDelta} ORMapDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORMapDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.ORMapDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.cleared = reader.bool();
                        break;
                    case 2:
                        if (!(message.removed && message.removed.length))
                            message.removed = [];
                        message.removed.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.updated && message.updated.length))
                            message.updated = [];
                        message.updated.push($root.cloudstate.crdt.ORMapEntryDelta.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.added && message.added.length))
                            message.added = [];
                        message.added.push($root.cloudstate.crdt.ORMapEntry.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ORMapDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.ORMapDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.ORMapDelta} ORMapDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORMapDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ORMapDelta message.
             * @function verify
             * @memberof cloudstate.crdt.ORMapDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ORMapDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.cleared != null && message.hasOwnProperty("cleared"))
                    if (typeof message.cleared !== "boolean")
                        return "cleared: boolean expected";
                if (message.removed != null && message.hasOwnProperty("removed")) {
                    if (!Array.isArray(message.removed))
                        return "removed: array expected";
                    for (var i = 0; i < message.removed.length; ++i) {
                        var error = $root.google.protobuf.Any.verify(message.removed[i]);
                        if (error)
                            return "removed." + error;
                    }
                }
                if (message.updated != null && message.hasOwnProperty("updated")) {
                    if (!Array.isArray(message.updated))
                        return "updated: array expected";
                    for (var i = 0; i < message.updated.length; ++i) {
                        var error = $root.cloudstate.crdt.ORMapEntryDelta.verify(message.updated[i]);
                        if (error)
                            return "updated." + error;
                    }
                }
                if (message.added != null && message.hasOwnProperty("added")) {
                    if (!Array.isArray(message.added))
                        return "added: array expected";
                    for (var i = 0; i < message.added.length; ++i) {
                        var error = $root.cloudstate.crdt.ORMapEntry.verify(message.added[i]);
                        if (error)
                            return "added." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ORMapDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.ORMapDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.ORMapDelta} ORMapDelta
             */
            ORMapDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.ORMapDelta)
                    return object;
                var message = new $root.cloudstate.crdt.ORMapDelta();
                if (object.cleared != null)
                    message.cleared = Boolean(object.cleared);
                if (object.removed) {
                    if (!Array.isArray(object.removed))
                        throw TypeError(".cloudstate.crdt.ORMapDelta.removed: array expected");
                    message.removed = [];
                    for (var i = 0; i < object.removed.length; ++i) {
                        if (typeof object.removed[i] !== "object")
                            throw TypeError(".cloudstate.crdt.ORMapDelta.removed: object expected");
                        message.removed[i] = $root.google.protobuf.Any.fromObject(object.removed[i]);
                    }
                }
                if (object.updated) {
                    if (!Array.isArray(object.updated))
                        throw TypeError(".cloudstate.crdt.ORMapDelta.updated: array expected");
                    message.updated = [];
                    for (var i = 0; i < object.updated.length; ++i) {
                        if (typeof object.updated[i] !== "object")
                            throw TypeError(".cloudstate.crdt.ORMapDelta.updated: object expected");
                        message.updated[i] = $root.cloudstate.crdt.ORMapEntryDelta.fromObject(object.updated[i]);
                    }
                }
                if (object.added) {
                    if (!Array.isArray(object.added))
                        throw TypeError(".cloudstate.crdt.ORMapDelta.added: array expected");
                    message.added = [];
                    for (var i = 0; i < object.added.length; ++i) {
                        if (typeof object.added[i] !== "object")
                            throw TypeError(".cloudstate.crdt.ORMapDelta.added: object expected");
                        message.added[i] = $root.cloudstate.crdt.ORMapEntry.fromObject(object.added[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ORMapDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.ORMapDelta
             * @static
             * @param {cloudstate.crdt.ORMapDelta} message ORMapDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ORMapDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.removed = [];
                    object.updated = [];
                    object.added = [];
                }
                if (options.defaults)
                    object.cleared = false;
                if (message.cleared != null && message.hasOwnProperty("cleared"))
                    object.cleared = message.cleared;
                if (message.removed && message.removed.length) {
                    object.removed = [];
                    for (var j = 0; j < message.removed.length; ++j)
                        object.removed[j] = $root.google.protobuf.Any.toObject(message.removed[j], options);
                }
                if (message.updated && message.updated.length) {
                    object.updated = [];
                    for (var j = 0; j < message.updated.length; ++j)
                        object.updated[j] = $root.cloudstate.crdt.ORMapEntryDelta.toObject(message.updated[j], options);
                }
                if (message.added && message.added.length) {
                    object.added = [];
                    for (var j = 0; j < message.added.length; ++j)
                        object.added[j] = $root.cloudstate.crdt.ORMapEntry.toObject(message.added[j], options);
                }
                return object;
            };

            /**
             * Converts this ORMapDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.ORMapDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ORMapDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ORMapDelta;
        })();

        crdt.ORMapEntryDelta = (function() {

            /**
             * Properties of a ORMapEntryDelta.
             * @memberof cloudstate.crdt
             * @interface IORMapEntryDelta
             * @property {google.protobuf.IAny|null} [key] ORMapEntryDelta key
             * @property {cloudstate.crdt.ICrdtDelta|null} [delta] ORMapEntryDelta delta
             */

            /**
             * Constructs a new ORMapEntryDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a ORMapEntryDelta.
             * @implements IORMapEntryDelta
             * @constructor
             * @param {cloudstate.crdt.IORMapEntryDelta=} [properties] Properties to set
             */
            function ORMapEntryDelta(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ORMapEntryDelta key.
             * @member {google.protobuf.IAny|null|undefined} key
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @instance
             */
            ORMapEntryDelta.prototype.key = null;

            /**
             * ORMapEntryDelta delta.
             * @member {cloudstate.crdt.ICrdtDelta|null|undefined} delta
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @instance
             */
            ORMapEntryDelta.prototype.delta = null;

            /**
             * Creates a new ORMapEntryDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @static
             * @param {cloudstate.crdt.IORMapEntryDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.ORMapEntryDelta} ORMapEntryDelta instance
             */
            ORMapEntryDelta.create = function create(properties) {
                return new ORMapEntryDelta(properties);
            };

            /**
             * Encodes the specified ORMapEntryDelta message. Does not implicitly {@link cloudstate.crdt.ORMapEntryDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @static
             * @param {cloudstate.crdt.IORMapEntryDelta} message ORMapEntryDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORMapEntryDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && message.hasOwnProperty("key"))
                    $root.google.protobuf.Any.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.delta != null && message.hasOwnProperty("delta"))
                    $root.cloudstate.crdt.CrdtDelta.encode(message.delta, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ORMapEntryDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.ORMapEntryDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @static
             * @param {cloudstate.crdt.IORMapEntryDelta} message ORMapEntryDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ORMapEntryDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ORMapEntryDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.ORMapEntryDelta} ORMapEntryDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORMapEntryDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.ORMapEntryDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.delta = $root.cloudstate.crdt.CrdtDelta.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ORMapEntryDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.ORMapEntryDelta} ORMapEntryDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ORMapEntryDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ORMapEntryDelta message.
             * @function verify
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ORMapEntryDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key")) {
                    var error = $root.google.protobuf.Any.verify(message.key);
                    if (error)
                        return "key." + error;
                }
                if (message.delta != null && message.hasOwnProperty("delta")) {
                    var error = $root.cloudstate.crdt.CrdtDelta.verify(message.delta);
                    if (error)
                        return "delta." + error;
                }
                return null;
            };

            /**
             * Creates a ORMapEntryDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.ORMapEntryDelta} ORMapEntryDelta
             */
            ORMapEntryDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.ORMapEntryDelta)
                    return object;
                var message = new $root.cloudstate.crdt.ORMapEntryDelta();
                if (object.key != null) {
                    if (typeof object.key !== "object")
                        throw TypeError(".cloudstate.crdt.ORMapEntryDelta.key: object expected");
                    message.key = $root.google.protobuf.Any.fromObject(object.key);
                }
                if (object.delta != null) {
                    if (typeof object.delta !== "object")
                        throw TypeError(".cloudstate.crdt.ORMapEntryDelta.delta: object expected");
                    message.delta = $root.cloudstate.crdt.CrdtDelta.fromObject(object.delta);
                }
                return message;
            };

            /**
             * Creates a plain object from a ORMapEntryDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @static
             * @param {cloudstate.crdt.ORMapEntryDelta} message ORMapEntryDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ORMapEntryDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.key = null;
                    object.delta = null;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = $root.google.protobuf.Any.toObject(message.key, options);
                if (message.delta != null && message.hasOwnProperty("delta"))
                    object.delta = $root.cloudstate.crdt.CrdtDelta.toObject(message.delta, options);
                return object;
            };

            /**
             * Converts this ORMapEntryDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.ORMapEntryDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ORMapEntryDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ORMapEntryDelta;
        })();

        crdt.VoteDelta = (function() {

            /**
             * Properties of a VoteDelta.
             * @memberof cloudstate.crdt
             * @interface IVoteDelta
             * @property {boolean|null} [selfVote] VoteDelta selfVote
             * @property {number|null} [votesFor] VoteDelta votesFor
             * @property {number|null} [totalVoters] VoteDelta totalVoters
             */

            /**
             * Constructs a new VoteDelta.
             * @memberof cloudstate.crdt
             * @classdesc Represents a VoteDelta.
             * @implements IVoteDelta
             * @constructor
             * @param {cloudstate.crdt.IVoteDelta=} [properties] Properties to set
             */
            function VoteDelta(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * VoteDelta selfVote.
             * @member {boolean} selfVote
             * @memberof cloudstate.crdt.VoteDelta
             * @instance
             */
            VoteDelta.prototype.selfVote = false;

            /**
             * VoteDelta votesFor.
             * @member {number} votesFor
             * @memberof cloudstate.crdt.VoteDelta
             * @instance
             */
            VoteDelta.prototype.votesFor = 0;

            /**
             * VoteDelta totalVoters.
             * @member {number} totalVoters
             * @memberof cloudstate.crdt.VoteDelta
             * @instance
             */
            VoteDelta.prototype.totalVoters = 0;

            /**
             * Creates a new VoteDelta instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.VoteDelta
             * @static
             * @param {cloudstate.crdt.IVoteDelta=} [properties] Properties to set
             * @returns {cloudstate.crdt.VoteDelta} VoteDelta instance
             */
            VoteDelta.create = function create(properties) {
                return new VoteDelta(properties);
            };

            /**
             * Encodes the specified VoteDelta message. Does not implicitly {@link cloudstate.crdt.VoteDelta.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.VoteDelta
             * @static
             * @param {cloudstate.crdt.IVoteDelta} message VoteDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteDelta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selfVote != null && message.hasOwnProperty("selfVote"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.selfVote);
                if (message.votesFor != null && message.hasOwnProperty("votesFor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.votesFor);
                if (message.totalVoters != null && message.hasOwnProperty("totalVoters"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.totalVoters);
                return writer;
            };

            /**
             * Encodes the specified VoteDelta message, length delimited. Does not implicitly {@link cloudstate.crdt.VoteDelta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.VoteDelta
             * @static
             * @param {cloudstate.crdt.IVoteDelta} message VoteDelta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            VoteDelta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a VoteDelta message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.VoteDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.VoteDelta} VoteDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteDelta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.VoteDelta();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.selfVote = reader.bool();
                        break;
                    case 2:
                        message.votesFor = reader.int32();
                        break;
                    case 3:
                        message.totalVoters = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a VoteDelta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.VoteDelta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.VoteDelta} VoteDelta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            VoteDelta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a VoteDelta message.
             * @function verify
             * @memberof cloudstate.crdt.VoteDelta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            VoteDelta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.selfVote != null && message.hasOwnProperty("selfVote"))
                    if (typeof message.selfVote !== "boolean")
                        return "selfVote: boolean expected";
                if (message.votesFor != null && message.hasOwnProperty("votesFor"))
                    if (!$util.isInteger(message.votesFor))
                        return "votesFor: integer expected";
                if (message.totalVoters != null && message.hasOwnProperty("totalVoters"))
                    if (!$util.isInteger(message.totalVoters))
                        return "totalVoters: integer expected";
                return null;
            };

            /**
             * Creates a VoteDelta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.VoteDelta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.VoteDelta} VoteDelta
             */
            VoteDelta.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.VoteDelta)
                    return object;
                var message = new $root.cloudstate.crdt.VoteDelta();
                if (object.selfVote != null)
                    message.selfVote = Boolean(object.selfVote);
                if (object.votesFor != null)
                    message.votesFor = object.votesFor | 0;
                if (object.totalVoters != null)
                    message.totalVoters = object.totalVoters | 0;
                return message;
            };

            /**
             * Creates a plain object from a VoteDelta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.VoteDelta
             * @static
             * @param {cloudstate.crdt.VoteDelta} message VoteDelta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            VoteDelta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.selfVote = false;
                    object.votesFor = 0;
                    object.totalVoters = 0;
                }
                if (message.selfVote != null && message.hasOwnProperty("selfVote"))
                    object.selfVote = message.selfVote;
                if (message.votesFor != null && message.hasOwnProperty("votesFor"))
                    object.votesFor = message.votesFor;
                if (message.totalVoters != null && message.hasOwnProperty("totalVoters"))
                    object.totalVoters = message.totalVoters;
                return object;
            };

            /**
             * Converts this VoteDelta to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.VoteDelta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            VoteDelta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return VoteDelta;
        })();

        crdt.CrdtInit = (function() {

            /**
             * Properties of a CrdtInit.
             * @memberof cloudstate.crdt
             * @interface ICrdtInit
             * @property {string|null} [serviceName] CrdtInit serviceName
             * @property {string|null} [entityId] CrdtInit entityId
             * @property {cloudstate.crdt.ICrdtState|null} [state] CrdtInit state
             */

            /**
             * Constructs a new CrdtInit.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtInit.
             * @implements ICrdtInit
             * @constructor
             * @param {cloudstate.crdt.ICrdtInit=} [properties] Properties to set
             */
            function CrdtInit(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CrdtInit serviceName.
             * @member {string} serviceName
             * @memberof cloudstate.crdt.CrdtInit
             * @instance
             */
            CrdtInit.prototype.serviceName = "";

            /**
             * CrdtInit entityId.
             * @member {string} entityId
             * @memberof cloudstate.crdt.CrdtInit
             * @instance
             */
            CrdtInit.prototype.entityId = "";

            /**
             * CrdtInit state.
             * @member {cloudstate.crdt.ICrdtState|null|undefined} state
             * @memberof cloudstate.crdt.CrdtInit
             * @instance
             */
            CrdtInit.prototype.state = null;

            /**
             * Creates a new CrdtInit instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtInit
             * @static
             * @param {cloudstate.crdt.ICrdtInit=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtInit} CrdtInit instance
             */
            CrdtInit.create = function create(properties) {
                return new CrdtInit(properties);
            };

            /**
             * Encodes the specified CrdtInit message. Does not implicitly {@link cloudstate.crdt.CrdtInit.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtInit
             * @static
             * @param {cloudstate.crdt.ICrdtInit} message CrdtInit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtInit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                if (message.entityId != null && message.hasOwnProperty("entityId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.entityId);
                if (message.state != null && message.hasOwnProperty("state"))
                    $root.cloudstate.crdt.CrdtState.encode(message.state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CrdtInit message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtInit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtInit
             * @static
             * @param {cloudstate.crdt.ICrdtInit} message CrdtInit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtInit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtInit message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtInit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtInit} CrdtInit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtInit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtInit();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.serviceName = reader.string();
                        break;
                    case 2:
                        message.entityId = reader.string();
                        break;
                    case 3:
                        message.state = $root.cloudstate.crdt.CrdtState.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtInit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtInit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtInit} CrdtInit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtInit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtInit message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtInit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtInit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    if (!$util.isString(message.serviceName))
                        return "serviceName: string expected";
                if (message.entityId != null && message.hasOwnProperty("entityId"))
                    if (!$util.isString(message.entityId))
                        return "entityId: string expected";
                if (message.state != null && message.hasOwnProperty("state")) {
                    var error = $root.cloudstate.crdt.CrdtState.verify(message.state);
                    if (error)
                        return "state." + error;
                }
                return null;
            };

            /**
             * Creates a CrdtInit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtInit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtInit} CrdtInit
             */
            CrdtInit.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtInit)
                    return object;
                var message = new $root.cloudstate.crdt.CrdtInit();
                if (object.serviceName != null)
                    message.serviceName = String(object.serviceName);
                if (object.entityId != null)
                    message.entityId = String(object.entityId);
                if (object.state != null) {
                    if (typeof object.state !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtInit.state: object expected");
                    message.state = $root.cloudstate.crdt.CrdtState.fromObject(object.state);
                }
                return message;
            };

            /**
             * Creates a plain object from a CrdtInit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtInit
             * @static
             * @param {cloudstate.crdt.CrdtInit} message CrdtInit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtInit.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.serviceName = "";
                    object.entityId = "";
                    object.state = null;
                }
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    object.serviceName = message.serviceName;
                if (message.entityId != null && message.hasOwnProperty("entityId"))
                    object.entityId = message.entityId;
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = $root.cloudstate.crdt.CrdtState.toObject(message.state, options);
                return object;
            };

            /**
             * Converts this CrdtInit to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtInit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtInit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtInit;
        })();

        crdt.CrdtDelete = (function() {

            /**
             * Properties of a CrdtDelete.
             * @memberof cloudstate.crdt
             * @interface ICrdtDelete
             */

            /**
             * Constructs a new CrdtDelete.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtDelete.
             * @implements ICrdtDelete
             * @constructor
             * @param {cloudstate.crdt.ICrdtDelete=} [properties] Properties to set
             */
            function CrdtDelete(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new CrdtDelete instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtDelete
             * @static
             * @param {cloudstate.crdt.ICrdtDelete=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtDelete} CrdtDelete instance
             */
            CrdtDelete.create = function create(properties) {
                return new CrdtDelete(properties);
            };

            /**
             * Encodes the specified CrdtDelete message. Does not implicitly {@link cloudstate.crdt.CrdtDelete.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtDelete
             * @static
             * @param {cloudstate.crdt.ICrdtDelete} message CrdtDelete message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtDelete.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified CrdtDelete message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtDelete.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtDelete
             * @static
             * @param {cloudstate.crdt.ICrdtDelete} message CrdtDelete message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtDelete.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtDelete message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtDelete
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtDelete} CrdtDelete
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtDelete.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtDelete();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtDelete message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtDelete
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtDelete} CrdtDelete
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtDelete.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtDelete message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtDelete
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtDelete.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates a CrdtDelete message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtDelete
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtDelete} CrdtDelete
             */
            CrdtDelete.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtDelete)
                    return object;
                return new $root.cloudstate.crdt.CrdtDelete();
            };

            /**
             * Creates a plain object from a CrdtDelete message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtDelete
             * @static
             * @param {cloudstate.crdt.CrdtDelete} message CrdtDelete
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtDelete.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this CrdtDelete to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtDelete
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtDelete.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtDelete;
        })();

        crdt.CrdtReply = (function() {

            /**
             * Properties of a CrdtReply.
             * @memberof cloudstate.crdt
             * @interface ICrdtReply
             * @property {number|Long|null} [commandId] CrdtReply commandId
             * @property {cloudstate.IClientAction|null} [clientAction] CrdtReply clientAction
             * @property {Array.<cloudstate.ISideEffect>|null} [sideEffects] CrdtReply sideEffects
             * @property {cloudstate.crdt.ICrdtStateAction|null} [stateAction] CrdtReply stateAction
             * @property {boolean|null} [streamed] CrdtReply streamed
             */

            /**
             * Constructs a new CrdtReply.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtReply.
             * @implements ICrdtReply
             * @constructor
             * @param {cloudstate.crdt.ICrdtReply=} [properties] Properties to set
             */
            function CrdtReply(properties) {
                this.sideEffects = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CrdtReply commandId.
             * @member {number|Long} commandId
             * @memberof cloudstate.crdt.CrdtReply
             * @instance
             */
            CrdtReply.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CrdtReply clientAction.
             * @member {cloudstate.IClientAction|null|undefined} clientAction
             * @memberof cloudstate.crdt.CrdtReply
             * @instance
             */
            CrdtReply.prototype.clientAction = null;

            /**
             * CrdtReply sideEffects.
             * @member {Array.<cloudstate.ISideEffect>} sideEffects
             * @memberof cloudstate.crdt.CrdtReply
             * @instance
             */
            CrdtReply.prototype.sideEffects = $util.emptyArray;

            /**
             * CrdtReply stateAction.
             * @member {cloudstate.crdt.ICrdtStateAction|null|undefined} stateAction
             * @memberof cloudstate.crdt.CrdtReply
             * @instance
             */
            CrdtReply.prototype.stateAction = null;

            /**
             * CrdtReply streamed.
             * @member {boolean} streamed
             * @memberof cloudstate.crdt.CrdtReply
             * @instance
             */
            CrdtReply.prototype.streamed = false;

            /**
             * Creates a new CrdtReply instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtReply
             * @static
             * @param {cloudstate.crdt.ICrdtReply=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtReply} CrdtReply instance
             */
            CrdtReply.create = function create(properties) {
                return new CrdtReply(properties);
            };

            /**
             * Encodes the specified CrdtReply message. Does not implicitly {@link cloudstate.crdt.CrdtReply.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtReply
             * @static
             * @param {cloudstate.crdt.ICrdtReply} message CrdtReply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtReply.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                    $root.cloudstate.ClientAction.encode(message.clientAction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.sideEffects != null && message.sideEffects.length)
                    for (var i = 0; i < message.sideEffects.length; ++i)
                        $root.cloudstate.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.stateAction != null && message.hasOwnProperty("stateAction"))
                    $root.cloudstate.crdt.CrdtStateAction.encode(message.stateAction, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.streamed != null && message.hasOwnProperty("streamed"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.streamed);
                return writer;
            };

            /**
             * Encodes the specified CrdtReply message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtReply.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtReply
             * @static
             * @param {cloudstate.crdt.ICrdtReply} message CrdtReply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtReply.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtReply message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtReply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtReply} CrdtReply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtReply.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtReply();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.commandId = reader.int64();
                        break;
                    case 2:
                        message.clientAction = $root.cloudstate.ClientAction.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.sideEffects && message.sideEffects.length))
                            message.sideEffects = [];
                        message.sideEffects.push($root.cloudstate.SideEffect.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.stateAction = $root.cloudstate.crdt.CrdtStateAction.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.streamed = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtReply message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtReply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtReply} CrdtReply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtReply.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtReply message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtReply
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtReply.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                        return "commandId: integer|Long expected";
                if (message.clientAction != null && message.hasOwnProperty("clientAction")) {
                    var error = $root.cloudstate.ClientAction.verify(message.clientAction);
                    if (error)
                        return "clientAction." + error;
                }
                if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                    if (!Array.isArray(message.sideEffects))
                        return "sideEffects: array expected";
                    for (var i = 0; i < message.sideEffects.length; ++i) {
                        var error = $root.cloudstate.SideEffect.verify(message.sideEffects[i]);
                        if (error)
                            return "sideEffects." + error;
                    }
                }
                if (message.stateAction != null && message.hasOwnProperty("stateAction")) {
                    var error = $root.cloudstate.crdt.CrdtStateAction.verify(message.stateAction);
                    if (error)
                        return "stateAction." + error;
                }
                if (message.streamed != null && message.hasOwnProperty("streamed"))
                    if (typeof message.streamed !== "boolean")
                        return "streamed: boolean expected";
                return null;
            };

            /**
             * Creates a CrdtReply message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtReply
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtReply} CrdtReply
             */
            CrdtReply.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtReply)
                    return object;
                var message = new $root.cloudstate.crdt.CrdtReply();
                if (object.commandId != null)
                    if ($util.Long)
                        (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                    else if (typeof object.commandId === "string")
                        message.commandId = parseInt(object.commandId, 10);
                    else if (typeof object.commandId === "number")
                        message.commandId = object.commandId;
                    else if (typeof object.commandId === "object")
                        message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                if (object.clientAction != null) {
                    if (typeof object.clientAction !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtReply.clientAction: object expected");
                    message.clientAction = $root.cloudstate.ClientAction.fromObject(object.clientAction);
                }
                if (object.sideEffects) {
                    if (!Array.isArray(object.sideEffects))
                        throw TypeError(".cloudstate.crdt.CrdtReply.sideEffects: array expected");
                    message.sideEffects = [];
                    for (var i = 0; i < object.sideEffects.length; ++i) {
                        if (typeof object.sideEffects[i] !== "object")
                            throw TypeError(".cloudstate.crdt.CrdtReply.sideEffects: object expected");
                        message.sideEffects[i] = $root.cloudstate.SideEffect.fromObject(object.sideEffects[i]);
                    }
                }
                if (object.stateAction != null) {
                    if (typeof object.stateAction !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtReply.stateAction: object expected");
                    message.stateAction = $root.cloudstate.crdt.CrdtStateAction.fromObject(object.stateAction);
                }
                if (object.streamed != null)
                    message.streamed = Boolean(object.streamed);
                return message;
            };

            /**
             * Creates a plain object from a CrdtReply message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtReply
             * @static
             * @param {cloudstate.crdt.CrdtReply} message CrdtReply
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtReply.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.sideEffects = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.commandId = options.longs === String ? "0" : 0;
                    object.clientAction = null;
                    object.stateAction = null;
                    object.streamed = false;
                }
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (typeof message.commandId === "number")
                        object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                    else
                        object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                    object.clientAction = $root.cloudstate.ClientAction.toObject(message.clientAction, options);
                if (message.sideEffects && message.sideEffects.length) {
                    object.sideEffects = [];
                    for (var j = 0; j < message.sideEffects.length; ++j)
                        object.sideEffects[j] = $root.cloudstate.SideEffect.toObject(message.sideEffects[j], options);
                }
                if (message.stateAction != null && message.hasOwnProperty("stateAction"))
                    object.stateAction = $root.cloudstate.crdt.CrdtStateAction.toObject(message.stateAction, options);
                if (message.streamed != null && message.hasOwnProperty("streamed"))
                    object.streamed = message.streamed;
                return object;
            };

            /**
             * Converts this CrdtReply to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtReply
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtReply.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtReply;
        })();

        crdt.CrdtStateAction = (function() {

            /**
             * Properties of a CrdtStateAction.
             * @memberof cloudstate.crdt
             * @interface ICrdtStateAction
             * @property {cloudstate.crdt.ICrdtState|null} [create] CrdtStateAction create
             * @property {cloudstate.crdt.ICrdtDelta|null} [update] CrdtStateAction update
             * @property {cloudstate.crdt.ICrdtDelete|null} ["delete"] CrdtStateAction delete
             * @property {cloudstate.crdt.CrdtWriteConsistency|null} [writeConsistency] CrdtStateAction writeConsistency
             */

            /**
             * Constructs a new CrdtStateAction.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtStateAction.
             * @implements ICrdtStateAction
             * @constructor
             * @param {cloudstate.crdt.ICrdtStateAction=} [properties] Properties to set
             */
            function CrdtStateAction(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CrdtStateAction create.
             * @member {cloudstate.crdt.ICrdtState|null|undefined} create
             * @memberof cloudstate.crdt.CrdtStateAction
             * @instance
             */
            CrdtStateAction.prototype.create = null;

            /**
             * CrdtStateAction update.
             * @member {cloudstate.crdt.ICrdtDelta|null|undefined} update
             * @memberof cloudstate.crdt.CrdtStateAction
             * @instance
             */
            CrdtStateAction.prototype.update = null;

            /**
             * CrdtStateAction delete.
             * @member {cloudstate.crdt.ICrdtDelete|null|undefined} delete
             * @memberof cloudstate.crdt.CrdtStateAction
             * @instance
             */
            CrdtStateAction.prototype["delete"] = null;

            /**
             * CrdtStateAction writeConsistency.
             * @member {cloudstate.crdt.CrdtWriteConsistency} writeConsistency
             * @memberof cloudstate.crdt.CrdtStateAction
             * @instance
             */
            CrdtStateAction.prototype.writeConsistency = 0;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * CrdtStateAction action.
             * @member {"create"|"update"|"delete"|undefined} action
             * @memberof cloudstate.crdt.CrdtStateAction
             * @instance
             */
            Object.defineProperty(CrdtStateAction.prototype, "action", {
                get: $util.oneOfGetter($oneOfFields = ["create", "update", "delete"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new CrdtStateAction instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtStateAction
             * @static
             * @param {cloudstate.crdt.ICrdtStateAction=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtStateAction} CrdtStateAction instance
             */
            CrdtStateAction.create = function create(properties) {
                return new CrdtStateAction(properties);
            };

            /**
             * Encodes the specified CrdtStateAction message. Does not implicitly {@link cloudstate.crdt.CrdtStateAction.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtStateAction
             * @static
             * @param {cloudstate.crdt.ICrdtStateAction} message CrdtStateAction message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStateAction.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.create != null && message.hasOwnProperty("create"))
                    $root.cloudstate.crdt.CrdtState.encode(message.create, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.update != null && message.hasOwnProperty("update"))
                    $root.cloudstate.crdt.CrdtDelta.encode(message.update, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message["delete"] != null && message.hasOwnProperty("delete"))
                    $root.cloudstate.crdt.CrdtDelete.encode(message["delete"], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.writeConsistency != null && message.hasOwnProperty("writeConsistency"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.writeConsistency);
                return writer;
            };

            /**
             * Encodes the specified CrdtStateAction message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtStateAction.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtStateAction
             * @static
             * @param {cloudstate.crdt.ICrdtStateAction} message CrdtStateAction message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStateAction.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtStateAction message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtStateAction
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtStateAction} CrdtStateAction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStateAction.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtStateAction();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 5:
                        message.create = $root.cloudstate.crdt.CrdtState.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.update = $root.cloudstate.crdt.CrdtDelta.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message["delete"] = $root.cloudstate.crdt.CrdtDelete.decode(reader, reader.uint32());
                        break;
                    case 8:
                        message.writeConsistency = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtStateAction message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtStateAction
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtStateAction} CrdtStateAction
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStateAction.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtStateAction message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtStateAction
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtStateAction.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.create != null && message.hasOwnProperty("create")) {
                    properties.action = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtState.verify(message.create);
                        if (error)
                            return "create." + error;
                    }
                }
                if (message.update != null && message.hasOwnProperty("update")) {
                    if (properties.action === 1)
                        return "action: multiple values";
                    properties.action = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtDelta.verify(message.update);
                        if (error)
                            return "update." + error;
                    }
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.action === 1)
                        return "action: multiple values";
                    properties.action = 1;
                    {
                        var error = $root.cloudstate.crdt.CrdtDelete.verify(message["delete"]);
                        if (error)
                            return "delete." + error;
                    }
                }
                if (message.writeConsistency != null && message.hasOwnProperty("writeConsistency"))
                    switch (message.writeConsistency) {
                    default:
                        return "writeConsistency: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };

            /**
             * Creates a CrdtStateAction message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtStateAction
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtStateAction} CrdtStateAction
             */
            CrdtStateAction.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtStateAction)
                    return object;
                var message = new $root.cloudstate.crdt.CrdtStateAction();
                if (object.create != null) {
                    if (typeof object.create !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStateAction.create: object expected");
                    message.create = $root.cloudstate.crdt.CrdtState.fromObject(object.create);
                }
                if (object.update != null) {
                    if (typeof object.update !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStateAction.update: object expected");
                    message.update = $root.cloudstate.crdt.CrdtDelta.fromObject(object.update);
                }
                if (object["delete"] != null) {
                    if (typeof object["delete"] !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStateAction.delete: object expected");
                    message["delete"] = $root.cloudstate.crdt.CrdtDelete.fromObject(object["delete"]);
                }
                switch (object.writeConsistency) {
                case "LOCAL":
                case 0:
                    message.writeConsistency = 0;
                    break;
                case "MAJORITY":
                case 1:
                    message.writeConsistency = 1;
                    break;
                case "ALL":
                case 2:
                    message.writeConsistency = 2;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a CrdtStateAction message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtStateAction
             * @static
             * @param {cloudstate.crdt.CrdtStateAction} message CrdtStateAction
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtStateAction.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.writeConsistency = options.enums === String ? "LOCAL" : 0;
                if (message.create != null && message.hasOwnProperty("create")) {
                    object.create = $root.cloudstate.crdt.CrdtState.toObject(message.create, options);
                    if (options.oneofs)
                        object.action = "create";
                }
                if (message.update != null && message.hasOwnProperty("update")) {
                    object.update = $root.cloudstate.crdt.CrdtDelta.toObject(message.update, options);
                    if (options.oneofs)
                        object.action = "update";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = $root.cloudstate.crdt.CrdtDelete.toObject(message["delete"], options);
                    if (options.oneofs)
                        object.action = "delete";
                }
                if (message.writeConsistency != null && message.hasOwnProperty("writeConsistency"))
                    object.writeConsistency = options.enums === String ? $root.cloudstate.crdt.CrdtWriteConsistency[message.writeConsistency] : message.writeConsistency;
                return object;
            };

            /**
             * Converts this CrdtStateAction to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtStateAction
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtStateAction.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtStateAction;
        })();

        crdt.CrdtStreamedMessage = (function() {

            /**
             * Properties of a CrdtStreamedMessage.
             * @memberof cloudstate.crdt
             * @interface ICrdtStreamedMessage
             * @property {number|Long|null} [commandId] CrdtStreamedMessage commandId
             * @property {cloudstate.IClientAction|null} [clientAction] CrdtStreamedMessage clientAction
             * @property {Array.<cloudstate.ISideEffect>|null} [sideEffects] CrdtStreamedMessage sideEffects
             * @property {boolean|null} [endStream] CrdtStreamedMessage endStream
             */

            /**
             * Constructs a new CrdtStreamedMessage.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtStreamedMessage.
             * @implements ICrdtStreamedMessage
             * @constructor
             * @param {cloudstate.crdt.ICrdtStreamedMessage=} [properties] Properties to set
             */
            function CrdtStreamedMessage(properties) {
                this.sideEffects = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CrdtStreamedMessage commandId.
             * @member {number|Long} commandId
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @instance
             */
            CrdtStreamedMessage.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CrdtStreamedMessage clientAction.
             * @member {cloudstate.IClientAction|null|undefined} clientAction
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @instance
             */
            CrdtStreamedMessage.prototype.clientAction = null;

            /**
             * CrdtStreamedMessage sideEffects.
             * @member {Array.<cloudstate.ISideEffect>} sideEffects
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @instance
             */
            CrdtStreamedMessage.prototype.sideEffects = $util.emptyArray;

            /**
             * CrdtStreamedMessage endStream.
             * @member {boolean} endStream
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @instance
             */
            CrdtStreamedMessage.prototype.endStream = false;

            /**
             * Creates a new CrdtStreamedMessage instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @static
             * @param {cloudstate.crdt.ICrdtStreamedMessage=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtStreamedMessage} CrdtStreamedMessage instance
             */
            CrdtStreamedMessage.create = function create(properties) {
                return new CrdtStreamedMessage(properties);
            };

            /**
             * Encodes the specified CrdtStreamedMessage message. Does not implicitly {@link cloudstate.crdt.CrdtStreamedMessage.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @static
             * @param {cloudstate.crdt.ICrdtStreamedMessage} message CrdtStreamedMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStreamedMessage.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                    $root.cloudstate.ClientAction.encode(message.clientAction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.sideEffects != null && message.sideEffects.length)
                    for (var i = 0; i < message.sideEffects.length; ++i)
                        $root.cloudstate.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.endStream != null && message.hasOwnProperty("endStream"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.endStream);
                return writer;
            };

            /**
             * Encodes the specified CrdtStreamedMessage message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtStreamedMessage.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @static
             * @param {cloudstate.crdt.ICrdtStreamedMessage} message CrdtStreamedMessage message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStreamedMessage.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtStreamedMessage message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtStreamedMessage} CrdtStreamedMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStreamedMessage.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtStreamedMessage();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.commandId = reader.int64();
                        break;
                    case 2:
                        message.clientAction = $root.cloudstate.ClientAction.decode(reader, reader.uint32());
                        break;
                    case 3:
                        if (!(message.sideEffects && message.sideEffects.length))
                            message.sideEffects = [];
                        message.sideEffects.push($root.cloudstate.SideEffect.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        message.endStream = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtStreamedMessage message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtStreamedMessage} CrdtStreamedMessage
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStreamedMessage.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtStreamedMessage message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtStreamedMessage.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                        return "commandId: integer|Long expected";
                if (message.clientAction != null && message.hasOwnProperty("clientAction")) {
                    var error = $root.cloudstate.ClientAction.verify(message.clientAction);
                    if (error)
                        return "clientAction." + error;
                }
                if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                    if (!Array.isArray(message.sideEffects))
                        return "sideEffects: array expected";
                    for (var i = 0; i < message.sideEffects.length; ++i) {
                        var error = $root.cloudstate.SideEffect.verify(message.sideEffects[i]);
                        if (error)
                            return "sideEffects." + error;
                    }
                }
                if (message.endStream != null && message.hasOwnProperty("endStream"))
                    if (typeof message.endStream !== "boolean")
                        return "endStream: boolean expected";
                return null;
            };

            /**
             * Creates a CrdtStreamedMessage message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtStreamedMessage} CrdtStreamedMessage
             */
            CrdtStreamedMessage.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtStreamedMessage)
                    return object;
                var message = new $root.cloudstate.crdt.CrdtStreamedMessage();
                if (object.commandId != null)
                    if ($util.Long)
                        (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                    else if (typeof object.commandId === "string")
                        message.commandId = parseInt(object.commandId, 10);
                    else if (typeof object.commandId === "number")
                        message.commandId = object.commandId;
                    else if (typeof object.commandId === "object")
                        message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                if (object.clientAction != null) {
                    if (typeof object.clientAction !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamedMessage.clientAction: object expected");
                    message.clientAction = $root.cloudstate.ClientAction.fromObject(object.clientAction);
                }
                if (object.sideEffects) {
                    if (!Array.isArray(object.sideEffects))
                        throw TypeError(".cloudstate.crdt.CrdtStreamedMessage.sideEffects: array expected");
                    message.sideEffects = [];
                    for (var i = 0; i < object.sideEffects.length; ++i) {
                        if (typeof object.sideEffects[i] !== "object")
                            throw TypeError(".cloudstate.crdt.CrdtStreamedMessage.sideEffects: object expected");
                        message.sideEffects[i] = $root.cloudstate.SideEffect.fromObject(object.sideEffects[i]);
                    }
                }
                if (object.endStream != null)
                    message.endStream = Boolean(object.endStream);
                return message;
            };

            /**
             * Creates a plain object from a CrdtStreamedMessage message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @static
             * @param {cloudstate.crdt.CrdtStreamedMessage} message CrdtStreamedMessage
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtStreamedMessage.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.sideEffects = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.commandId = options.longs === String ? "0" : 0;
                    object.clientAction = null;
                    object.endStream = false;
                }
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (typeof message.commandId === "number")
                        object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                    else
                        object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                    object.clientAction = $root.cloudstate.ClientAction.toObject(message.clientAction, options);
                if (message.sideEffects && message.sideEffects.length) {
                    object.sideEffects = [];
                    for (var j = 0; j < message.sideEffects.length; ++j)
                        object.sideEffects[j] = $root.cloudstate.SideEffect.toObject(message.sideEffects[j], options);
                }
                if (message.endStream != null && message.hasOwnProperty("endStream"))
                    object.endStream = message.endStream;
                return object;
            };

            /**
             * Converts this CrdtStreamedMessage to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtStreamedMessage
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtStreamedMessage.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtStreamedMessage;
        })();

        crdt.CrdtStreamCancelledResponse = (function() {

            /**
             * Properties of a CrdtStreamCancelledResponse.
             * @memberof cloudstate.crdt
             * @interface ICrdtStreamCancelledResponse
             * @property {number|Long|null} [commandId] CrdtStreamCancelledResponse commandId
             * @property {Array.<cloudstate.ISideEffect>|null} [sideEffects] CrdtStreamCancelledResponse sideEffects
             * @property {cloudstate.crdt.ICrdtStateAction|null} [stateAction] CrdtStreamCancelledResponse stateAction
             */

            /**
             * Constructs a new CrdtStreamCancelledResponse.
             * @memberof cloudstate.crdt
             * @classdesc Represents a CrdtStreamCancelledResponse.
             * @implements ICrdtStreamCancelledResponse
             * @constructor
             * @param {cloudstate.crdt.ICrdtStreamCancelledResponse=} [properties] Properties to set
             */
            function CrdtStreamCancelledResponse(properties) {
                this.sideEffects = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CrdtStreamCancelledResponse commandId.
             * @member {number|Long} commandId
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @instance
             */
            CrdtStreamCancelledResponse.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * CrdtStreamCancelledResponse sideEffects.
             * @member {Array.<cloudstate.ISideEffect>} sideEffects
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @instance
             */
            CrdtStreamCancelledResponse.prototype.sideEffects = $util.emptyArray;

            /**
             * CrdtStreamCancelledResponse stateAction.
             * @member {cloudstate.crdt.ICrdtStateAction|null|undefined} stateAction
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @instance
             */
            CrdtStreamCancelledResponse.prototype.stateAction = null;

            /**
             * Creates a new CrdtStreamCancelledResponse instance using the specified properties.
             * @function create
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @static
             * @param {cloudstate.crdt.ICrdtStreamCancelledResponse=} [properties] Properties to set
             * @returns {cloudstate.crdt.CrdtStreamCancelledResponse} CrdtStreamCancelledResponse instance
             */
            CrdtStreamCancelledResponse.create = function create(properties) {
                return new CrdtStreamCancelledResponse(properties);
            };

            /**
             * Encodes the specified CrdtStreamCancelledResponse message. Does not implicitly {@link cloudstate.crdt.CrdtStreamCancelledResponse.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @static
             * @param {cloudstate.crdt.ICrdtStreamCancelledResponse} message CrdtStreamCancelledResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStreamCancelledResponse.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                if (message.sideEffects != null && message.sideEffects.length)
                    for (var i = 0; i < message.sideEffects.length; ++i)
                        $root.cloudstate.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.stateAction != null && message.hasOwnProperty("stateAction"))
                    $root.cloudstate.crdt.CrdtStateAction.encode(message.stateAction, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified CrdtStreamCancelledResponse message, length delimited. Does not implicitly {@link cloudstate.crdt.CrdtStreamCancelledResponse.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @static
             * @param {cloudstate.crdt.ICrdtStreamCancelledResponse} message CrdtStreamCancelledResponse message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CrdtStreamCancelledResponse.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CrdtStreamCancelledResponse message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.crdt.CrdtStreamCancelledResponse} CrdtStreamCancelledResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStreamCancelledResponse.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.crdt.CrdtStreamCancelledResponse();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.commandId = reader.int64();
                        break;
                    case 2:
                        if (!(message.sideEffects && message.sideEffects.length))
                            message.sideEffects = [];
                        message.sideEffects.push($root.cloudstate.SideEffect.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.stateAction = $root.cloudstate.crdt.CrdtStateAction.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CrdtStreamCancelledResponse message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.crdt.CrdtStreamCancelledResponse} CrdtStreamCancelledResponse
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CrdtStreamCancelledResponse.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CrdtStreamCancelledResponse message.
             * @function verify
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CrdtStreamCancelledResponse.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                        return "commandId: integer|Long expected";
                if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                    if (!Array.isArray(message.sideEffects))
                        return "sideEffects: array expected";
                    for (var i = 0; i < message.sideEffects.length; ++i) {
                        var error = $root.cloudstate.SideEffect.verify(message.sideEffects[i]);
                        if (error)
                            return "sideEffects." + error;
                    }
                }
                if (message.stateAction != null && message.hasOwnProperty("stateAction")) {
                    var error = $root.cloudstate.crdt.CrdtStateAction.verify(message.stateAction);
                    if (error)
                        return "stateAction." + error;
                }
                return null;
            };

            /**
             * Creates a CrdtStreamCancelledResponse message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.crdt.CrdtStreamCancelledResponse} CrdtStreamCancelledResponse
             */
            CrdtStreamCancelledResponse.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.crdt.CrdtStreamCancelledResponse)
                    return object;
                var message = new $root.cloudstate.crdt.CrdtStreamCancelledResponse();
                if (object.commandId != null)
                    if ($util.Long)
                        (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                    else if (typeof object.commandId === "string")
                        message.commandId = parseInt(object.commandId, 10);
                    else if (typeof object.commandId === "number")
                        message.commandId = object.commandId;
                    else if (typeof object.commandId === "object")
                        message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                if (object.sideEffects) {
                    if (!Array.isArray(object.sideEffects))
                        throw TypeError(".cloudstate.crdt.CrdtStreamCancelledResponse.sideEffects: array expected");
                    message.sideEffects = [];
                    for (var i = 0; i < object.sideEffects.length; ++i) {
                        if (typeof object.sideEffects[i] !== "object")
                            throw TypeError(".cloudstate.crdt.CrdtStreamCancelledResponse.sideEffects: object expected");
                        message.sideEffects[i] = $root.cloudstate.SideEffect.fromObject(object.sideEffects[i]);
                    }
                }
                if (object.stateAction != null) {
                    if (typeof object.stateAction !== "object")
                        throw TypeError(".cloudstate.crdt.CrdtStreamCancelledResponse.stateAction: object expected");
                    message.stateAction = $root.cloudstate.crdt.CrdtStateAction.fromObject(object.stateAction);
                }
                return message;
            };

            /**
             * Creates a plain object from a CrdtStreamCancelledResponse message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @static
             * @param {cloudstate.crdt.CrdtStreamCancelledResponse} message CrdtStreamCancelledResponse
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CrdtStreamCancelledResponse.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.sideEffects = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.commandId = options.longs === String ? "0" : 0;
                    object.stateAction = null;
                }
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (typeof message.commandId === "number")
                        object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                    else
                        object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                if (message.sideEffects && message.sideEffects.length) {
                    object.sideEffects = [];
                    for (var j = 0; j < message.sideEffects.length; ++j)
                        object.sideEffects[j] = $root.cloudstate.SideEffect.toObject(message.sideEffects[j], options);
                }
                if (message.stateAction != null && message.hasOwnProperty("stateAction"))
                    object.stateAction = $root.cloudstate.crdt.CrdtStateAction.toObject(message.stateAction, options);
                return object;
            };

            /**
             * Converts this CrdtStreamCancelledResponse to JSON.
             * @function toJSON
             * @memberof cloudstate.crdt.CrdtStreamCancelledResponse
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CrdtStreamCancelledResponse.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CrdtStreamCancelledResponse;
        })();

        /**
         * CrdtWriteConsistency enum.
         * @name cloudstate.crdt.CrdtWriteConsistency
         * @enum {string}
         * @property {number} LOCAL=0 LOCAL value
         * @property {number} MAJORITY=1 MAJORITY value
         * @property {number} ALL=2 ALL value
         */
        crdt.CrdtWriteConsistency = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "LOCAL"] = 0;
            values[valuesById[1] = "MAJORITY"] = 1;
            values[valuesById[2] = "ALL"] = 2;
            return values;
        })();

        /**
         * CrdtClock enum.
         * @name cloudstate.crdt.CrdtClock
         * @enum {string}
         * @property {number} DEFAULT=0 DEFAULT value
         * @property {number} REVERSE=1 REVERSE value
         * @property {number} CUSTOM=2 CUSTOM value
         * @property {number} CUSTOM_AUTO_INCREMENT=3 CUSTOM_AUTO_INCREMENT value
         */
        crdt.CrdtClock = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "DEFAULT"] = 0;
            values[valuesById[1] = "REVERSE"] = 1;
            values[valuesById[2] = "CUSTOM"] = 2;
            values[valuesById[3] = "CUSTOM_AUTO_INCREMENT"] = 3;
            return values;
        })();

        return crdt;
    })();

    cloudstate.Reply = (function() {

        /**
         * Properties of a Reply.
         * @memberof cloudstate
         * @interface IReply
         * @property {google.protobuf.IAny|null} [payload] Reply payload
         */

        /**
         * Constructs a new Reply.
         * @memberof cloudstate
         * @classdesc Represents a Reply.
         * @implements IReply
         * @constructor
         * @param {cloudstate.IReply=} [properties] Properties to set
         */
        function Reply(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Reply payload.
         * @member {google.protobuf.IAny|null|undefined} payload
         * @memberof cloudstate.Reply
         * @instance
         */
        Reply.prototype.payload = null;

        /**
         * Creates a new Reply instance using the specified properties.
         * @function create
         * @memberof cloudstate.Reply
         * @static
         * @param {cloudstate.IReply=} [properties] Properties to set
         * @returns {cloudstate.Reply} Reply instance
         */
        Reply.create = function create(properties) {
            return new Reply(properties);
        };

        /**
         * Encodes the specified Reply message. Does not implicitly {@link cloudstate.Reply.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.Reply
         * @static
         * @param {cloudstate.IReply} message Reply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Reply.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.payload != null && message.hasOwnProperty("payload"))
                $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Reply message, length delimited. Does not implicitly {@link cloudstate.Reply.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.Reply
         * @static
         * @param {cloudstate.IReply} message Reply message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Reply.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Reply message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.Reply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.Reply} Reply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Reply.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.Reply();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Reply message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.Reply
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.Reply} Reply
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Reply.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Reply message.
         * @function verify
         * @memberof cloudstate.Reply
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Reply.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.payload != null && message.hasOwnProperty("payload")) {
                var error = $root.google.protobuf.Any.verify(message.payload);
                if (error)
                    return "payload." + error;
            }
            return null;
        };

        /**
         * Creates a Reply message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.Reply
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.Reply} Reply
         */
        Reply.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.Reply)
                return object;
            var message = new $root.cloudstate.Reply();
            if (object.payload != null) {
                if (typeof object.payload !== "object")
                    throw TypeError(".cloudstate.Reply.payload: object expected");
                message.payload = $root.google.protobuf.Any.fromObject(object.payload);
            }
            return message;
        };

        /**
         * Creates a plain object from a Reply message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.Reply
         * @static
         * @param {cloudstate.Reply} message Reply
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Reply.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.payload = null;
            if (message.payload != null && message.hasOwnProperty("payload"))
                object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
            return object;
        };

        /**
         * Converts this Reply to JSON.
         * @function toJSON
         * @memberof cloudstate.Reply
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Reply.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Reply;
    })();

    cloudstate.Forward = (function() {

        /**
         * Properties of a Forward.
         * @memberof cloudstate
         * @interface IForward
         * @property {string|null} [serviceName] Forward serviceName
         * @property {string|null} [commandName] Forward commandName
         * @property {google.protobuf.IAny|null} [payload] Forward payload
         */

        /**
         * Constructs a new Forward.
         * @memberof cloudstate
         * @classdesc Represents a Forward.
         * @implements IForward
         * @constructor
         * @param {cloudstate.IForward=} [properties] Properties to set
         */
        function Forward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Forward serviceName.
         * @member {string} serviceName
         * @memberof cloudstate.Forward
         * @instance
         */
        Forward.prototype.serviceName = "";

        /**
         * Forward commandName.
         * @member {string} commandName
         * @memberof cloudstate.Forward
         * @instance
         */
        Forward.prototype.commandName = "";

        /**
         * Forward payload.
         * @member {google.protobuf.IAny|null|undefined} payload
         * @memberof cloudstate.Forward
         * @instance
         */
        Forward.prototype.payload = null;

        /**
         * Creates a new Forward instance using the specified properties.
         * @function create
         * @memberof cloudstate.Forward
         * @static
         * @param {cloudstate.IForward=} [properties] Properties to set
         * @returns {cloudstate.Forward} Forward instance
         */
        Forward.create = function create(properties) {
            return new Forward(properties);
        };

        /**
         * Encodes the specified Forward message. Does not implicitly {@link cloudstate.Forward.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.Forward
         * @static
         * @param {cloudstate.IForward} message Forward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Forward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
            if (message.commandName != null && message.hasOwnProperty("commandName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.commandName);
            if (message.payload != null && message.hasOwnProperty("payload"))
                $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Forward message, length delimited. Does not implicitly {@link cloudstate.Forward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.Forward
         * @static
         * @param {cloudstate.IForward} message Forward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Forward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Forward message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.Forward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.Forward} Forward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Forward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.Forward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.serviceName = reader.string();
                    break;
                case 2:
                    message.commandName = reader.string();
                    break;
                case 3:
                    message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Forward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.Forward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.Forward} Forward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Forward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Forward message.
         * @function verify
         * @memberof cloudstate.Forward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Forward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                if (!$util.isString(message.serviceName))
                    return "serviceName: string expected";
            if (message.commandName != null && message.hasOwnProperty("commandName"))
                if (!$util.isString(message.commandName))
                    return "commandName: string expected";
            if (message.payload != null && message.hasOwnProperty("payload")) {
                var error = $root.google.protobuf.Any.verify(message.payload);
                if (error)
                    return "payload." + error;
            }
            return null;
        };

        /**
         * Creates a Forward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.Forward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.Forward} Forward
         */
        Forward.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.Forward)
                return object;
            var message = new $root.cloudstate.Forward();
            if (object.serviceName != null)
                message.serviceName = String(object.serviceName);
            if (object.commandName != null)
                message.commandName = String(object.commandName);
            if (object.payload != null) {
                if (typeof object.payload !== "object")
                    throw TypeError(".cloudstate.Forward.payload: object expected");
                message.payload = $root.google.protobuf.Any.fromObject(object.payload);
            }
            return message;
        };

        /**
         * Creates a plain object from a Forward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.Forward
         * @static
         * @param {cloudstate.Forward} message Forward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Forward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.serviceName = "";
                object.commandName = "";
                object.payload = null;
            }
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                object.serviceName = message.serviceName;
            if (message.commandName != null && message.hasOwnProperty("commandName"))
                object.commandName = message.commandName;
            if (message.payload != null && message.hasOwnProperty("payload"))
                object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
            return object;
        };

        /**
         * Converts this Forward to JSON.
         * @function toJSON
         * @memberof cloudstate.Forward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Forward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Forward;
    })();

    cloudstate.ClientAction = (function() {

        /**
         * Properties of a ClientAction.
         * @memberof cloudstate
         * @interface IClientAction
         * @property {cloudstate.IReply|null} [reply] ClientAction reply
         * @property {cloudstate.IForward|null} [forward] ClientAction forward
         * @property {cloudstate.IFailure|null} [failure] ClientAction failure
         */

        /**
         * Constructs a new ClientAction.
         * @memberof cloudstate
         * @classdesc Represents a ClientAction.
         * @implements IClientAction
         * @constructor
         * @param {cloudstate.IClientAction=} [properties] Properties to set
         */
        function ClientAction(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ClientAction reply.
         * @member {cloudstate.IReply|null|undefined} reply
         * @memberof cloudstate.ClientAction
         * @instance
         */
        ClientAction.prototype.reply = null;

        /**
         * ClientAction forward.
         * @member {cloudstate.IForward|null|undefined} forward
         * @memberof cloudstate.ClientAction
         * @instance
         */
        ClientAction.prototype.forward = null;

        /**
         * ClientAction failure.
         * @member {cloudstate.IFailure|null|undefined} failure
         * @memberof cloudstate.ClientAction
         * @instance
         */
        ClientAction.prototype.failure = null;

        // OneOf field names bound to virtual getters and setters
        var $oneOfFields;

        /**
         * ClientAction action.
         * @member {"reply"|"forward"|"failure"|undefined} action
         * @memberof cloudstate.ClientAction
         * @instance
         */
        Object.defineProperty(ClientAction.prototype, "action", {
            get: $util.oneOfGetter($oneOfFields = ["reply", "forward", "failure"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Creates a new ClientAction instance using the specified properties.
         * @function create
         * @memberof cloudstate.ClientAction
         * @static
         * @param {cloudstate.IClientAction=} [properties] Properties to set
         * @returns {cloudstate.ClientAction} ClientAction instance
         */
        ClientAction.create = function create(properties) {
            return new ClientAction(properties);
        };

        /**
         * Encodes the specified ClientAction message. Does not implicitly {@link cloudstate.ClientAction.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.ClientAction
         * @static
         * @param {cloudstate.IClientAction} message ClientAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ClientAction.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.reply != null && message.hasOwnProperty("reply"))
                $root.cloudstate.Reply.encode(message.reply, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.forward != null && message.hasOwnProperty("forward"))
                $root.cloudstate.Forward.encode(message.forward, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.failure != null && message.hasOwnProperty("failure"))
                $root.cloudstate.Failure.encode(message.failure, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ClientAction message, length delimited. Does not implicitly {@link cloudstate.ClientAction.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.ClientAction
         * @static
         * @param {cloudstate.IClientAction} message ClientAction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ClientAction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ClientAction message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.ClientAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.ClientAction} ClientAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ClientAction.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.ClientAction();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.reply = $root.cloudstate.Reply.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.forward = $root.cloudstate.Forward.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.failure = $root.cloudstate.Failure.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ClientAction message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.ClientAction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.ClientAction} ClientAction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ClientAction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ClientAction message.
         * @function verify
         * @memberof cloudstate.ClientAction
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ClientAction.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            var properties = {};
            if (message.reply != null && message.hasOwnProperty("reply")) {
                properties.action = 1;
                {
                    var error = $root.cloudstate.Reply.verify(message.reply);
                    if (error)
                        return "reply." + error;
                }
            }
            if (message.forward != null && message.hasOwnProperty("forward")) {
                if (properties.action === 1)
                    return "action: multiple values";
                properties.action = 1;
                {
                    var error = $root.cloudstate.Forward.verify(message.forward);
                    if (error)
                        return "forward." + error;
                }
            }
            if (message.failure != null && message.hasOwnProperty("failure")) {
                if (properties.action === 1)
                    return "action: multiple values";
                properties.action = 1;
                {
                    var error = $root.cloudstate.Failure.verify(message.failure);
                    if (error)
                        return "failure." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ClientAction message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.ClientAction
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.ClientAction} ClientAction
         */
        ClientAction.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.ClientAction)
                return object;
            var message = new $root.cloudstate.ClientAction();
            if (object.reply != null) {
                if (typeof object.reply !== "object")
                    throw TypeError(".cloudstate.ClientAction.reply: object expected");
                message.reply = $root.cloudstate.Reply.fromObject(object.reply);
            }
            if (object.forward != null) {
                if (typeof object.forward !== "object")
                    throw TypeError(".cloudstate.ClientAction.forward: object expected");
                message.forward = $root.cloudstate.Forward.fromObject(object.forward);
            }
            if (object.failure != null) {
                if (typeof object.failure !== "object")
                    throw TypeError(".cloudstate.ClientAction.failure: object expected");
                message.failure = $root.cloudstate.Failure.fromObject(object.failure);
            }
            return message;
        };

        /**
         * Creates a plain object from a ClientAction message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.ClientAction
         * @static
         * @param {cloudstate.ClientAction} message ClientAction
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ClientAction.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (message.reply != null && message.hasOwnProperty("reply")) {
                object.reply = $root.cloudstate.Reply.toObject(message.reply, options);
                if (options.oneofs)
                    object.action = "reply";
            }
            if (message.forward != null && message.hasOwnProperty("forward")) {
                object.forward = $root.cloudstate.Forward.toObject(message.forward, options);
                if (options.oneofs)
                    object.action = "forward";
            }
            if (message.failure != null && message.hasOwnProperty("failure")) {
                object.failure = $root.cloudstate.Failure.toObject(message.failure, options);
                if (options.oneofs)
                    object.action = "failure";
            }
            return object;
        };

        /**
         * Converts this ClientAction to JSON.
         * @function toJSON
         * @memberof cloudstate.ClientAction
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ClientAction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ClientAction;
    })();

    cloudstate.SideEffect = (function() {

        /**
         * Properties of a SideEffect.
         * @memberof cloudstate
         * @interface ISideEffect
         * @property {string|null} [serviceName] SideEffect serviceName
         * @property {string|null} [commandName] SideEffect commandName
         * @property {google.protobuf.IAny|null} [payload] SideEffect payload
         * @property {boolean|null} [synchronous] SideEffect synchronous
         */

        /**
         * Constructs a new SideEffect.
         * @memberof cloudstate
         * @classdesc Represents a SideEffect.
         * @implements ISideEffect
         * @constructor
         * @param {cloudstate.ISideEffect=} [properties] Properties to set
         */
        function SideEffect(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SideEffect serviceName.
         * @member {string} serviceName
         * @memberof cloudstate.SideEffect
         * @instance
         */
        SideEffect.prototype.serviceName = "";

        /**
         * SideEffect commandName.
         * @member {string} commandName
         * @memberof cloudstate.SideEffect
         * @instance
         */
        SideEffect.prototype.commandName = "";

        /**
         * SideEffect payload.
         * @member {google.protobuf.IAny|null|undefined} payload
         * @memberof cloudstate.SideEffect
         * @instance
         */
        SideEffect.prototype.payload = null;

        /**
         * SideEffect synchronous.
         * @member {boolean} synchronous
         * @memberof cloudstate.SideEffect
         * @instance
         */
        SideEffect.prototype.synchronous = false;

        /**
         * Creates a new SideEffect instance using the specified properties.
         * @function create
         * @memberof cloudstate.SideEffect
         * @static
         * @param {cloudstate.ISideEffect=} [properties] Properties to set
         * @returns {cloudstate.SideEffect} SideEffect instance
         */
        SideEffect.create = function create(properties) {
            return new SideEffect(properties);
        };

        /**
         * Encodes the specified SideEffect message. Does not implicitly {@link cloudstate.SideEffect.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.SideEffect
         * @static
         * @param {cloudstate.ISideEffect} message SideEffect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SideEffect.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
            if (message.commandName != null && message.hasOwnProperty("commandName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.commandName);
            if (message.payload != null && message.hasOwnProperty("payload"))
                $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.synchronous != null && message.hasOwnProperty("synchronous"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.synchronous);
            return writer;
        };

        /**
         * Encodes the specified SideEffect message, length delimited. Does not implicitly {@link cloudstate.SideEffect.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.SideEffect
         * @static
         * @param {cloudstate.ISideEffect} message SideEffect message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SideEffect.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SideEffect message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.SideEffect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.SideEffect} SideEffect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SideEffect.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.SideEffect();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.serviceName = reader.string();
                    break;
                case 2:
                    message.commandName = reader.string();
                    break;
                case 3:
                    message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.synchronous = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SideEffect message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.SideEffect
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.SideEffect} SideEffect
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SideEffect.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SideEffect message.
         * @function verify
         * @memberof cloudstate.SideEffect
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SideEffect.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                if (!$util.isString(message.serviceName))
                    return "serviceName: string expected";
            if (message.commandName != null && message.hasOwnProperty("commandName"))
                if (!$util.isString(message.commandName))
                    return "commandName: string expected";
            if (message.payload != null && message.hasOwnProperty("payload")) {
                var error = $root.google.protobuf.Any.verify(message.payload);
                if (error)
                    return "payload." + error;
            }
            if (message.synchronous != null && message.hasOwnProperty("synchronous"))
                if (typeof message.synchronous !== "boolean")
                    return "synchronous: boolean expected";
            return null;
        };

        /**
         * Creates a SideEffect message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.SideEffect
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.SideEffect} SideEffect
         */
        SideEffect.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.SideEffect)
                return object;
            var message = new $root.cloudstate.SideEffect();
            if (object.serviceName != null)
                message.serviceName = String(object.serviceName);
            if (object.commandName != null)
                message.commandName = String(object.commandName);
            if (object.payload != null) {
                if (typeof object.payload !== "object")
                    throw TypeError(".cloudstate.SideEffect.payload: object expected");
                message.payload = $root.google.protobuf.Any.fromObject(object.payload);
            }
            if (object.synchronous != null)
                message.synchronous = Boolean(object.synchronous);
            return message;
        };

        /**
         * Creates a plain object from a SideEffect message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.SideEffect
         * @static
         * @param {cloudstate.SideEffect} message SideEffect
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SideEffect.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.serviceName = "";
                object.commandName = "";
                object.payload = null;
                object.synchronous = false;
            }
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                object.serviceName = message.serviceName;
            if (message.commandName != null && message.hasOwnProperty("commandName"))
                object.commandName = message.commandName;
            if (message.payload != null && message.hasOwnProperty("payload"))
                object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
            if (message.synchronous != null && message.hasOwnProperty("synchronous"))
                object.synchronous = message.synchronous;
            return object;
        };

        /**
         * Converts this SideEffect to JSON.
         * @function toJSON
         * @memberof cloudstate.SideEffect
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SideEffect.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SideEffect;
    })();

    cloudstate.Command = (function() {

        /**
         * Properties of a Command.
         * @memberof cloudstate
         * @interface ICommand
         * @property {string|null} [entityId] Command entityId
         * @property {number|Long|null} [id] Command id
         * @property {string|null} [name] Command name
         * @property {google.protobuf.IAny|null} [payload] Command payload
         * @property {boolean|null} [streamed] Command streamed
         */

        /**
         * Constructs a new Command.
         * @memberof cloudstate
         * @classdesc Represents a Command.
         * @implements ICommand
         * @constructor
         * @param {cloudstate.ICommand=} [properties] Properties to set
         */
        function Command(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Command entityId.
         * @member {string} entityId
         * @memberof cloudstate.Command
         * @instance
         */
        Command.prototype.entityId = "";

        /**
         * Command id.
         * @member {number|Long} id
         * @memberof cloudstate.Command
         * @instance
         */
        Command.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Command name.
         * @member {string} name
         * @memberof cloudstate.Command
         * @instance
         */
        Command.prototype.name = "";

        /**
         * Command payload.
         * @member {google.protobuf.IAny|null|undefined} payload
         * @memberof cloudstate.Command
         * @instance
         */
        Command.prototype.payload = null;

        /**
         * Command streamed.
         * @member {boolean} streamed
         * @memberof cloudstate.Command
         * @instance
         */
        Command.prototype.streamed = false;

        /**
         * Creates a new Command instance using the specified properties.
         * @function create
         * @memberof cloudstate.Command
         * @static
         * @param {cloudstate.ICommand=} [properties] Properties to set
         * @returns {cloudstate.Command} Command instance
         */
        Command.create = function create(properties) {
            return new Command(properties);
        };

        /**
         * Encodes the specified Command message. Does not implicitly {@link cloudstate.Command.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.Command
         * @static
         * @param {cloudstate.ICommand} message Command message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Command.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entityId != null && message.hasOwnProperty("entityId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.entityId);
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.id);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.payload != null && message.hasOwnProperty("payload"))
                $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.streamed != null && message.hasOwnProperty("streamed"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.streamed);
            return writer;
        };

        /**
         * Encodes the specified Command message, length delimited. Does not implicitly {@link cloudstate.Command.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.Command
         * @static
         * @param {cloudstate.ICommand} message Command message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Command.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Command message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.Command
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.Command} Command
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Command.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.Command();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entityId = reader.string();
                    break;
                case 2:
                    message.id = reader.int64();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.streamed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Command message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.Command
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.Command} Command
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Command.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Command message.
         * @function verify
         * @memberof cloudstate.Command
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Command.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entityId != null && message.hasOwnProperty("entityId"))
                if (!$util.isString(message.entityId))
                    return "entityId: string expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.payload != null && message.hasOwnProperty("payload")) {
                var error = $root.google.protobuf.Any.verify(message.payload);
                if (error)
                    return "payload." + error;
            }
            if (message.streamed != null && message.hasOwnProperty("streamed"))
                if (typeof message.streamed !== "boolean")
                    return "streamed: boolean expected";
            return null;
        };

        /**
         * Creates a Command message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.Command
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.Command} Command
         */
        Command.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.Command)
                return object;
            var message = new $root.cloudstate.Command();
            if (object.entityId != null)
                message.entityId = String(object.entityId);
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
            if (object.name != null)
                message.name = String(object.name);
            if (object.payload != null) {
                if (typeof object.payload !== "object")
                    throw TypeError(".cloudstate.Command.payload: object expected");
                message.payload = $root.google.protobuf.Any.fromObject(object.payload);
            }
            if (object.streamed != null)
                message.streamed = Boolean(object.streamed);
            return message;
        };

        /**
         * Creates a plain object from a Command message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.Command
         * @static
         * @param {cloudstate.Command} message Command
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Command.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entityId = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
                object.name = "";
                object.payload = null;
                object.streamed = false;
            }
            if (message.entityId != null && message.hasOwnProperty("entityId"))
                object.entityId = message.entityId;
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.payload != null && message.hasOwnProperty("payload"))
                object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
            if (message.streamed != null && message.hasOwnProperty("streamed"))
                object.streamed = message.streamed;
            return object;
        };

        /**
         * Converts this Command to JSON.
         * @function toJSON
         * @memberof cloudstate.Command
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Command.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Command;
    })();

    cloudstate.StreamCancelled = (function() {

        /**
         * Properties of a StreamCancelled.
         * @memberof cloudstate
         * @interface IStreamCancelled
         * @property {string|null} [entityId] StreamCancelled entityId
         * @property {number|Long|null} [id] StreamCancelled id
         */

        /**
         * Constructs a new StreamCancelled.
         * @memberof cloudstate
         * @classdesc Represents a StreamCancelled.
         * @implements IStreamCancelled
         * @constructor
         * @param {cloudstate.IStreamCancelled=} [properties] Properties to set
         */
        function StreamCancelled(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StreamCancelled entityId.
         * @member {string} entityId
         * @memberof cloudstate.StreamCancelled
         * @instance
         */
        StreamCancelled.prototype.entityId = "";

        /**
         * StreamCancelled id.
         * @member {number|Long} id
         * @memberof cloudstate.StreamCancelled
         * @instance
         */
        StreamCancelled.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new StreamCancelled instance using the specified properties.
         * @function create
         * @memberof cloudstate.StreamCancelled
         * @static
         * @param {cloudstate.IStreamCancelled=} [properties] Properties to set
         * @returns {cloudstate.StreamCancelled} StreamCancelled instance
         */
        StreamCancelled.create = function create(properties) {
            return new StreamCancelled(properties);
        };

        /**
         * Encodes the specified StreamCancelled message. Does not implicitly {@link cloudstate.StreamCancelled.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.StreamCancelled
         * @static
         * @param {cloudstate.IStreamCancelled} message StreamCancelled message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StreamCancelled.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entityId != null && message.hasOwnProperty("entityId"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.entityId);
            if (message.id != null && message.hasOwnProperty("id"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.id);
            return writer;
        };

        /**
         * Encodes the specified StreamCancelled message, length delimited. Does not implicitly {@link cloudstate.StreamCancelled.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.StreamCancelled
         * @static
         * @param {cloudstate.IStreamCancelled} message StreamCancelled message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StreamCancelled.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StreamCancelled message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.StreamCancelled
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.StreamCancelled} StreamCancelled
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StreamCancelled.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.StreamCancelled();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entityId = reader.string();
                    break;
                case 2:
                    message.id = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StreamCancelled message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.StreamCancelled
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.StreamCancelled} StreamCancelled
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StreamCancelled.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StreamCancelled message.
         * @function verify
         * @memberof cloudstate.StreamCancelled
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StreamCancelled.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entityId != null && message.hasOwnProperty("entityId"))
                if (!$util.isString(message.entityId))
                    return "entityId: string expected";
            if (message.id != null && message.hasOwnProperty("id"))
                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                    return "id: integer|Long expected";
            return null;
        };

        /**
         * Creates a StreamCancelled message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.StreamCancelled
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.StreamCancelled} StreamCancelled
         */
        StreamCancelled.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.StreamCancelled)
                return object;
            var message = new $root.cloudstate.StreamCancelled();
            if (object.entityId != null)
                message.entityId = String(object.entityId);
            if (object.id != null)
                if ($util.Long)
                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                else if (typeof object.id === "string")
                    message.id = parseInt(object.id, 10);
                else if (typeof object.id === "number")
                    message.id = object.id;
                else if (typeof object.id === "object")
                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a StreamCancelled message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.StreamCancelled
         * @static
         * @param {cloudstate.StreamCancelled} message StreamCancelled
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StreamCancelled.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entityId = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.id = options.longs === String ? "0" : 0;
            }
            if (message.entityId != null && message.hasOwnProperty("entityId"))
                object.entityId = message.entityId;
            if (message.id != null && message.hasOwnProperty("id"))
                if (typeof message.id === "number")
                    object.id = options.longs === String ? String(message.id) : message.id;
                else
                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
            return object;
        };

        /**
         * Converts this StreamCancelled to JSON.
         * @function toJSON
         * @memberof cloudstate.StreamCancelled
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StreamCancelled.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StreamCancelled;
    })();

    cloudstate.Failure = (function() {

        /**
         * Properties of a Failure.
         * @memberof cloudstate
         * @interface IFailure
         * @property {number|Long|null} [commandId] Failure commandId
         * @property {string|null} [description] Failure description
         */

        /**
         * Constructs a new Failure.
         * @memberof cloudstate
         * @classdesc Represents a Failure.
         * @implements IFailure
         * @constructor
         * @param {cloudstate.IFailure=} [properties] Properties to set
         */
        function Failure(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Failure commandId.
         * @member {number|Long} commandId
         * @memberof cloudstate.Failure
         * @instance
         */
        Failure.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Failure description.
         * @member {string} description
         * @memberof cloudstate.Failure
         * @instance
         */
        Failure.prototype.description = "";

        /**
         * Creates a new Failure instance using the specified properties.
         * @function create
         * @memberof cloudstate.Failure
         * @static
         * @param {cloudstate.IFailure=} [properties] Properties to set
         * @returns {cloudstate.Failure} Failure instance
         */
        Failure.create = function create(properties) {
            return new Failure(properties);
        };

        /**
         * Encodes the specified Failure message. Does not implicitly {@link cloudstate.Failure.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.Failure
         * @static
         * @param {cloudstate.IFailure} message Failure message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Failure.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.commandId != null && message.hasOwnProperty("commandId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
            if (message.description != null && message.hasOwnProperty("description"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
            return writer;
        };

        /**
         * Encodes the specified Failure message, length delimited. Does not implicitly {@link cloudstate.Failure.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.Failure
         * @static
         * @param {cloudstate.IFailure} message Failure message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Failure.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Failure message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.Failure
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.Failure} Failure
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Failure.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.Failure();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.commandId = reader.int64();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Failure message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.Failure
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.Failure} Failure
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Failure.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Failure message.
         * @function verify
         * @memberof cloudstate.Failure
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Failure.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.commandId != null && message.hasOwnProperty("commandId"))
                if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                    return "commandId: integer|Long expected";
            if (message.description != null && message.hasOwnProperty("description"))
                if (!$util.isString(message.description))
                    return "description: string expected";
            return null;
        };

        /**
         * Creates a Failure message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.Failure
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.Failure} Failure
         */
        Failure.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.Failure)
                return object;
            var message = new $root.cloudstate.Failure();
            if (object.commandId != null)
                if ($util.Long)
                    (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                else if (typeof object.commandId === "string")
                    message.commandId = parseInt(object.commandId, 10);
                else if (typeof object.commandId === "number")
                    message.commandId = object.commandId;
                else if (typeof object.commandId === "object")
                    message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
            if (object.description != null)
                message.description = String(object.description);
            return message;
        };

        /**
         * Creates a plain object from a Failure message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.Failure
         * @static
         * @param {cloudstate.Failure} message Failure
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Failure.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.commandId = options.longs === String ? "0" : 0;
                object.description = "";
            }
            if (message.commandId != null && message.hasOwnProperty("commandId"))
                if (typeof message.commandId === "number")
                    object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                else
                    object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
            if (message.description != null && message.hasOwnProperty("description"))
                object.description = message.description;
            return object;
        };

        /**
         * Converts this Failure to JSON.
         * @function toJSON
         * @memberof cloudstate.Failure
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Failure.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Failure;
    })();

    cloudstate.EntitySpec = (function() {

        /**
         * Properties of an EntitySpec.
         * @memberof cloudstate
         * @interface IEntitySpec
         * @property {Uint8Array|null} [proto] EntitySpec proto
         * @property {Array.<cloudstate.IEntity>|null} [entities] EntitySpec entities
         * @property {cloudstate.IServiceInfo|null} [serviceInfo] EntitySpec serviceInfo
         */

        /**
         * Constructs a new EntitySpec.
         * @memberof cloudstate
         * @classdesc Represents an EntitySpec.
         * @implements IEntitySpec
         * @constructor
         * @param {cloudstate.IEntitySpec=} [properties] Properties to set
         */
        function EntitySpec(properties) {
            this.entities = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EntitySpec proto.
         * @member {Uint8Array} proto
         * @memberof cloudstate.EntitySpec
         * @instance
         */
        EntitySpec.prototype.proto = $util.newBuffer([]);

        /**
         * EntitySpec entities.
         * @member {Array.<cloudstate.IEntity>} entities
         * @memberof cloudstate.EntitySpec
         * @instance
         */
        EntitySpec.prototype.entities = $util.emptyArray;

        /**
         * EntitySpec serviceInfo.
         * @member {cloudstate.IServiceInfo|null|undefined} serviceInfo
         * @memberof cloudstate.EntitySpec
         * @instance
         */
        EntitySpec.prototype.serviceInfo = null;

        /**
         * Creates a new EntitySpec instance using the specified properties.
         * @function create
         * @memberof cloudstate.EntitySpec
         * @static
         * @param {cloudstate.IEntitySpec=} [properties] Properties to set
         * @returns {cloudstate.EntitySpec} EntitySpec instance
         */
        EntitySpec.create = function create(properties) {
            return new EntitySpec(properties);
        };

        /**
         * Encodes the specified EntitySpec message. Does not implicitly {@link cloudstate.EntitySpec.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.EntitySpec
         * @static
         * @param {cloudstate.IEntitySpec} message EntitySpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntitySpec.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.proto != null && message.hasOwnProperty("proto"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.proto);
            if (message.entities != null && message.entities.length)
                for (var i = 0; i < message.entities.length; ++i)
                    $root.cloudstate.Entity.encode(message.entities[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.serviceInfo != null && message.hasOwnProperty("serviceInfo"))
                $root.cloudstate.ServiceInfo.encode(message.serviceInfo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EntitySpec message, length delimited. Does not implicitly {@link cloudstate.EntitySpec.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.EntitySpec
         * @static
         * @param {cloudstate.IEntitySpec} message EntitySpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EntitySpec.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EntitySpec message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.EntitySpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.EntitySpec} EntitySpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntitySpec.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.EntitySpec();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.proto = reader.bytes();
                    break;
                case 2:
                    if (!(message.entities && message.entities.length))
                        message.entities = [];
                    message.entities.push($root.cloudstate.Entity.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.serviceInfo = $root.cloudstate.ServiceInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EntitySpec message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.EntitySpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.EntitySpec} EntitySpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EntitySpec.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EntitySpec message.
         * @function verify
         * @memberof cloudstate.EntitySpec
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EntitySpec.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.proto != null && message.hasOwnProperty("proto"))
                if (!(message.proto && typeof message.proto.length === "number" || $util.isString(message.proto)))
                    return "proto: buffer expected";
            if (message.entities != null && message.hasOwnProperty("entities")) {
                if (!Array.isArray(message.entities))
                    return "entities: array expected";
                for (var i = 0; i < message.entities.length; ++i) {
                    var error = $root.cloudstate.Entity.verify(message.entities[i]);
                    if (error)
                        return "entities." + error;
                }
            }
            if (message.serviceInfo != null && message.hasOwnProperty("serviceInfo")) {
                var error = $root.cloudstate.ServiceInfo.verify(message.serviceInfo);
                if (error)
                    return "serviceInfo." + error;
            }
            return null;
        };

        /**
         * Creates an EntitySpec message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.EntitySpec
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.EntitySpec} EntitySpec
         */
        EntitySpec.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.EntitySpec)
                return object;
            var message = new $root.cloudstate.EntitySpec();
            if (object.proto != null)
                if (typeof object.proto === "string")
                    $util.base64.decode(object.proto, message.proto = $util.newBuffer($util.base64.length(object.proto)), 0);
                else if (object.proto.length)
                    message.proto = object.proto;
            if (object.entities) {
                if (!Array.isArray(object.entities))
                    throw TypeError(".cloudstate.EntitySpec.entities: array expected");
                message.entities = [];
                for (var i = 0; i < object.entities.length; ++i) {
                    if (typeof object.entities[i] !== "object")
                        throw TypeError(".cloudstate.EntitySpec.entities: object expected");
                    message.entities[i] = $root.cloudstate.Entity.fromObject(object.entities[i]);
                }
            }
            if (object.serviceInfo != null) {
                if (typeof object.serviceInfo !== "object")
                    throw TypeError(".cloudstate.EntitySpec.serviceInfo: object expected");
                message.serviceInfo = $root.cloudstate.ServiceInfo.fromObject(object.serviceInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from an EntitySpec message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.EntitySpec
         * @static
         * @param {cloudstate.EntitySpec} message EntitySpec
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EntitySpec.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.entities = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.proto = "";
                else {
                    object.proto = [];
                    if (options.bytes !== Array)
                        object.proto = $util.newBuffer(object.proto);
                }
                object.serviceInfo = null;
            }
            if (message.proto != null && message.hasOwnProperty("proto"))
                object.proto = options.bytes === String ? $util.base64.encode(message.proto, 0, message.proto.length) : options.bytes === Array ? Array.prototype.slice.call(message.proto) : message.proto;
            if (message.entities && message.entities.length) {
                object.entities = [];
                for (var j = 0; j < message.entities.length; ++j)
                    object.entities[j] = $root.cloudstate.Entity.toObject(message.entities[j], options);
            }
            if (message.serviceInfo != null && message.hasOwnProperty("serviceInfo"))
                object.serviceInfo = $root.cloudstate.ServiceInfo.toObject(message.serviceInfo, options);
            return object;
        };

        /**
         * Converts this EntitySpec to JSON.
         * @function toJSON
         * @memberof cloudstate.EntitySpec
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EntitySpec.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EntitySpec;
    })();

    cloudstate.ServiceInfo = (function() {

        /**
         * Properties of a ServiceInfo.
         * @memberof cloudstate
         * @interface IServiceInfo
         * @property {string|null} [serviceName] ServiceInfo serviceName
         * @property {string|null} [serviceVersion] ServiceInfo serviceVersion
         * @property {string|null} [serviceRuntime] ServiceInfo serviceRuntime
         * @property {string|null} [supportLibraryName] ServiceInfo supportLibraryName
         * @property {string|null} [supportLibraryVersion] ServiceInfo supportLibraryVersion
         */

        /**
         * Constructs a new ServiceInfo.
         * @memberof cloudstate
         * @classdesc Represents a ServiceInfo.
         * @implements IServiceInfo
         * @constructor
         * @param {cloudstate.IServiceInfo=} [properties] Properties to set
         */
        function ServiceInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ServiceInfo serviceName.
         * @member {string} serviceName
         * @memberof cloudstate.ServiceInfo
         * @instance
         */
        ServiceInfo.prototype.serviceName = "";

        /**
         * ServiceInfo serviceVersion.
         * @member {string} serviceVersion
         * @memberof cloudstate.ServiceInfo
         * @instance
         */
        ServiceInfo.prototype.serviceVersion = "";

        /**
         * ServiceInfo serviceRuntime.
         * @member {string} serviceRuntime
         * @memberof cloudstate.ServiceInfo
         * @instance
         */
        ServiceInfo.prototype.serviceRuntime = "";

        /**
         * ServiceInfo supportLibraryName.
         * @member {string} supportLibraryName
         * @memberof cloudstate.ServiceInfo
         * @instance
         */
        ServiceInfo.prototype.supportLibraryName = "";

        /**
         * ServiceInfo supportLibraryVersion.
         * @member {string} supportLibraryVersion
         * @memberof cloudstate.ServiceInfo
         * @instance
         */
        ServiceInfo.prototype.supportLibraryVersion = "";

        /**
         * Creates a new ServiceInfo instance using the specified properties.
         * @function create
         * @memberof cloudstate.ServiceInfo
         * @static
         * @param {cloudstate.IServiceInfo=} [properties] Properties to set
         * @returns {cloudstate.ServiceInfo} ServiceInfo instance
         */
        ServiceInfo.create = function create(properties) {
            return new ServiceInfo(properties);
        };

        /**
         * Encodes the specified ServiceInfo message. Does not implicitly {@link cloudstate.ServiceInfo.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.ServiceInfo
         * @static
         * @param {cloudstate.IServiceInfo} message ServiceInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServiceInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
            if (message.serviceVersion != null && message.hasOwnProperty("serviceVersion"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceVersion);
            if (message.serviceRuntime != null && message.hasOwnProperty("serviceRuntime"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.serviceRuntime);
            if (message.supportLibraryName != null && message.hasOwnProperty("supportLibraryName"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.supportLibraryName);
            if (message.supportLibraryVersion != null && message.hasOwnProperty("supportLibraryVersion"))
                writer.uint32(/* id 5, wireType 2 =*/42).string(message.supportLibraryVersion);
            return writer;
        };

        /**
         * Encodes the specified ServiceInfo message, length delimited. Does not implicitly {@link cloudstate.ServiceInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.ServiceInfo
         * @static
         * @param {cloudstate.IServiceInfo} message ServiceInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ServiceInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ServiceInfo message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.ServiceInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.ServiceInfo} ServiceInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServiceInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.ServiceInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.serviceName = reader.string();
                    break;
                case 2:
                    message.serviceVersion = reader.string();
                    break;
                case 3:
                    message.serviceRuntime = reader.string();
                    break;
                case 4:
                    message.supportLibraryName = reader.string();
                    break;
                case 5:
                    message.supportLibraryVersion = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ServiceInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.ServiceInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.ServiceInfo} ServiceInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ServiceInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ServiceInfo message.
         * @function verify
         * @memberof cloudstate.ServiceInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ServiceInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                if (!$util.isString(message.serviceName))
                    return "serviceName: string expected";
            if (message.serviceVersion != null && message.hasOwnProperty("serviceVersion"))
                if (!$util.isString(message.serviceVersion))
                    return "serviceVersion: string expected";
            if (message.serviceRuntime != null && message.hasOwnProperty("serviceRuntime"))
                if (!$util.isString(message.serviceRuntime))
                    return "serviceRuntime: string expected";
            if (message.supportLibraryName != null && message.hasOwnProperty("supportLibraryName"))
                if (!$util.isString(message.supportLibraryName))
                    return "supportLibraryName: string expected";
            if (message.supportLibraryVersion != null && message.hasOwnProperty("supportLibraryVersion"))
                if (!$util.isString(message.supportLibraryVersion))
                    return "supportLibraryVersion: string expected";
            return null;
        };

        /**
         * Creates a ServiceInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.ServiceInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.ServiceInfo} ServiceInfo
         */
        ServiceInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.ServiceInfo)
                return object;
            var message = new $root.cloudstate.ServiceInfo();
            if (object.serviceName != null)
                message.serviceName = String(object.serviceName);
            if (object.serviceVersion != null)
                message.serviceVersion = String(object.serviceVersion);
            if (object.serviceRuntime != null)
                message.serviceRuntime = String(object.serviceRuntime);
            if (object.supportLibraryName != null)
                message.supportLibraryName = String(object.supportLibraryName);
            if (object.supportLibraryVersion != null)
                message.supportLibraryVersion = String(object.supportLibraryVersion);
            return message;
        };

        /**
         * Creates a plain object from a ServiceInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.ServiceInfo
         * @static
         * @param {cloudstate.ServiceInfo} message ServiceInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ServiceInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.serviceName = "";
                object.serviceVersion = "";
                object.serviceRuntime = "";
                object.supportLibraryName = "";
                object.supportLibraryVersion = "";
            }
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                object.serviceName = message.serviceName;
            if (message.serviceVersion != null && message.hasOwnProperty("serviceVersion"))
                object.serviceVersion = message.serviceVersion;
            if (message.serviceRuntime != null && message.hasOwnProperty("serviceRuntime"))
                object.serviceRuntime = message.serviceRuntime;
            if (message.supportLibraryName != null && message.hasOwnProperty("supportLibraryName"))
                object.supportLibraryName = message.supportLibraryName;
            if (message.supportLibraryVersion != null && message.hasOwnProperty("supportLibraryVersion"))
                object.supportLibraryVersion = message.supportLibraryVersion;
            return object;
        };

        /**
         * Converts this ServiceInfo to JSON.
         * @function toJSON
         * @memberof cloudstate.ServiceInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ServiceInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ServiceInfo;
    })();

    cloudstate.Entity = (function() {

        /**
         * Properties of an Entity.
         * @memberof cloudstate
         * @interface IEntity
         * @property {string|null} [entityType] Entity entityType
         * @property {string|null} [serviceName] Entity serviceName
         * @property {string|null} [persistenceId] Entity persistenceId
         */

        /**
         * Constructs a new Entity.
         * @memberof cloudstate
         * @classdesc Represents an Entity.
         * @implements IEntity
         * @constructor
         * @param {cloudstate.IEntity=} [properties] Properties to set
         */
        function Entity(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Entity entityType.
         * @member {string} entityType
         * @memberof cloudstate.Entity
         * @instance
         */
        Entity.prototype.entityType = "";

        /**
         * Entity serviceName.
         * @member {string} serviceName
         * @memberof cloudstate.Entity
         * @instance
         */
        Entity.prototype.serviceName = "";

        /**
         * Entity persistenceId.
         * @member {string} persistenceId
         * @memberof cloudstate.Entity
         * @instance
         */
        Entity.prototype.persistenceId = "";

        /**
         * Creates a new Entity instance using the specified properties.
         * @function create
         * @memberof cloudstate.Entity
         * @static
         * @param {cloudstate.IEntity=} [properties] Properties to set
         * @returns {cloudstate.Entity} Entity instance
         */
        Entity.create = function create(properties) {
            return new Entity(properties);
        };

        /**
         * Encodes the specified Entity message. Does not implicitly {@link cloudstate.Entity.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.Entity
         * @static
         * @param {cloudstate.IEntity} message Entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Entity.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entityType != null && message.hasOwnProperty("entityType"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.entityType);
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceName);
            if (message.persistenceId != null && message.hasOwnProperty("persistenceId"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.persistenceId);
            return writer;
        };

        /**
         * Encodes the specified Entity message, length delimited. Does not implicitly {@link cloudstate.Entity.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.Entity
         * @static
         * @param {cloudstate.IEntity} message Entity message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Entity.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Entity message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.Entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.Entity} Entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Entity.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.Entity();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.entityType = reader.string();
                    break;
                case 2:
                    message.serviceName = reader.string();
                    break;
                case 3:
                    message.persistenceId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Entity message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.Entity
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.Entity} Entity
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Entity.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Entity message.
         * @function verify
         * @memberof cloudstate.Entity
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Entity.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entityType != null && message.hasOwnProperty("entityType"))
                if (!$util.isString(message.entityType))
                    return "entityType: string expected";
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                if (!$util.isString(message.serviceName))
                    return "serviceName: string expected";
            if (message.persistenceId != null && message.hasOwnProperty("persistenceId"))
                if (!$util.isString(message.persistenceId))
                    return "persistenceId: string expected";
            return null;
        };

        /**
         * Creates an Entity message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.Entity
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.Entity} Entity
         */
        Entity.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.Entity)
                return object;
            var message = new $root.cloudstate.Entity();
            if (object.entityType != null)
                message.entityType = String(object.entityType);
            if (object.serviceName != null)
                message.serviceName = String(object.serviceName);
            if (object.persistenceId != null)
                message.persistenceId = String(object.persistenceId);
            return message;
        };

        /**
         * Creates a plain object from an Entity message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.Entity
         * @static
         * @param {cloudstate.Entity} message Entity
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Entity.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.entityType = "";
                object.serviceName = "";
                object.persistenceId = "";
            }
            if (message.entityType != null && message.hasOwnProperty("entityType"))
                object.entityType = message.entityType;
            if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                object.serviceName = message.serviceName;
            if (message.persistenceId != null && message.hasOwnProperty("persistenceId"))
                object.persistenceId = message.persistenceId;
            return object;
        };

        /**
         * Converts this Entity to JSON.
         * @function toJSON
         * @memberof cloudstate.Entity
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Entity.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Entity;
    })();

    cloudstate.UserFunctionError = (function() {

        /**
         * Properties of a UserFunctionError.
         * @memberof cloudstate
         * @interface IUserFunctionError
         * @property {string|null} [message] UserFunctionError message
         */

        /**
         * Constructs a new UserFunctionError.
         * @memberof cloudstate
         * @classdesc Represents a UserFunctionError.
         * @implements IUserFunctionError
         * @constructor
         * @param {cloudstate.IUserFunctionError=} [properties] Properties to set
         */
        function UserFunctionError(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserFunctionError message.
         * @member {string} message
         * @memberof cloudstate.UserFunctionError
         * @instance
         */
        UserFunctionError.prototype.message = "";

        /**
         * Creates a new UserFunctionError instance using the specified properties.
         * @function create
         * @memberof cloudstate.UserFunctionError
         * @static
         * @param {cloudstate.IUserFunctionError=} [properties] Properties to set
         * @returns {cloudstate.UserFunctionError} UserFunctionError instance
         */
        UserFunctionError.create = function create(properties) {
            return new UserFunctionError(properties);
        };

        /**
         * Encodes the specified UserFunctionError message. Does not implicitly {@link cloudstate.UserFunctionError.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.UserFunctionError
         * @static
         * @param {cloudstate.IUserFunctionError} message UserFunctionError message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserFunctionError.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.message != null && message.hasOwnProperty("message"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
            return writer;
        };

        /**
         * Encodes the specified UserFunctionError message, length delimited. Does not implicitly {@link cloudstate.UserFunctionError.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.UserFunctionError
         * @static
         * @param {cloudstate.IUserFunctionError} message UserFunctionError message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserFunctionError.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserFunctionError message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.UserFunctionError
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.UserFunctionError} UserFunctionError
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserFunctionError.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.UserFunctionError();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserFunctionError message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.UserFunctionError
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.UserFunctionError} UserFunctionError
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserFunctionError.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserFunctionError message.
         * @function verify
         * @memberof cloudstate.UserFunctionError
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserFunctionError.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!$util.isString(message.message))
                    return "message: string expected";
            return null;
        };

        /**
         * Creates a UserFunctionError message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.UserFunctionError
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.UserFunctionError} UserFunctionError
         */
        UserFunctionError.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.UserFunctionError)
                return object;
            var message = new $root.cloudstate.UserFunctionError();
            if (object.message != null)
                message.message = String(object.message);
            return message;
        };

        /**
         * Creates a plain object from a UserFunctionError message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.UserFunctionError
         * @static
         * @param {cloudstate.UserFunctionError} message UserFunctionError
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserFunctionError.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.message = "";
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
            return object;
        };

        /**
         * Converts this UserFunctionError to JSON.
         * @function toJSON
         * @memberof cloudstate.UserFunctionError
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserFunctionError.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserFunctionError;
    })();

    cloudstate.ProxyInfo = (function() {

        /**
         * Properties of a ProxyInfo.
         * @memberof cloudstate
         * @interface IProxyInfo
         * @property {number|null} [protocolMajorVersion] ProxyInfo protocolMajorVersion
         * @property {number|null} [protocolMinorVersion] ProxyInfo protocolMinorVersion
         * @property {string|null} [proxyName] ProxyInfo proxyName
         * @property {string|null} [proxyVersion] ProxyInfo proxyVersion
         * @property {Array.<string>|null} [supportedEntityTypes] ProxyInfo supportedEntityTypes
         */

        /**
         * Constructs a new ProxyInfo.
         * @memberof cloudstate
         * @classdesc Represents a ProxyInfo.
         * @implements IProxyInfo
         * @constructor
         * @param {cloudstate.IProxyInfo=} [properties] Properties to set
         */
        function ProxyInfo(properties) {
            this.supportedEntityTypes = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProxyInfo protocolMajorVersion.
         * @member {number} protocolMajorVersion
         * @memberof cloudstate.ProxyInfo
         * @instance
         */
        ProxyInfo.prototype.protocolMajorVersion = 0;

        /**
         * ProxyInfo protocolMinorVersion.
         * @member {number} protocolMinorVersion
         * @memberof cloudstate.ProxyInfo
         * @instance
         */
        ProxyInfo.prototype.protocolMinorVersion = 0;

        /**
         * ProxyInfo proxyName.
         * @member {string} proxyName
         * @memberof cloudstate.ProxyInfo
         * @instance
         */
        ProxyInfo.prototype.proxyName = "";

        /**
         * ProxyInfo proxyVersion.
         * @member {string} proxyVersion
         * @memberof cloudstate.ProxyInfo
         * @instance
         */
        ProxyInfo.prototype.proxyVersion = "";

        /**
         * ProxyInfo supportedEntityTypes.
         * @member {Array.<string>} supportedEntityTypes
         * @memberof cloudstate.ProxyInfo
         * @instance
         */
        ProxyInfo.prototype.supportedEntityTypes = $util.emptyArray;

        /**
         * Creates a new ProxyInfo instance using the specified properties.
         * @function create
         * @memberof cloudstate.ProxyInfo
         * @static
         * @param {cloudstate.IProxyInfo=} [properties] Properties to set
         * @returns {cloudstate.ProxyInfo} ProxyInfo instance
         */
        ProxyInfo.create = function create(properties) {
            return new ProxyInfo(properties);
        };

        /**
         * Encodes the specified ProxyInfo message. Does not implicitly {@link cloudstate.ProxyInfo.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.ProxyInfo
         * @static
         * @param {cloudstate.IProxyInfo} message ProxyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProxyInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.protocolMajorVersion != null && message.hasOwnProperty("protocolMajorVersion"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.protocolMajorVersion);
            if (message.protocolMinorVersion != null && message.hasOwnProperty("protocolMinorVersion"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.protocolMinorVersion);
            if (message.proxyName != null && message.hasOwnProperty("proxyName"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.proxyName);
            if (message.proxyVersion != null && message.hasOwnProperty("proxyVersion"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.proxyVersion);
            if (message.supportedEntityTypes != null && message.supportedEntityTypes.length)
                for (var i = 0; i < message.supportedEntityTypes.length; ++i)
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.supportedEntityTypes[i]);
            return writer;
        };

        /**
         * Encodes the specified ProxyInfo message, length delimited. Does not implicitly {@link cloudstate.ProxyInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.ProxyInfo
         * @static
         * @param {cloudstate.IProxyInfo} message ProxyInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProxyInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProxyInfo message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.ProxyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.ProxyInfo} ProxyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProxyInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.ProxyInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.protocolMajorVersion = reader.int32();
                    break;
                case 2:
                    message.protocolMinorVersion = reader.int32();
                    break;
                case 3:
                    message.proxyName = reader.string();
                    break;
                case 4:
                    message.proxyVersion = reader.string();
                    break;
                case 5:
                    if (!(message.supportedEntityTypes && message.supportedEntityTypes.length))
                        message.supportedEntityTypes = [];
                    message.supportedEntityTypes.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProxyInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.ProxyInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.ProxyInfo} ProxyInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProxyInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProxyInfo message.
         * @function verify
         * @memberof cloudstate.ProxyInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProxyInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.protocolMajorVersion != null && message.hasOwnProperty("protocolMajorVersion"))
                if (!$util.isInteger(message.protocolMajorVersion))
                    return "protocolMajorVersion: integer expected";
            if (message.protocolMinorVersion != null && message.hasOwnProperty("protocolMinorVersion"))
                if (!$util.isInteger(message.protocolMinorVersion))
                    return "protocolMinorVersion: integer expected";
            if (message.proxyName != null && message.hasOwnProperty("proxyName"))
                if (!$util.isString(message.proxyName))
                    return "proxyName: string expected";
            if (message.proxyVersion != null && message.hasOwnProperty("proxyVersion"))
                if (!$util.isString(message.proxyVersion))
                    return "proxyVersion: string expected";
            if (message.supportedEntityTypes != null && message.hasOwnProperty("supportedEntityTypes")) {
                if (!Array.isArray(message.supportedEntityTypes))
                    return "supportedEntityTypes: array expected";
                for (var i = 0; i < message.supportedEntityTypes.length; ++i)
                    if (!$util.isString(message.supportedEntityTypes[i]))
                        return "supportedEntityTypes: string[] expected";
            }
            return null;
        };

        /**
         * Creates a ProxyInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.ProxyInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.ProxyInfo} ProxyInfo
         */
        ProxyInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.ProxyInfo)
                return object;
            var message = new $root.cloudstate.ProxyInfo();
            if (object.protocolMajorVersion != null)
                message.protocolMajorVersion = object.protocolMajorVersion | 0;
            if (object.protocolMinorVersion != null)
                message.protocolMinorVersion = object.protocolMinorVersion | 0;
            if (object.proxyName != null)
                message.proxyName = String(object.proxyName);
            if (object.proxyVersion != null)
                message.proxyVersion = String(object.proxyVersion);
            if (object.supportedEntityTypes) {
                if (!Array.isArray(object.supportedEntityTypes))
                    throw TypeError(".cloudstate.ProxyInfo.supportedEntityTypes: array expected");
                message.supportedEntityTypes = [];
                for (var i = 0; i < object.supportedEntityTypes.length; ++i)
                    message.supportedEntityTypes[i] = String(object.supportedEntityTypes[i]);
            }
            return message;
        };

        /**
         * Creates a plain object from a ProxyInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.ProxyInfo
         * @static
         * @param {cloudstate.ProxyInfo} message ProxyInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProxyInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.supportedEntityTypes = [];
            if (options.defaults) {
                object.protocolMajorVersion = 0;
                object.protocolMinorVersion = 0;
                object.proxyName = "";
                object.proxyVersion = "";
            }
            if (message.protocolMajorVersion != null && message.hasOwnProperty("protocolMajorVersion"))
                object.protocolMajorVersion = message.protocolMajorVersion;
            if (message.protocolMinorVersion != null && message.hasOwnProperty("protocolMinorVersion"))
                object.protocolMinorVersion = message.protocolMinorVersion;
            if (message.proxyName != null && message.hasOwnProperty("proxyName"))
                object.proxyName = message.proxyName;
            if (message.proxyVersion != null && message.hasOwnProperty("proxyVersion"))
                object.proxyVersion = message.proxyVersion;
            if (message.supportedEntityTypes && message.supportedEntityTypes.length) {
                object.supportedEntityTypes = [];
                for (var j = 0; j < message.supportedEntityTypes.length; ++j)
                    object.supportedEntityTypes[j] = message.supportedEntityTypes[j];
            }
            return object;
        };

        /**
         * Converts this ProxyInfo to JSON.
         * @function toJSON
         * @memberof cloudstate.ProxyInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProxyInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProxyInfo;
    })();

    cloudstate.EntityDiscovery = (function() {

        /**
         * Constructs a new EntityDiscovery service.
         * @memberof cloudstate
         * @classdesc Represents an EntityDiscovery
         * @extends $protobuf.rpc.Service
         * @constructor
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         */
        function EntityDiscovery(rpcImpl, requestDelimited, responseDelimited) {
            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
        }

        (EntityDiscovery.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = EntityDiscovery;

        /**
         * Creates new EntityDiscovery service using the specified rpc implementation.
         * @function create
         * @memberof cloudstate.EntityDiscovery
         * @static
         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
         * @returns {EntityDiscovery} RPC service. Useful where requests and/or responses are streamed.
         */
        EntityDiscovery.create = function create(rpcImpl, requestDelimited, responseDelimited) {
            return new this(rpcImpl, requestDelimited, responseDelimited);
        };

        /**
         * Callback as used by {@link cloudstate.EntityDiscovery#discover}.
         * @memberof cloudstate.EntityDiscovery
         * @typedef discoverCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {cloudstate.EntitySpec} [response] EntitySpec
         */

        /**
         * Calls discover.
         * @function discover
         * @memberof cloudstate.EntityDiscovery
         * @instance
         * @param {cloudstate.IProxyInfo} request ProxyInfo message or plain object
         * @param {cloudstate.EntityDiscovery.discoverCallback} callback Node-style callback called with the error, if any, and EntitySpec
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(EntityDiscovery.prototype.discover = function discover(request, callback) {
            return this.rpcCall(discover, $root.cloudstate.ProxyInfo, $root.cloudstate.EntitySpec, request, callback);
        }, "name", { value: "discover" });

        /**
         * Calls discover.
         * @function discover
         * @memberof cloudstate.EntityDiscovery
         * @instance
         * @param {cloudstate.IProxyInfo} request ProxyInfo message or plain object
         * @returns {Promise<cloudstate.EntitySpec>} Promise
         * @variation 2
         */

        /**
         * Callback as used by {@link cloudstate.EntityDiscovery#reportError}.
         * @memberof cloudstate.EntityDiscovery
         * @typedef reportErrorCallback
         * @type {function}
         * @param {Error|null} error Error, if any
         * @param {google.protobuf.Empty} [response] Empty
         */

        /**
         * Calls reportError.
         * @function reportError
         * @memberof cloudstate.EntityDiscovery
         * @instance
         * @param {cloudstate.IUserFunctionError} request UserFunctionError message or plain object
         * @param {cloudstate.EntityDiscovery.reportErrorCallback} callback Node-style callback called with the error, if any, and Empty
         * @returns {undefined}
         * @variation 1
         */
        Object.defineProperty(EntityDiscovery.prototype.reportError = function reportError(request, callback) {
            return this.rpcCall(reportError, $root.cloudstate.UserFunctionError, $root.google.protobuf.Empty, request, callback);
        }, "name", { value: "reportError" });

        /**
         * Calls reportError.
         * @function reportError
         * @memberof cloudstate.EntityDiscovery
         * @instance
         * @param {cloudstate.IUserFunctionError} request UserFunctionError message or plain object
         * @returns {Promise<google.protobuf.Empty>} Promise
         * @variation 2
         */

        return EntityDiscovery;
    })();

    cloudstate.Eventing = (function() {

        /**
         * Properties of an Eventing.
         * @memberof cloudstate
         * @interface IEventing
         * @property {string|null} ["in"] Eventing in
         * @property {string|null} [out] Eventing out
         */

        /**
         * Constructs a new Eventing.
         * @memberof cloudstate
         * @classdesc Represents an Eventing.
         * @implements IEventing
         * @constructor
         * @param {cloudstate.IEventing=} [properties] Properties to set
         */
        function Eventing(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Eventing in.
         * @member {string} in
         * @memberof cloudstate.Eventing
         * @instance
         */
        Eventing.prototype["in"] = "";

        /**
         * Eventing out.
         * @member {string} out
         * @memberof cloudstate.Eventing
         * @instance
         */
        Eventing.prototype.out = "";

        /**
         * Creates a new Eventing instance using the specified properties.
         * @function create
         * @memberof cloudstate.Eventing
         * @static
         * @param {cloudstate.IEventing=} [properties] Properties to set
         * @returns {cloudstate.Eventing} Eventing instance
         */
        Eventing.create = function create(properties) {
            return new Eventing(properties);
        };

        /**
         * Encodes the specified Eventing message. Does not implicitly {@link cloudstate.Eventing.verify|verify} messages.
         * @function encode
         * @memberof cloudstate.Eventing
         * @static
         * @param {cloudstate.IEventing} message Eventing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Eventing.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message["in"] != null && message.hasOwnProperty("in"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message["in"]);
            if (message.out != null && message.hasOwnProperty("out"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.out);
            return writer;
        };

        /**
         * Encodes the specified Eventing message, length delimited. Does not implicitly {@link cloudstate.Eventing.verify|verify} messages.
         * @function encodeDelimited
         * @memberof cloudstate.Eventing
         * @static
         * @param {cloudstate.IEventing} message Eventing message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Eventing.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Eventing message from the specified reader or buffer.
         * @function decode
         * @memberof cloudstate.Eventing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {cloudstate.Eventing} Eventing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Eventing.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.Eventing();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message["in"] = reader.string();
                    break;
                case 2:
                    message.out = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Eventing message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof cloudstate.Eventing
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {cloudstate.Eventing} Eventing
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Eventing.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Eventing message.
         * @function verify
         * @memberof cloudstate.Eventing
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Eventing.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message["in"] != null && message.hasOwnProperty("in"))
                if (!$util.isString(message["in"]))
                    return "in: string expected";
            if (message.out != null && message.hasOwnProperty("out"))
                if (!$util.isString(message.out))
                    return "out: string expected";
            return null;
        };

        /**
         * Creates an Eventing message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof cloudstate.Eventing
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {cloudstate.Eventing} Eventing
         */
        Eventing.fromObject = function fromObject(object) {
            if (object instanceof $root.cloudstate.Eventing)
                return object;
            var message = new $root.cloudstate.Eventing();
            if (object["in"] != null)
                message["in"] = String(object["in"]);
            if (object.out != null)
                message.out = String(object.out);
            return message;
        };

        /**
         * Creates a plain object from an Eventing message. Also converts values to other types if specified.
         * @function toObject
         * @memberof cloudstate.Eventing
         * @static
         * @param {cloudstate.Eventing} message Eventing
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Eventing.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object["in"] = "";
                object.out = "";
            }
            if (message["in"] != null && message.hasOwnProperty("in"))
                object["in"] = message["in"];
            if (message.out != null && message.hasOwnProperty("out"))
                object.out = message.out;
            return object;
        };

        /**
         * Converts this Eventing to JSON.
         * @function toJSON
         * @memberof cloudstate.Eventing
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Eventing.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Eventing;
    })();

    cloudstate.eventsourced = (function() {

        /**
         * Namespace eventsourced.
         * @memberof cloudstate
         * @namespace
         */
        var eventsourced = {};

        eventsourced.EventSourcedInit = (function() {

            /**
             * Properties of an EventSourcedInit.
             * @memberof cloudstate.eventsourced
             * @interface IEventSourcedInit
             * @property {string|null} [serviceName] EventSourcedInit serviceName
             * @property {string|null} [entityId] EventSourcedInit entityId
             * @property {cloudstate.eventsourced.IEventSourcedSnapshot|null} [snapshot] EventSourcedInit snapshot
             */

            /**
             * Constructs a new EventSourcedInit.
             * @memberof cloudstate.eventsourced
             * @classdesc Represents an EventSourcedInit.
             * @implements IEventSourcedInit
             * @constructor
             * @param {cloudstate.eventsourced.IEventSourcedInit=} [properties] Properties to set
             */
            function EventSourcedInit(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSourcedInit serviceName.
             * @member {string} serviceName
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @instance
             */
            EventSourcedInit.prototype.serviceName = "";

            /**
             * EventSourcedInit entityId.
             * @member {string} entityId
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @instance
             */
            EventSourcedInit.prototype.entityId = "";

            /**
             * EventSourcedInit snapshot.
             * @member {cloudstate.eventsourced.IEventSourcedSnapshot|null|undefined} snapshot
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @instance
             */
            EventSourcedInit.prototype.snapshot = null;

            /**
             * Creates a new EventSourcedInit instance using the specified properties.
             * @function create
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedInit=} [properties] Properties to set
             * @returns {cloudstate.eventsourced.EventSourcedInit} EventSourcedInit instance
             */
            EventSourcedInit.create = function create(properties) {
                return new EventSourcedInit(properties);
            };

            /**
             * Encodes the specified EventSourcedInit message. Does not implicitly {@link cloudstate.eventsourced.EventSourcedInit.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedInit} message EventSourcedInit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedInit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);
                if (message.entityId != null && message.hasOwnProperty("entityId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.entityId);
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    $root.cloudstate.eventsourced.EventSourcedSnapshot.encode(message.snapshot, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EventSourcedInit message, length delimited. Does not implicitly {@link cloudstate.eventsourced.EventSourcedInit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedInit} message EventSourcedInit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedInit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSourcedInit message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.eventsourced.EventSourcedInit} EventSourcedInit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedInit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.eventsourced.EventSourcedInit();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.serviceName = reader.string();
                        break;
                    case 2:
                        message.entityId = reader.string();
                        break;
                    case 3:
                        message.snapshot = $root.cloudstate.eventsourced.EventSourcedSnapshot.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSourcedInit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.eventsourced.EventSourcedInit} EventSourcedInit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedInit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSourcedInit message.
             * @function verify
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSourcedInit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    if (!$util.isString(message.serviceName))
                        return "serviceName: string expected";
                if (message.entityId != null && message.hasOwnProperty("entityId"))
                    if (!$util.isString(message.entityId))
                        return "entityId: string expected";
                if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                    var error = $root.cloudstate.eventsourced.EventSourcedSnapshot.verify(message.snapshot);
                    if (error)
                        return "snapshot." + error;
                }
                return null;
            };

            /**
             * Creates an EventSourcedInit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.eventsourced.EventSourcedInit} EventSourcedInit
             */
            EventSourcedInit.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.eventsourced.EventSourcedInit)
                    return object;
                var message = new $root.cloudstate.eventsourced.EventSourcedInit();
                if (object.serviceName != null)
                    message.serviceName = String(object.serviceName);
                if (object.entityId != null)
                    message.entityId = String(object.entityId);
                if (object.snapshot != null) {
                    if (typeof object.snapshot !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedInit.snapshot: object expected");
                    message.snapshot = $root.cloudstate.eventsourced.EventSourcedSnapshot.fromObject(object.snapshot);
                }
                return message;
            };

            /**
             * Creates a plain object from an EventSourcedInit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @static
             * @param {cloudstate.eventsourced.EventSourcedInit} message EventSourcedInit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSourcedInit.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.serviceName = "";
                    object.entityId = "";
                    object.snapshot = null;
                }
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    object.serviceName = message.serviceName;
                if (message.entityId != null && message.hasOwnProperty("entityId"))
                    object.entityId = message.entityId;
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    object.snapshot = $root.cloudstate.eventsourced.EventSourcedSnapshot.toObject(message.snapshot, options);
                return object;
            };

            /**
             * Converts this EventSourcedInit to JSON.
             * @function toJSON
             * @memberof cloudstate.eventsourced.EventSourcedInit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSourcedInit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSourcedInit;
        })();

        eventsourced.EventSourcedSnapshot = (function() {

            /**
             * Properties of an EventSourcedSnapshot.
             * @memberof cloudstate.eventsourced
             * @interface IEventSourcedSnapshot
             * @property {number|Long|null} [snapshotSequence] EventSourcedSnapshot snapshotSequence
             * @property {google.protobuf.IAny|null} [snapshot] EventSourcedSnapshot snapshot
             */

            /**
             * Constructs a new EventSourcedSnapshot.
             * @memberof cloudstate.eventsourced
             * @classdesc Represents an EventSourcedSnapshot.
             * @implements IEventSourcedSnapshot
             * @constructor
             * @param {cloudstate.eventsourced.IEventSourcedSnapshot=} [properties] Properties to set
             */
            function EventSourcedSnapshot(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSourcedSnapshot snapshotSequence.
             * @member {number|Long} snapshotSequence
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @instance
             */
            EventSourcedSnapshot.prototype.snapshotSequence = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EventSourcedSnapshot snapshot.
             * @member {google.protobuf.IAny|null|undefined} snapshot
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @instance
             */
            EventSourcedSnapshot.prototype.snapshot = null;

            /**
             * Creates a new EventSourcedSnapshot instance using the specified properties.
             * @function create
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedSnapshot=} [properties] Properties to set
             * @returns {cloudstate.eventsourced.EventSourcedSnapshot} EventSourcedSnapshot instance
             */
            EventSourcedSnapshot.create = function create(properties) {
                return new EventSourcedSnapshot(properties);
            };

            /**
             * Encodes the specified EventSourcedSnapshot message. Does not implicitly {@link cloudstate.eventsourced.EventSourcedSnapshot.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedSnapshot} message EventSourcedSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedSnapshot.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.snapshotSequence != null && message.hasOwnProperty("snapshotSequence"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.snapshotSequence);
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    $root.google.protobuf.Any.encode(message.snapshot, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EventSourcedSnapshot message, length delimited. Does not implicitly {@link cloudstate.eventsourced.EventSourcedSnapshot.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedSnapshot} message EventSourcedSnapshot message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSourcedSnapshot message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.eventsourced.EventSourcedSnapshot} EventSourcedSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedSnapshot.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.eventsourced.EventSourcedSnapshot();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.snapshotSequence = reader.int64();
                        break;
                    case 2:
                        message.snapshot = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSourcedSnapshot message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.eventsourced.EventSourcedSnapshot} EventSourcedSnapshot
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedSnapshot.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSourcedSnapshot message.
             * @function verify
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSourcedSnapshot.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.snapshotSequence != null && message.hasOwnProperty("snapshotSequence"))
                    if (!$util.isInteger(message.snapshotSequence) && !(message.snapshotSequence && $util.isInteger(message.snapshotSequence.low) && $util.isInteger(message.snapshotSequence.high)))
                        return "snapshotSequence: integer|Long expected";
                if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                    var error = $root.google.protobuf.Any.verify(message.snapshot);
                    if (error)
                        return "snapshot." + error;
                }
                return null;
            };

            /**
             * Creates an EventSourcedSnapshot message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.eventsourced.EventSourcedSnapshot} EventSourcedSnapshot
             */
            EventSourcedSnapshot.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.eventsourced.EventSourcedSnapshot)
                    return object;
                var message = new $root.cloudstate.eventsourced.EventSourcedSnapshot();
                if (object.snapshotSequence != null)
                    if ($util.Long)
                        (message.snapshotSequence = $util.Long.fromValue(object.snapshotSequence)).unsigned = false;
                    else if (typeof object.snapshotSequence === "string")
                        message.snapshotSequence = parseInt(object.snapshotSequence, 10);
                    else if (typeof object.snapshotSequence === "number")
                        message.snapshotSequence = object.snapshotSequence;
                    else if (typeof object.snapshotSequence === "object")
                        message.snapshotSequence = new $util.LongBits(object.snapshotSequence.low >>> 0, object.snapshotSequence.high >>> 0).toNumber();
                if (object.snapshot != null) {
                    if (typeof object.snapshot !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedSnapshot.snapshot: object expected");
                    message.snapshot = $root.google.protobuf.Any.fromObject(object.snapshot);
                }
                return message;
            };

            /**
             * Creates a plain object from an EventSourcedSnapshot message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @static
             * @param {cloudstate.eventsourced.EventSourcedSnapshot} message EventSourcedSnapshot
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSourcedSnapshot.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.snapshotSequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.snapshotSequence = options.longs === String ? "0" : 0;
                    object.snapshot = null;
                }
                if (message.snapshotSequence != null && message.hasOwnProperty("snapshotSequence"))
                    if (typeof message.snapshotSequence === "number")
                        object.snapshotSequence = options.longs === String ? String(message.snapshotSequence) : message.snapshotSequence;
                    else
                        object.snapshotSequence = options.longs === String ? $util.Long.prototype.toString.call(message.snapshotSequence) : options.longs === Number ? new $util.LongBits(message.snapshotSequence.low >>> 0, message.snapshotSequence.high >>> 0).toNumber() : message.snapshotSequence;
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    object.snapshot = $root.google.protobuf.Any.toObject(message.snapshot, options);
                return object;
            };

            /**
             * Converts this EventSourcedSnapshot to JSON.
             * @function toJSON
             * @memberof cloudstate.eventsourced.EventSourcedSnapshot
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSourcedSnapshot.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSourcedSnapshot;
        })();

        eventsourced.EventSourcedEvent = (function() {

            /**
             * Properties of an EventSourcedEvent.
             * @memberof cloudstate.eventsourced
             * @interface IEventSourcedEvent
             * @property {number|Long|null} [sequence] EventSourcedEvent sequence
             * @property {google.protobuf.IAny|null} [payload] EventSourcedEvent payload
             */

            /**
             * Constructs a new EventSourcedEvent.
             * @memberof cloudstate.eventsourced
             * @classdesc Represents an EventSourcedEvent.
             * @implements IEventSourcedEvent
             * @constructor
             * @param {cloudstate.eventsourced.IEventSourcedEvent=} [properties] Properties to set
             */
            function EventSourcedEvent(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSourcedEvent sequence.
             * @member {number|Long} sequence
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @instance
             */
            EventSourcedEvent.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EventSourcedEvent payload.
             * @member {google.protobuf.IAny|null|undefined} payload
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @instance
             */
            EventSourcedEvent.prototype.payload = null;

            /**
             * Creates a new EventSourcedEvent instance using the specified properties.
             * @function create
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedEvent=} [properties] Properties to set
             * @returns {cloudstate.eventsourced.EventSourcedEvent} EventSourcedEvent instance
             */
            EventSourcedEvent.create = function create(properties) {
                return new EventSourcedEvent(properties);
            };

            /**
             * Encodes the specified EventSourcedEvent message. Does not implicitly {@link cloudstate.eventsourced.EventSourcedEvent.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedEvent} message EventSourcedEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedEvent.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sequence != null && message.hasOwnProperty("sequence"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.sequence);
                if (message.payload != null && message.hasOwnProperty("payload"))
                    $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EventSourcedEvent message, length delimited. Does not implicitly {@link cloudstate.eventsourced.EventSourcedEvent.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedEvent} message EventSourcedEvent message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedEvent.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSourcedEvent message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.eventsourced.EventSourcedEvent} EventSourcedEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedEvent.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.eventsourced.EventSourcedEvent();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.sequence = reader.int64();
                        break;
                    case 2:
                        message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSourcedEvent message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.eventsourced.EventSourcedEvent} EventSourcedEvent
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedEvent.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSourcedEvent message.
             * @function verify
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSourcedEvent.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sequence != null && message.hasOwnProperty("sequence"))
                    if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                        return "sequence: integer|Long expected";
                if (message.payload != null && message.hasOwnProperty("payload")) {
                    var error = $root.google.protobuf.Any.verify(message.payload);
                    if (error)
                        return "payload." + error;
                }
                return null;
            };

            /**
             * Creates an EventSourcedEvent message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.eventsourced.EventSourcedEvent} EventSourcedEvent
             */
            EventSourcedEvent.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.eventsourced.EventSourcedEvent)
                    return object;
                var message = new $root.cloudstate.eventsourced.EventSourcedEvent();
                if (object.sequence != null)
                    if ($util.Long)
                        (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = false;
                    else if (typeof object.sequence === "string")
                        message.sequence = parseInt(object.sequence, 10);
                    else if (typeof object.sequence === "number")
                        message.sequence = object.sequence;
                    else if (typeof object.sequence === "object")
                        message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber();
                if (object.payload != null) {
                    if (typeof object.payload !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedEvent.payload: object expected");
                    message.payload = $root.google.protobuf.Any.fromObject(object.payload);
                }
                return message;
            };

            /**
             * Creates a plain object from an EventSourcedEvent message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @static
             * @param {cloudstate.eventsourced.EventSourcedEvent} message EventSourcedEvent
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSourcedEvent.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.sequence = options.longs === String ? "0" : 0;
                    object.payload = null;
                }
                if (message.sequence != null && message.hasOwnProperty("sequence"))
                    if (typeof message.sequence === "number")
                        object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                    else
                        object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber() : message.sequence;
                if (message.payload != null && message.hasOwnProperty("payload"))
                    object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
                return object;
            };

            /**
             * Converts this EventSourcedEvent to JSON.
             * @function toJSON
             * @memberof cloudstate.eventsourced.EventSourcedEvent
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSourcedEvent.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSourcedEvent;
        })();

        eventsourced.EventSourcedReply = (function() {

            /**
             * Properties of an EventSourcedReply.
             * @memberof cloudstate.eventsourced
             * @interface IEventSourcedReply
             * @property {number|Long|null} [commandId] EventSourcedReply commandId
             * @property {cloudstate.IClientAction|null} [clientAction] EventSourcedReply clientAction
             * @property {Array.<cloudstate.ISideEffect>|null} [sideEffects] EventSourcedReply sideEffects
             * @property {Array.<google.protobuf.IAny>|null} [events] EventSourcedReply events
             * @property {google.protobuf.IAny|null} [snapshot] EventSourcedReply snapshot
             */

            /**
             * Constructs a new EventSourcedReply.
             * @memberof cloudstate.eventsourced
             * @classdesc Represents an EventSourcedReply.
             * @implements IEventSourcedReply
             * @constructor
             * @param {cloudstate.eventsourced.IEventSourcedReply=} [properties] Properties to set
             */
            function EventSourcedReply(properties) {
                this.sideEffects = [];
                this.events = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSourcedReply commandId.
             * @member {number|Long} commandId
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @instance
             */
            EventSourcedReply.prototype.commandId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * EventSourcedReply clientAction.
             * @member {cloudstate.IClientAction|null|undefined} clientAction
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @instance
             */
            EventSourcedReply.prototype.clientAction = null;

            /**
             * EventSourcedReply sideEffects.
             * @member {Array.<cloudstate.ISideEffect>} sideEffects
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @instance
             */
            EventSourcedReply.prototype.sideEffects = $util.emptyArray;

            /**
             * EventSourcedReply events.
             * @member {Array.<google.protobuf.IAny>} events
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @instance
             */
            EventSourcedReply.prototype.events = $util.emptyArray;

            /**
             * EventSourcedReply snapshot.
             * @member {google.protobuf.IAny|null|undefined} snapshot
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @instance
             */
            EventSourcedReply.prototype.snapshot = null;

            /**
             * Creates a new EventSourcedReply instance using the specified properties.
             * @function create
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedReply=} [properties] Properties to set
             * @returns {cloudstate.eventsourced.EventSourcedReply} EventSourcedReply instance
             */
            EventSourcedReply.create = function create(properties) {
                return new EventSourcedReply(properties);
            };

            /**
             * Encodes the specified EventSourcedReply message. Does not implicitly {@link cloudstate.eventsourced.EventSourcedReply.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedReply} message EventSourcedReply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedReply.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.commandId);
                if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                    $root.cloudstate.ClientAction.encode(message.clientAction, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.sideEffects != null && message.sideEffects.length)
                    for (var i = 0; i < message.sideEffects.length; ++i)
                        $root.cloudstate.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.events != null && message.events.length)
                    for (var i = 0; i < message.events.length; ++i)
                        $root.google.protobuf.Any.encode(message.events[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    $root.google.protobuf.Any.encode(message.snapshot, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EventSourcedReply message, length delimited. Does not implicitly {@link cloudstate.eventsourced.EventSourcedReply.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedReply} message EventSourcedReply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedReply.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSourcedReply message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.eventsourced.EventSourcedReply} EventSourcedReply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedReply.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.eventsourced.EventSourcedReply();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.commandId = reader.int64();
                        break;
                    case 2:
                        message.clientAction = $root.cloudstate.ClientAction.decode(reader, reader.uint32());
                        break;
                    case 3:
                        if (!(message.sideEffects && message.sideEffects.length))
                            message.sideEffects = [];
                        message.sideEffects.push($root.cloudstate.SideEffect.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.events && message.events.length))
                            message.events = [];
                        message.events.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        message.snapshot = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSourcedReply message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.eventsourced.EventSourcedReply} EventSourcedReply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedReply.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSourcedReply message.
             * @function verify
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSourcedReply.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (!$util.isInteger(message.commandId) && !(message.commandId && $util.isInteger(message.commandId.low) && $util.isInteger(message.commandId.high)))
                        return "commandId: integer|Long expected";
                if (message.clientAction != null && message.hasOwnProperty("clientAction")) {
                    var error = $root.cloudstate.ClientAction.verify(message.clientAction);
                    if (error)
                        return "clientAction." + error;
                }
                if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                    if (!Array.isArray(message.sideEffects))
                        return "sideEffects: array expected";
                    for (var i = 0; i < message.sideEffects.length; ++i) {
                        var error = $root.cloudstate.SideEffect.verify(message.sideEffects[i]);
                        if (error)
                            return "sideEffects." + error;
                    }
                }
                if (message.events != null && message.hasOwnProperty("events")) {
                    if (!Array.isArray(message.events))
                        return "events: array expected";
                    for (var i = 0; i < message.events.length; ++i) {
                        var error = $root.google.protobuf.Any.verify(message.events[i]);
                        if (error)
                            return "events." + error;
                    }
                }
                if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                    var error = $root.google.protobuf.Any.verify(message.snapshot);
                    if (error)
                        return "snapshot." + error;
                }
                return null;
            };

            /**
             * Creates an EventSourcedReply message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.eventsourced.EventSourcedReply} EventSourcedReply
             */
            EventSourcedReply.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.eventsourced.EventSourcedReply)
                    return object;
                var message = new $root.cloudstate.eventsourced.EventSourcedReply();
                if (object.commandId != null)
                    if ($util.Long)
                        (message.commandId = $util.Long.fromValue(object.commandId)).unsigned = false;
                    else if (typeof object.commandId === "string")
                        message.commandId = parseInt(object.commandId, 10);
                    else if (typeof object.commandId === "number")
                        message.commandId = object.commandId;
                    else if (typeof object.commandId === "object")
                        message.commandId = new $util.LongBits(object.commandId.low >>> 0, object.commandId.high >>> 0).toNumber();
                if (object.clientAction != null) {
                    if (typeof object.clientAction !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedReply.clientAction: object expected");
                    message.clientAction = $root.cloudstate.ClientAction.fromObject(object.clientAction);
                }
                if (object.sideEffects) {
                    if (!Array.isArray(object.sideEffects))
                        throw TypeError(".cloudstate.eventsourced.EventSourcedReply.sideEffects: array expected");
                    message.sideEffects = [];
                    for (var i = 0; i < object.sideEffects.length; ++i) {
                        if (typeof object.sideEffects[i] !== "object")
                            throw TypeError(".cloudstate.eventsourced.EventSourcedReply.sideEffects: object expected");
                        message.sideEffects[i] = $root.cloudstate.SideEffect.fromObject(object.sideEffects[i]);
                    }
                }
                if (object.events) {
                    if (!Array.isArray(object.events))
                        throw TypeError(".cloudstate.eventsourced.EventSourcedReply.events: array expected");
                    message.events = [];
                    for (var i = 0; i < object.events.length; ++i) {
                        if (typeof object.events[i] !== "object")
                            throw TypeError(".cloudstate.eventsourced.EventSourcedReply.events: object expected");
                        message.events[i] = $root.google.protobuf.Any.fromObject(object.events[i]);
                    }
                }
                if (object.snapshot != null) {
                    if (typeof object.snapshot !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedReply.snapshot: object expected");
                    message.snapshot = $root.google.protobuf.Any.fromObject(object.snapshot);
                }
                return message;
            };

            /**
             * Creates a plain object from an EventSourcedReply message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @static
             * @param {cloudstate.eventsourced.EventSourcedReply} message EventSourcedReply
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSourcedReply.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.sideEffects = [];
                    object.events = [];
                }
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.commandId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.commandId = options.longs === String ? "0" : 0;
                    object.clientAction = null;
                    object.snapshot = null;
                }
                if (message.commandId != null && message.hasOwnProperty("commandId"))
                    if (typeof message.commandId === "number")
                        object.commandId = options.longs === String ? String(message.commandId) : message.commandId;
                    else
                        object.commandId = options.longs === String ? $util.Long.prototype.toString.call(message.commandId) : options.longs === Number ? new $util.LongBits(message.commandId.low >>> 0, message.commandId.high >>> 0).toNumber() : message.commandId;
                if (message.clientAction != null && message.hasOwnProperty("clientAction"))
                    object.clientAction = $root.cloudstate.ClientAction.toObject(message.clientAction, options);
                if (message.sideEffects && message.sideEffects.length) {
                    object.sideEffects = [];
                    for (var j = 0; j < message.sideEffects.length; ++j)
                        object.sideEffects[j] = $root.cloudstate.SideEffect.toObject(message.sideEffects[j], options);
                }
                if (message.events && message.events.length) {
                    object.events = [];
                    for (var j = 0; j < message.events.length; ++j)
                        object.events[j] = $root.google.protobuf.Any.toObject(message.events[j], options);
                }
                if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                    object.snapshot = $root.google.protobuf.Any.toObject(message.snapshot, options);
                return object;
            };

            /**
             * Converts this EventSourcedReply to JSON.
             * @function toJSON
             * @memberof cloudstate.eventsourced.EventSourcedReply
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSourcedReply.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSourcedReply;
        })();

        eventsourced.EventSourcedStreamIn = (function() {

            /**
             * Properties of an EventSourcedStreamIn.
             * @memberof cloudstate.eventsourced
             * @interface IEventSourcedStreamIn
             * @property {cloudstate.eventsourced.IEventSourcedInit|null} [init] EventSourcedStreamIn init
             * @property {cloudstate.eventsourced.IEventSourcedEvent|null} [event] EventSourcedStreamIn event
             * @property {cloudstate.ICommand|null} [command] EventSourcedStreamIn command
             */

            /**
             * Constructs a new EventSourcedStreamIn.
             * @memberof cloudstate.eventsourced
             * @classdesc Represents an EventSourcedStreamIn.
             * @implements IEventSourcedStreamIn
             * @constructor
             * @param {cloudstate.eventsourced.IEventSourcedStreamIn=} [properties] Properties to set
             */
            function EventSourcedStreamIn(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSourcedStreamIn init.
             * @member {cloudstate.eventsourced.IEventSourcedInit|null|undefined} init
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @instance
             */
            EventSourcedStreamIn.prototype.init = null;

            /**
             * EventSourcedStreamIn event.
             * @member {cloudstate.eventsourced.IEventSourcedEvent|null|undefined} event
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @instance
             */
            EventSourcedStreamIn.prototype.event = null;

            /**
             * EventSourcedStreamIn command.
             * @member {cloudstate.ICommand|null|undefined} command
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @instance
             */
            EventSourcedStreamIn.prototype.command = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * EventSourcedStreamIn message.
             * @member {"init"|"event"|"command"|undefined} message
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @instance
             */
            Object.defineProperty(EventSourcedStreamIn.prototype, "message", {
                get: $util.oneOfGetter($oneOfFields = ["init", "event", "command"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new EventSourcedStreamIn instance using the specified properties.
             * @function create
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedStreamIn=} [properties] Properties to set
             * @returns {cloudstate.eventsourced.EventSourcedStreamIn} EventSourcedStreamIn instance
             */
            EventSourcedStreamIn.create = function create(properties) {
                return new EventSourcedStreamIn(properties);
            };

            /**
             * Encodes the specified EventSourcedStreamIn message. Does not implicitly {@link cloudstate.eventsourced.EventSourcedStreamIn.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedStreamIn} message EventSourcedStreamIn message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedStreamIn.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.init != null && message.hasOwnProperty("init"))
                    $root.cloudstate.eventsourced.EventSourcedInit.encode(message.init, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.event != null && message.hasOwnProperty("event"))
                    $root.cloudstate.eventsourced.EventSourcedEvent.encode(message.event, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.command != null && message.hasOwnProperty("command"))
                    $root.cloudstate.Command.encode(message.command, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EventSourcedStreamIn message, length delimited. Does not implicitly {@link cloudstate.eventsourced.EventSourcedStreamIn.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedStreamIn} message EventSourcedStreamIn message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedStreamIn.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSourcedStreamIn message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.eventsourced.EventSourcedStreamIn} EventSourcedStreamIn
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedStreamIn.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.eventsourced.EventSourcedStreamIn();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.init = $root.cloudstate.eventsourced.EventSourcedInit.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.event = $root.cloudstate.eventsourced.EventSourcedEvent.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.command = $root.cloudstate.Command.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSourcedStreamIn message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.eventsourced.EventSourcedStreamIn} EventSourcedStreamIn
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedStreamIn.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSourcedStreamIn message.
             * @function verify
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSourcedStreamIn.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.init != null && message.hasOwnProperty("init")) {
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.eventsourced.EventSourcedInit.verify(message.init);
                        if (error)
                            return "init." + error;
                    }
                }
                if (message.event != null && message.hasOwnProperty("event")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.eventsourced.EventSourcedEvent.verify(message.event);
                        if (error)
                            return "event." + error;
                    }
                }
                if (message.command != null && message.hasOwnProperty("command")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.Command.verify(message.command);
                        if (error)
                            return "command." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EventSourcedStreamIn message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.eventsourced.EventSourcedStreamIn} EventSourcedStreamIn
             */
            EventSourcedStreamIn.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.eventsourced.EventSourcedStreamIn)
                    return object;
                var message = new $root.cloudstate.eventsourced.EventSourcedStreamIn();
                if (object.init != null) {
                    if (typeof object.init !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedStreamIn.init: object expected");
                    message.init = $root.cloudstate.eventsourced.EventSourcedInit.fromObject(object.init);
                }
                if (object.event != null) {
                    if (typeof object.event !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedStreamIn.event: object expected");
                    message.event = $root.cloudstate.eventsourced.EventSourcedEvent.fromObject(object.event);
                }
                if (object.command != null) {
                    if (typeof object.command !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedStreamIn.command: object expected");
                    message.command = $root.cloudstate.Command.fromObject(object.command);
                }
                return message;
            };

            /**
             * Creates a plain object from an EventSourcedStreamIn message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @static
             * @param {cloudstate.eventsourced.EventSourcedStreamIn} message EventSourcedStreamIn
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSourcedStreamIn.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.init != null && message.hasOwnProperty("init")) {
                    object.init = $root.cloudstate.eventsourced.EventSourcedInit.toObject(message.init, options);
                    if (options.oneofs)
                        object.message = "init";
                }
                if (message.event != null && message.hasOwnProperty("event")) {
                    object.event = $root.cloudstate.eventsourced.EventSourcedEvent.toObject(message.event, options);
                    if (options.oneofs)
                        object.message = "event";
                }
                if (message.command != null && message.hasOwnProperty("command")) {
                    object.command = $root.cloudstate.Command.toObject(message.command, options);
                    if (options.oneofs)
                        object.message = "command";
                }
                return object;
            };

            /**
             * Converts this EventSourcedStreamIn to JSON.
             * @function toJSON
             * @memberof cloudstate.eventsourced.EventSourcedStreamIn
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSourcedStreamIn.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSourcedStreamIn;
        })();

        eventsourced.EventSourcedStreamOut = (function() {

            /**
             * Properties of an EventSourcedStreamOut.
             * @memberof cloudstate.eventsourced
             * @interface IEventSourcedStreamOut
             * @property {cloudstate.eventsourced.IEventSourcedReply|null} [reply] EventSourcedStreamOut reply
             * @property {cloudstate.IFailure|null} [failure] EventSourcedStreamOut failure
             */

            /**
             * Constructs a new EventSourcedStreamOut.
             * @memberof cloudstate.eventsourced
             * @classdesc Represents an EventSourcedStreamOut.
             * @implements IEventSourcedStreamOut
             * @constructor
             * @param {cloudstate.eventsourced.IEventSourcedStreamOut=} [properties] Properties to set
             */
            function EventSourcedStreamOut(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EventSourcedStreamOut reply.
             * @member {cloudstate.eventsourced.IEventSourcedReply|null|undefined} reply
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @instance
             */
            EventSourcedStreamOut.prototype.reply = null;

            /**
             * EventSourcedStreamOut failure.
             * @member {cloudstate.IFailure|null|undefined} failure
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @instance
             */
            EventSourcedStreamOut.prototype.failure = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * EventSourcedStreamOut message.
             * @member {"reply"|"failure"|undefined} message
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @instance
             */
            Object.defineProperty(EventSourcedStreamOut.prototype, "message", {
                get: $util.oneOfGetter($oneOfFields = ["reply", "failure"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new EventSourcedStreamOut instance using the specified properties.
             * @function create
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedStreamOut=} [properties] Properties to set
             * @returns {cloudstate.eventsourced.EventSourcedStreamOut} EventSourcedStreamOut instance
             */
            EventSourcedStreamOut.create = function create(properties) {
                return new EventSourcedStreamOut(properties);
            };

            /**
             * Encodes the specified EventSourcedStreamOut message. Does not implicitly {@link cloudstate.eventsourced.EventSourcedStreamOut.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedStreamOut} message EventSourcedStreamOut message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedStreamOut.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.reply != null && message.hasOwnProperty("reply"))
                    $root.cloudstate.eventsourced.EventSourcedReply.encode(message.reply, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.failure != null && message.hasOwnProperty("failure"))
                    $root.cloudstate.Failure.encode(message.failure, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EventSourcedStreamOut message, length delimited. Does not implicitly {@link cloudstate.eventsourced.EventSourcedStreamOut.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @static
             * @param {cloudstate.eventsourced.IEventSourcedStreamOut} message EventSourcedStreamOut message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EventSourcedStreamOut.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EventSourcedStreamOut message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.eventsourced.EventSourcedStreamOut} EventSourcedStreamOut
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedStreamOut.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.eventsourced.EventSourcedStreamOut();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.reply = $root.cloudstate.eventsourced.EventSourcedReply.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.failure = $root.cloudstate.Failure.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EventSourcedStreamOut message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.eventsourced.EventSourcedStreamOut} EventSourcedStreamOut
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EventSourcedStreamOut.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EventSourcedStreamOut message.
             * @function verify
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EventSourcedStreamOut.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.reply != null && message.hasOwnProperty("reply")) {
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.eventsourced.EventSourcedReply.verify(message.reply);
                        if (error)
                            return "reply." + error;
                    }
                }
                if (message.failure != null && message.hasOwnProperty("failure")) {
                    if (properties.message === 1)
                        return "message: multiple values";
                    properties.message = 1;
                    {
                        var error = $root.cloudstate.Failure.verify(message.failure);
                        if (error)
                            return "failure." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EventSourcedStreamOut message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.eventsourced.EventSourcedStreamOut} EventSourcedStreamOut
             */
            EventSourcedStreamOut.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.eventsourced.EventSourcedStreamOut)
                    return object;
                var message = new $root.cloudstate.eventsourced.EventSourcedStreamOut();
                if (object.reply != null) {
                    if (typeof object.reply !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedStreamOut.reply: object expected");
                    message.reply = $root.cloudstate.eventsourced.EventSourcedReply.fromObject(object.reply);
                }
                if (object.failure != null) {
                    if (typeof object.failure !== "object")
                        throw TypeError(".cloudstate.eventsourced.EventSourcedStreamOut.failure: object expected");
                    message.failure = $root.cloudstate.Failure.fromObject(object.failure);
                }
                return message;
            };

            /**
             * Creates a plain object from an EventSourcedStreamOut message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @static
             * @param {cloudstate.eventsourced.EventSourcedStreamOut} message EventSourcedStreamOut
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EventSourcedStreamOut.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.reply != null && message.hasOwnProperty("reply")) {
                    object.reply = $root.cloudstate.eventsourced.EventSourcedReply.toObject(message.reply, options);
                    if (options.oneofs)
                        object.message = "reply";
                }
                if (message.failure != null && message.hasOwnProperty("failure")) {
                    object.failure = $root.cloudstate.Failure.toObject(message.failure, options);
                    if (options.oneofs)
                        object.message = "failure";
                }
                return object;
            };

            /**
             * Converts this EventSourcedStreamOut to JSON.
             * @function toJSON
             * @memberof cloudstate.eventsourced.EventSourcedStreamOut
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EventSourcedStreamOut.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EventSourcedStreamOut;
        })();

        eventsourced.EventSourced = (function() {

            /**
             * Constructs a new EventSourced service.
             * @memberof cloudstate.eventsourced
             * @classdesc Represents an EventSourced
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function EventSourced(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (EventSourced.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = EventSourced;

            /**
             * Creates new EventSourced service using the specified rpc implementation.
             * @function create
             * @memberof cloudstate.eventsourced.EventSourced
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {EventSourced} RPC service. Useful where requests and/or responses are streamed.
             */
            EventSourced.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link cloudstate.eventsourced.EventSourced#handle}.
             * @memberof cloudstate.eventsourced.EventSourced
             * @typedef handleCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {cloudstate.eventsourced.EventSourcedStreamOut} [response] EventSourcedStreamOut
             */

            /**
             * Calls handle.
             * @function handle
             * @memberof cloudstate.eventsourced.EventSourced
             * @instance
             * @param {cloudstate.eventsourced.IEventSourcedStreamIn} request EventSourcedStreamIn message or plain object
             * @param {cloudstate.eventsourced.EventSourced.handleCallback} callback Node-style callback called with the error, if any, and EventSourcedStreamOut
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(EventSourced.prototype.handle = function handle(request, callback) {
                return this.rpcCall(handle, $root.cloudstate.eventsourced.EventSourcedStreamIn, $root.cloudstate.eventsourced.EventSourcedStreamOut, request, callback);
            }, "name", { value: "handle" });

            /**
             * Calls handle.
             * @function handle
             * @memberof cloudstate.eventsourced.EventSourced
             * @instance
             * @param {cloudstate.eventsourced.IEventSourcedStreamIn} request EventSourcedStreamIn message or plain object
             * @returns {Promise<cloudstate.eventsourced.EventSourcedStreamOut>} Promise
             * @variation 2
             */

            return EventSourced;
        })();

        return eventsourced;
    })();

    cloudstate.function_ = (function() {

        /**
         * Namespace function.
         * @memberof cloudstate
         * @namespace
         */
        var function_ = {};

        function_.FunctionCommand = (function() {

            /**
             * Properties of a FunctionCommand.
             * @memberof cloudstate.function_
             * @interface IFunctionCommand
             * @property {string|null} [serviceName] FunctionCommand serviceName
             * @property {string|null} [name] FunctionCommand name
             * @property {google.protobuf.IAny|null} [payload] FunctionCommand payload
             */

            /**
             * Constructs a new FunctionCommand.
             * @memberof cloudstate.function_
             * @classdesc Represents a FunctionCommand.
             * @implements IFunctionCommand
             * @constructor
             * @param {cloudstate.function_.IFunctionCommand=} [properties] Properties to set
             */
            function FunctionCommand(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FunctionCommand serviceName.
             * @member {string} serviceName
             * @memberof cloudstate.function_.FunctionCommand
             * @instance
             */
            FunctionCommand.prototype.serviceName = "";

            /**
             * FunctionCommand name.
             * @member {string} name
             * @memberof cloudstate.function_.FunctionCommand
             * @instance
             */
            FunctionCommand.prototype.name = "";

            /**
             * FunctionCommand payload.
             * @member {google.protobuf.IAny|null|undefined} payload
             * @memberof cloudstate.function_.FunctionCommand
             * @instance
             */
            FunctionCommand.prototype.payload = null;

            /**
             * Creates a new FunctionCommand instance using the specified properties.
             * @function create
             * @memberof cloudstate.function_.FunctionCommand
             * @static
             * @param {cloudstate.function_.IFunctionCommand=} [properties] Properties to set
             * @returns {cloudstate.function_.FunctionCommand} FunctionCommand instance
             */
            FunctionCommand.create = function create(properties) {
                return new FunctionCommand(properties);
            };

            /**
             * Encodes the specified FunctionCommand message. Does not implicitly {@link cloudstate.function_.FunctionCommand.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.function_.FunctionCommand
             * @static
             * @param {cloudstate.function_.IFunctionCommand} message FunctionCommand message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FunctionCommand.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.serviceName);
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
                if (message.payload != null && message.hasOwnProperty("payload"))
                    $root.google.protobuf.Any.encode(message.payload, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FunctionCommand message, length delimited. Does not implicitly {@link cloudstate.function_.FunctionCommand.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.function_.FunctionCommand
             * @static
             * @param {cloudstate.function_.IFunctionCommand} message FunctionCommand message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FunctionCommand.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FunctionCommand message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.function_.FunctionCommand
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.function_.FunctionCommand} FunctionCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FunctionCommand.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.function.FunctionCommand();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.serviceName = reader.string();
                        break;
                    case 3:
                        message.name = reader.string();
                        break;
                    case 4:
                        message.payload = $root.google.protobuf.Any.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FunctionCommand message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.function_.FunctionCommand
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.function_.FunctionCommand} FunctionCommand
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FunctionCommand.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FunctionCommand message.
             * @function verify
             * @memberof cloudstate.function_.FunctionCommand
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FunctionCommand.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    if (!$util.isString(message.serviceName))
                        return "serviceName: string expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.payload != null && message.hasOwnProperty("payload")) {
                    var error = $root.google.protobuf.Any.verify(message.payload);
                    if (error)
                        return "payload." + error;
                }
                return null;
            };

            /**
             * Creates a FunctionCommand message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.function_.FunctionCommand
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.function_.FunctionCommand} FunctionCommand
             */
            FunctionCommand.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.function.FunctionCommand)
                    return object;
                var message = new $root.cloudstate.function.FunctionCommand();
                if (object.serviceName != null)
                    message.serviceName = String(object.serviceName);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.payload != null) {
                    if (typeof object.payload !== "object")
                        throw TypeError(".cloudstate.function.FunctionCommand.payload: object expected");
                    message.payload = $root.google.protobuf.Any.fromObject(object.payload);
                }
                return message;
            };

            /**
             * Creates a plain object from a FunctionCommand message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.function_.FunctionCommand
             * @static
             * @param {cloudstate.function_.FunctionCommand} message FunctionCommand
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FunctionCommand.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.serviceName = "";
                    object.name = "";
                    object.payload = null;
                }
                if (message.serviceName != null && message.hasOwnProperty("serviceName"))
                    object.serviceName = message.serviceName;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.payload != null && message.hasOwnProperty("payload"))
                    object.payload = $root.google.protobuf.Any.toObject(message.payload, options);
                return object;
            };

            /**
             * Converts this FunctionCommand to JSON.
             * @function toJSON
             * @memberof cloudstate.function_.FunctionCommand
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FunctionCommand.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FunctionCommand;
        })();

        function_.FunctionReply = (function() {

            /**
             * Properties of a FunctionReply.
             * @memberof cloudstate.function_
             * @interface IFunctionReply
             * @property {cloudstate.IFailure|null} [failure] FunctionReply failure
             * @property {cloudstate.IReply|null} [reply] FunctionReply reply
             * @property {cloudstate.IForward|null} [forward] FunctionReply forward
             * @property {Array.<cloudstate.ISideEffect>|null} [sideEffects] FunctionReply sideEffects
             */

            /**
             * Constructs a new FunctionReply.
             * @memberof cloudstate.function_
             * @classdesc Represents a FunctionReply.
             * @implements IFunctionReply
             * @constructor
             * @param {cloudstate.function_.IFunctionReply=} [properties] Properties to set
             */
            function FunctionReply(properties) {
                this.sideEffects = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FunctionReply failure.
             * @member {cloudstate.IFailure|null|undefined} failure
             * @memberof cloudstate.function_.FunctionReply
             * @instance
             */
            FunctionReply.prototype.failure = null;

            /**
             * FunctionReply reply.
             * @member {cloudstate.IReply|null|undefined} reply
             * @memberof cloudstate.function_.FunctionReply
             * @instance
             */
            FunctionReply.prototype.reply = null;

            /**
             * FunctionReply forward.
             * @member {cloudstate.IForward|null|undefined} forward
             * @memberof cloudstate.function_.FunctionReply
             * @instance
             */
            FunctionReply.prototype.forward = null;

            /**
             * FunctionReply sideEffects.
             * @member {Array.<cloudstate.ISideEffect>} sideEffects
             * @memberof cloudstate.function_.FunctionReply
             * @instance
             */
            FunctionReply.prototype.sideEffects = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * FunctionReply response.
             * @member {"failure"|"reply"|"forward"|undefined} response
             * @memberof cloudstate.function_.FunctionReply
             * @instance
             */
            Object.defineProperty(FunctionReply.prototype, "response", {
                get: $util.oneOfGetter($oneOfFields = ["failure", "reply", "forward"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new FunctionReply instance using the specified properties.
             * @function create
             * @memberof cloudstate.function_.FunctionReply
             * @static
             * @param {cloudstate.function_.IFunctionReply=} [properties] Properties to set
             * @returns {cloudstate.function_.FunctionReply} FunctionReply instance
             */
            FunctionReply.create = function create(properties) {
                return new FunctionReply(properties);
            };

            /**
             * Encodes the specified FunctionReply message. Does not implicitly {@link cloudstate.function_.FunctionReply.verify|verify} messages.
             * @function encode
             * @memberof cloudstate.function_.FunctionReply
             * @static
             * @param {cloudstate.function_.IFunctionReply} message FunctionReply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FunctionReply.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.failure != null && message.hasOwnProperty("failure"))
                    $root.cloudstate.Failure.encode(message.failure, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.reply != null && message.hasOwnProperty("reply"))
                    $root.cloudstate.Reply.encode(message.reply, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.forward != null && message.hasOwnProperty("forward"))
                    $root.cloudstate.Forward.encode(message.forward, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.sideEffects != null && message.sideEffects.length)
                    for (var i = 0; i < message.sideEffects.length; ++i)
                        $root.cloudstate.SideEffect.encode(message.sideEffects[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FunctionReply message, length delimited. Does not implicitly {@link cloudstate.function_.FunctionReply.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cloudstate.function_.FunctionReply
             * @static
             * @param {cloudstate.function_.IFunctionReply} message FunctionReply message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FunctionReply.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FunctionReply message from the specified reader or buffer.
             * @function decode
             * @memberof cloudstate.function_.FunctionReply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cloudstate.function_.FunctionReply} FunctionReply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FunctionReply.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cloudstate.function.FunctionReply();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.failure = $root.cloudstate.Failure.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.reply = $root.cloudstate.Reply.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.forward = $root.cloudstate.Forward.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.sideEffects && message.sideEffects.length))
                            message.sideEffects = [];
                        message.sideEffects.push($root.cloudstate.SideEffect.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FunctionReply message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cloudstate.function_.FunctionReply
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cloudstate.function_.FunctionReply} FunctionReply
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FunctionReply.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FunctionReply message.
             * @function verify
             * @memberof cloudstate.function_.FunctionReply
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FunctionReply.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.failure != null && message.hasOwnProperty("failure")) {
                    properties.response = 1;
                    {
                        var error = $root.cloudstate.Failure.verify(message.failure);
                        if (error)
                            return "failure." + error;
                    }
                }
                if (message.reply != null && message.hasOwnProperty("reply")) {
                    if (properties.response === 1)
                        return "response: multiple values";
                    properties.response = 1;
                    {
                        var error = $root.cloudstate.Reply.verify(message.reply);
                        if (error)
                            return "reply." + error;
                    }
                }
                if (message.forward != null && message.hasOwnProperty("forward")) {
                    if (properties.response === 1)
                        return "response: multiple values";
                    properties.response = 1;
                    {
                        var error = $root.cloudstate.Forward.verify(message.forward);
                        if (error)
                            return "forward." + error;
                    }
                }
                if (message.sideEffects != null && message.hasOwnProperty("sideEffects")) {
                    if (!Array.isArray(message.sideEffects))
                        return "sideEffects: array expected";
                    for (var i = 0; i < message.sideEffects.length; ++i) {
                        var error = $root.cloudstate.SideEffect.verify(message.sideEffects[i]);
                        if (error)
                            return "sideEffects." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FunctionReply message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cloudstate.function_.FunctionReply
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cloudstate.function_.FunctionReply} FunctionReply
             */
            FunctionReply.fromObject = function fromObject(object) {
                if (object instanceof $root.cloudstate.function.FunctionReply)
                    return object;
                var message = new $root.cloudstate.function.FunctionReply();
                if (object.failure != null) {
                    if (typeof object.failure !== "object")
                        throw TypeError(".cloudstate.function.FunctionReply.failure: object expected");
                    message.failure = $root.cloudstate.Failure.fromObject(object.failure);
                }
                if (object.reply != null) {
                    if (typeof object.reply !== "object")
                        throw TypeError(".cloudstate.function.FunctionReply.reply: object expected");
                    message.reply = $root.cloudstate.Reply.fromObject(object.reply);
                }
                if (object.forward != null) {
                    if (typeof object.forward !== "object")
                        throw TypeError(".cloudstate.function.FunctionReply.forward: object expected");
                    message.forward = $root.cloudstate.Forward.fromObject(object.forward);
                }
                if (object.sideEffects) {
                    if (!Array.isArray(object.sideEffects))
                        throw TypeError(".cloudstate.function.FunctionReply.sideEffects: array expected");
                    message.sideEffects = [];
                    for (var i = 0; i < object.sideEffects.length; ++i) {
                        if (typeof object.sideEffects[i] !== "object")
                            throw TypeError(".cloudstate.function.FunctionReply.sideEffects: object expected");
                        message.sideEffects[i] = $root.cloudstate.SideEffect.fromObject(object.sideEffects[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FunctionReply message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cloudstate.function_.FunctionReply
             * @static
             * @param {cloudstate.function_.FunctionReply} message FunctionReply
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FunctionReply.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.sideEffects = [];
                if (message.failure != null && message.hasOwnProperty("failure")) {
                    object.failure = $root.cloudstate.Failure.toObject(message.failure, options);
                    if (options.oneofs)
                        object.response = "failure";
                }
                if (message.reply != null && message.hasOwnProperty("reply")) {
                    object.reply = $root.cloudstate.Reply.toObject(message.reply, options);
                    if (options.oneofs)
                        object.response = "reply";
                }
                if (message.forward != null && message.hasOwnProperty("forward")) {
                    object.forward = $root.cloudstate.Forward.toObject(message.forward, options);
                    if (options.oneofs)
                        object.response = "forward";
                }
                if (message.sideEffects && message.sideEffects.length) {
                    object.sideEffects = [];
                    for (var j = 0; j < message.sideEffects.length; ++j)
                        object.sideEffects[j] = $root.cloudstate.SideEffect.toObject(message.sideEffects[j], options);
                }
                return object;
            };

            /**
             * Converts this FunctionReply to JSON.
             * @function toJSON
             * @memberof cloudstate.function_.FunctionReply
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FunctionReply.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FunctionReply;
        })();

        function_.StatelessFunction = (function() {

            /**
             * Constructs a new StatelessFunction service.
             * @memberof cloudstate.function_
             * @classdesc Represents a StatelessFunction
             * @extends $protobuf.rpc.Service
             * @constructor
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             */
            function StatelessFunction(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (StatelessFunction.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = StatelessFunction;

            /**
             * Creates new StatelessFunction service using the specified rpc implementation.
             * @function create
             * @memberof cloudstate.function_.StatelessFunction
             * @static
             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
             * @returns {StatelessFunction} RPC service. Useful where requests and/or responses are streamed.
             */
            StatelessFunction.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };

            /**
             * Callback as used by {@link cloudstate.function_.StatelessFunction#handleUnary}.
             * @memberof cloudstate.function_.StatelessFunction
             * @typedef handleUnaryCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {cloudstate.function_.FunctionReply} [response] FunctionReply
             */

            /**
             * Calls handleUnary.
             * @function handleUnary
             * @memberof cloudstate.function_.StatelessFunction
             * @instance
             * @param {cloudstate.function_.IFunctionCommand} request FunctionCommand message or plain object
             * @param {cloudstate.function_.StatelessFunction.handleUnaryCallback} callback Node-style callback called with the error, if any, and FunctionReply
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(StatelessFunction.prototype.handleUnary = function handleUnary(request, callback) {
                return this.rpcCall(handleUnary, $root.cloudstate.function_.FunctionCommand, $root.cloudstate.function_.FunctionReply, request, callback);
            }, "name", { value: "handleUnary" });

            /**
             * Calls handleUnary.
             * @function handleUnary
             * @memberof cloudstate.function_.StatelessFunction
             * @instance
             * @param {cloudstate.function_.IFunctionCommand} request FunctionCommand message or plain object
             * @returns {Promise<cloudstate.function_.FunctionReply>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link cloudstate.function_.StatelessFunction#handleStreamedIn}.
             * @memberof cloudstate.function_.StatelessFunction
             * @typedef handleStreamedInCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {cloudstate.function_.FunctionReply} [response] FunctionReply
             */

            /**
             * Calls handleStreamedIn.
             * @function handleStreamedIn
             * @memberof cloudstate.function_.StatelessFunction
             * @instance
             * @param {cloudstate.function_.IFunctionCommand} request FunctionCommand message or plain object
             * @param {cloudstate.function_.StatelessFunction.handleStreamedInCallback} callback Node-style callback called with the error, if any, and FunctionReply
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(StatelessFunction.prototype.handleStreamedIn = function handleStreamedIn(request, callback) {
                return this.rpcCall(handleStreamedIn, $root.cloudstate.function_.FunctionCommand, $root.cloudstate.function_.FunctionReply, request, callback);
            }, "name", { value: "handleStreamedIn" });

            /**
             * Calls handleStreamedIn.
             * @function handleStreamedIn
             * @memberof cloudstate.function_.StatelessFunction
             * @instance
             * @param {cloudstate.function_.IFunctionCommand} request FunctionCommand message or plain object
             * @returns {Promise<cloudstate.function_.FunctionReply>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link cloudstate.function_.StatelessFunction#handleStreamedOut}.
             * @memberof cloudstate.function_.StatelessFunction
             * @typedef handleStreamedOutCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {cloudstate.function_.FunctionReply} [response] FunctionReply
             */

            /**
             * Calls handleStreamedOut.
             * @function handleStreamedOut
             * @memberof cloudstate.function_.StatelessFunction
             * @instance
             * @param {cloudstate.function_.IFunctionCommand} request FunctionCommand message or plain object
             * @param {cloudstate.function_.StatelessFunction.handleStreamedOutCallback} callback Node-style callback called with the error, if any, and FunctionReply
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(StatelessFunction.prototype.handleStreamedOut = function handleStreamedOut(request, callback) {
                return this.rpcCall(handleStreamedOut, $root.cloudstate.function_.FunctionCommand, $root.cloudstate.function_.FunctionReply, request, callback);
            }, "name", { value: "handleStreamedOut" });

            /**
             * Calls handleStreamedOut.
             * @function handleStreamedOut
             * @memberof cloudstate.function_.StatelessFunction
             * @instance
             * @param {cloudstate.function_.IFunctionCommand} request FunctionCommand message or plain object
             * @returns {Promise<cloudstate.function_.FunctionReply>} Promise
             * @variation 2
             */

            /**
             * Callback as used by {@link cloudstate.function_.StatelessFunction#handleStreamed}.
             * @memberof cloudstate.function_.StatelessFunction
             * @typedef handleStreamedCallback
             * @type {function}
             * @param {Error|null} error Error, if any
             * @param {cloudstate.function_.FunctionReply} [response] FunctionReply
             */

            /**
             * Calls handleStreamed.
             * @function handleStreamed
             * @memberof cloudstate.function_.StatelessFunction
             * @instance
             * @param {cloudstate.function_.IFunctionCommand} request FunctionCommand message or plain object
             * @param {cloudstate.function_.StatelessFunction.handleStreamedCallback} callback Node-style callback called with the error, if any, and FunctionReply
             * @returns {undefined}
             * @variation 1
             */
            Object.defineProperty(StatelessFunction.prototype.handleStreamed = function handleStreamed(request, callback) {
                return this.rpcCall(handleStreamed, $root.cloudstate.function_.FunctionCommand, $root.cloudstate.function_.FunctionReply, request, callback);
            }, "name", { value: "handleStreamed" });

            /**
             * Calls handleStreamed.
             * @function handleStreamed
             * @memberof cloudstate.function_.StatelessFunction
             * @instance
             * @param {cloudstate.function_.IFunctionCommand} request FunctionCommand message or plain object
             * @returns {Promise<cloudstate.function_.FunctionReply>} Promise
             * @variation 2
             */

            return StatelessFunction;
        })();

        return function_;
    })();

    return cloudstate;
})();

$root.google = (function() {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    var google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        var protobuf = {};

        protobuf.Any = (function() {

            /**
             * Properties of an Any.
             * @memberof google.protobuf
             * @interface IAny
             * @property {string|null} [type_url] Any type_url
             * @property {Uint8Array|null} [value] Any value
             */

            /**
             * Constructs a new Any.
             * @memberof google.protobuf
             * @classdesc Represents an Any.
             * @implements IAny
             * @constructor
             * @param {google.protobuf.IAny=} [properties] Properties to set
             */
            function Any(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Any type_url.
             * @member {string} type_url
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.type_url = "";

            /**
             * Any value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.value = $util.newBuffer([]);

            /**
             * Creates a new Any instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny=} [properties] Properties to set
             * @returns {google.protobuf.Any} Any instance
             */
            Any.create = function create(properties) {
                return new Any(properties);
            };

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                if (message.value != null && message.hasOwnProperty("value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };

            /**
             * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type_url = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Any message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Any message.
             * @function verify
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Any.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    if (!$util.isString(message.type_url))
                        return "type_url: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Any} Any
             */
            Any.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Any)
                    return object;
                var message = new $root.google.protobuf.Any();
                if (object.type_url != null)
                    message.type_url = String(object.type_url);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.Any} message Any
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Any.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type_url = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    object.type_url = message.type_url;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            /**
             * Converts this Any to JSON.
             * @function toJSON
             * @memberof google.protobuf.Any
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Any.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Any;
        })();

        protobuf.Empty = (function() {

            /**
             * Properties of an Empty.
             * @memberof google.protobuf
             * @interface IEmpty
             */

            /**
             * Constructs a new Empty.
             * @memberof google.protobuf
             * @classdesc Represents an Empty.
             * @implements IEmpty
             * @constructor
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             */
            function Empty(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Empty instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             * @returns {google.protobuf.Empty} Empty instance
             */
            Empty.create = function create(properties) {
                return new Empty(properties);
            };

            /**
             * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Empty message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Empty message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Empty message.
             * @function verify
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Empty.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates an Empty message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Empty} Empty
             */
            Empty.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Empty)
                    return object;
                return new $root.google.protobuf.Empty();
            };

            /**
             * Creates a plain object from an Empty message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.Empty} message Empty
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Empty.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Empty to JSON.
             * @function toJSON
             * @memberof google.protobuf.Empty
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Empty.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Empty;
        })();

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Creates a new FileDescriptorSet instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
             */
            FileDescriptorSet.create = function create(properties) {
                return new FileDescriptorSet(properties);
            };

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (var i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.file && message.file.length))
                            message.file = [];
                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (var i = 0; i < message.file.length; ++i) {
                        var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                var message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (var i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (var j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
             * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.publicDependency = [];
                this.weakDependency = [];
                this.messageType = [];
                this.enumType = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto publicDependency.
             * @member {Array.<number>} publicDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;

            /**
             * FileDescriptorProto weakDependency.
             * @member {Array.<number>} weakDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;

            /**
             * FileDescriptorProto messageType.
             * @member {Array.<google.protobuf.IDescriptorProto>} messageType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.messageType = $util.emptyArray;

            /**
             * FileDescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto sourceCodeInfo.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.sourceCodeInfo = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Creates a new FileDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
             */
            FileDescriptorProto.create = function create(properties) {
                return new FileDescriptorProto(properties);
            };

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && message.hasOwnProperty("package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (var i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.messageType != null && message.messageType.length)
                    for (var i = 0; i < message.messageType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (var i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (var i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (var i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && message.hasOwnProperty("options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.publicDependency != null && message.publicDependency.length)
                    for (var i = 0; i < message.publicDependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                if (message.weakDependency != null && message.weakDependency.length)
                    for (var i = 0; i < message.weakDependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message["package"] = reader.string();
                        break;
                    case 3:
                        if (!(message.dependency && message.dependency.length))
                            message.dependency = [];
                        message.dependency.push(reader.string());
                        break;
                    case 10:
                        if (!(message.publicDependency && message.publicDependency.length))
                            message.publicDependency = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.publicDependency.push(reader.int32());
                        } else
                            message.publicDependency.push(reader.int32());
                        break;
                    case 11:
                        if (!(message.weakDependency && message.weakDependency.length))
                            message.weakDependency = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weakDependency.push(reader.int32());
                        } else
                            message.weakDependency.push(reader.int32());
                        break;
                    case 4:
                        if (!(message.messageType && message.messageType.length))
                            message.messageType = [];
                        message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.enumType && message.enumType.length))
                            message.enumType = [];
                        message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.service && message.service.length))
                            message.service = [];
                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.syntax = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (var i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                    if (!Array.isArray(message.publicDependency))
                        return "publicDependency: array expected";
                    for (var i = 0; i < message.publicDependency.length; ++i)
                        if (!$util.isInteger(message.publicDependency[i]))
                            return "publicDependency: integer[] expected";
                }
                if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                    if (!Array.isArray(message.weakDependency))
                        return "weakDependency: array expected";
                    for (var i = 0; i < message.weakDependency.length; ++i)
                        if (!$util.isInteger(message.weakDependency[i]))
                            return "weakDependency: integer[] expected";
                }
                if (message.messageType != null && message.hasOwnProperty("messageType")) {
                    if (!Array.isArray(message.messageType))
                        return "messageType: array expected";
                    for (var i = 0; i < message.messageType.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                        if (error)
                            return "messageType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (var i = 0; i < message.enumType.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (var i = 0; i < message.service.length; ++i) {
                        var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (var i = 0; i < message.extension.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                    var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                    if (error)
                        return "sourceCodeInfo." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (var i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.publicDependency) {
                    if (!Array.isArray(object.publicDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                    message.publicDependency = [];
                    for (var i = 0; i < object.publicDependency.length; ++i)
                        message.publicDependency[i] = object.publicDependency[i] | 0;
                }
                if (object.weakDependency) {
                    if (!Array.isArray(object.weakDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                    message.weakDependency = [];
                    for (var i = 0; i < object.weakDependency.length; ++i)
                        message.weakDependency[i] = object.weakDependency[i] | 0;
                }
                if (object.messageType) {
                    if (!Array.isArray(object.messageType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                    message.messageType = [];
                    for (var i = 0; i < object.messageType.length; ++i) {
                        if (typeof object.messageType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                        message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (var i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (var i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (var i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.sourceCodeInfo != null) {
                    if (typeof object.sourceCodeInfo !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.messageType = [];
                    object.enumType = [];
                    object.service = [];
                    object.extension = [];
                    object.publicDependency = [];
                    object.weakDependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.sourceCodeInfo = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (var j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.messageType && message.messageType.length) {
                    object.messageType = [];
                    for (var j = 0; j < message.messageType.length; ++j)
                        object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (var j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (var j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (var j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                    object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                if (message.publicDependency && message.publicDependency.length) {
                    object.publicDependency = [];
                    for (var j = 0; j < message.publicDependency.length; ++j)
                        object.publicDependency[j] = message.publicDependency[j];
                }
                if (message.weakDependency && message.weakDependency.length) {
                    object.weakDependency = [];
                    for (var j = 0; j < message.weakDependency.length; ++j)
                        object.weakDependency[j] = message.weakDependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nestedType = [];
                this.enumType = [];
                this.extensionRange = [];
                this.oneofDecl = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nestedType.
             * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nestedType = $util.emptyArray;

            /**
             * DescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * DescriptorProto extensionRange.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extensionRange = $util.emptyArray;

            /**
             * DescriptorProto oneofDecl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reservedRange.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * DescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Creates a new DescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
             */
            DescriptorProto.create = function create(properties) {
                return new DescriptorProto(properties);
            };

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (var i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nestedType != null && message.nestedType.length)
                    for (var i = 0; i < message.nestedType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (var i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extensionRange != null && message.extensionRange.length)
                    for (var i = 0; i < message.extensionRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (var i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && message.hasOwnProperty("options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneofDecl != null && message.oneofDecl.length)
                    for (var i = 0; i < message.oneofDecl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reservedRange != null && message.reservedRange.length)
                    for (var i = 0; i < message.reservedRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reservedName != null && message.reservedName.length)
                    for (var i = 0; i < message.reservedName.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.field && message.field.length))
                            message.field = [];
                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.nestedType && message.nestedType.length))
                            message.nestedType = [];
                        message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.enumType && message.enumType.length))
                            message.enumType = [];
                        message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.extensionRange && message.extensionRange.length))
                            message.extensionRange = [];
                        message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.oneofDecl && message.oneofDecl.length))
                            message.oneofDecl = [];
                        message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.reservedRange && message.reservedRange.length))
                            message.reservedRange = [];
                        message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.reservedName && message.reservedName.length))
                            message.reservedName = [];
                        message.reservedName.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (var i = 0; i < message.field.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (var i = 0; i < message.extension.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                    if (!Array.isArray(message.nestedType))
                        return "nestedType: array expected";
                    for (var i = 0; i < message.nestedType.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                        if (error)
                            return "nestedType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (var i = 0; i < message.enumType.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                    if (!Array.isArray(message.extensionRange))
                        return "extensionRange: array expected";
                    for (var i = 0; i < message.extensionRange.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                        if (error)
                            return "extensionRange." + error;
                    }
                }
                if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                    if (!Array.isArray(message.oneofDecl))
                        return "oneofDecl: array expected";
                    for (var i = 0; i < message.oneofDecl.length; ++i) {
                        var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                        if (error)
                            return "oneofDecl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (var i = 0; i < message.reservedRange.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (var i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                var message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (var i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (var i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nestedType) {
                    if (!Array.isArray(object.nestedType))
                        throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                    message.nestedType = [];
                    for (var i = 0; i < object.nestedType.length; ++i) {
                        if (typeof object.nestedType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                        message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (var i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.extensionRange) {
                    if (!Array.isArray(object.extensionRange))
                        throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                    message.extensionRange = [];
                    for (var i = 0; i < object.extensionRange.length; ++i) {
                        if (typeof object.extensionRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                        message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                    }
                }
                if (object.oneofDecl) {
                    if (!Array.isArray(object.oneofDecl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                    message.oneofDecl = [];
                    for (var i = 0; i < object.oneofDecl.length; ++i) {
                        if (typeof object.oneofDecl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                        message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (var i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (var i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nestedType = [];
                    object.enumType = [];
                    object.extensionRange = [];
                    object.extension = [];
                    object.oneofDecl = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (var j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nestedType && message.nestedType.length) {
                    object.nestedType = [];
                    for (var j = 0; j < message.nestedType.length; ++j)
                        object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (var j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.extensionRange && message.extensionRange.length) {
                    object.extensionRange = [];
                    for (var j = 0; j < message.extensionRange.length; ++j)
                        object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (var j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneofDecl && message.oneofDecl.length) {
                    object.oneofDecl = [];
                    for (var j = 0; j < message.oneofDecl.length; ++j)
                        object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                }
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (var j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (var j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * ExtensionRange options.
                 * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.options = null;

                /**
                 * Creates a new ExtensionRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                 */
                ExtensionRange.create = function create(properties) {
                    return new ExtensionRange(properties);
                };

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && message.hasOwnProperty("start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && message.hasOwnProperty("end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    if (message.options != null && message.hasOwnProperty("options"))
                        $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                        message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                        object.options = null;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Creates a new ReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                 */
                ReservedRange.create = function create(properties) {
                    return new ReservedRange(properties);
                };

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && message.hasOwnProperty("start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && message.hasOwnProperty("end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.ExtensionRangeOptions = (function() {

            /**
             * Properties of an ExtensionRangeOptions.
             * @memberof google.protobuf
             * @interface IExtensionRangeOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
             */

            /**
             * Constructs a new ExtensionRangeOptions.
             * @memberof google.protobuf
             * @classdesc Represents an ExtensionRangeOptions.
             * @implements IExtensionRangeOptions
             * @constructor
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             */
            function ExtensionRangeOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExtensionRangeOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new ExtensionRangeOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
             */
            ExtensionRangeOptions.create = function create(properties) {
                return new ExtensionRangeOptions(properties);
            };

            /**
             * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExtensionRangeOptions message.
             * @function verify
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExtensionRangeOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             */
            ExtensionRangeOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                    return object;
                var message = new $root.google.protobuf.ExtensionRangeOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExtensionRangeOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ExtensionRangeOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExtensionRangeOptions;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [typeName] FieldDescriptorProto typeName
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
             * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
             * @property {string|null} [jsonName] FieldDescriptorProto jsonName
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto typeName.
             * @member {string} typeName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.typeName = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto defaultValue.
             * @member {string} defaultValue
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.defaultValue = "";

            /**
             * FieldDescriptorProto oneofIndex.
             * @member {number} oneofIndex
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneofIndex = 0;

            /**
             * FieldDescriptorProto jsonName.
             * @member {string} jsonName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.jsonName = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * Creates a new FieldDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
             */
            FieldDescriptorProto.create = function create(properties) {
                return new FieldDescriptorProto(properties);
            };

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && message.hasOwnProperty("number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && message.hasOwnProperty("label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && message.hasOwnProperty("type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                if (message.options != null && message.hasOwnProperty("options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.number = reader.int32();
                        break;
                    case 4:
                        message.label = reader.int32();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.typeName = reader.string();
                        break;
                    case 2:
                        message.extendee = reader.string();
                        break;
                    case 7:
                        message.defaultValue = reader.string();
                        break;
                    case 9:
                        message.oneofIndex = reader.int32();
                        break;
                    case 10:
                        message.jsonName = reader.string();
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    if (!$util.isString(message.typeName))
                        return "typeName: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    if (!$util.isString(message.defaultValue))
                        return "defaultValue: string expected";
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    if (!$util.isInteger(message.oneofIndex))
                        return "oneofIndex: integer expected";
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    if (!$util.isString(message.jsonName))
                        return "jsonName: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.typeName != null)
                    message.typeName = String(object.typeName);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.defaultValue != null)
                    message.defaultValue = String(object.defaultValue);
                if (object.oneofIndex != null)
                    message.oneofIndex = object.oneofIndex | 0;
                if (object.jsonName != null)
                    message.jsonName = String(object.jsonName);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.typeName = "";
                    object.defaultValue = "";
                    object.options = null;
                    object.oneofIndex = 0;
                    object.jsonName = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    object.typeName = message.typeName;
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    object.defaultValue = message.defaultValue;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    object.oneofIndex = message.oneofIndex;
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    object.jsonName = message.jsonName;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {string}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {string}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Creates a new OneofDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
             */
            OneofDescriptorProto.create = function create(properties) {
                return new OneofDescriptorProto(properties);
            };

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && message.hasOwnProperty("options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * EnumDescriptorProto reservedRange.
             * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * EnumDescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Creates a new EnumDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
             */
            EnumDescriptorProto.create = function create(properties) {
                return new EnumDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (var i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && message.hasOwnProperty("options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.reservedRange != null && message.reservedRange.length)
                    for (var i = 0; i < message.reservedRange.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.reservedName != null && message.reservedName.length)
                    for (var i = 0; i < message.reservedName.length; ++i)
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.reservedRange && message.reservedRange.length))
                            message.reservedRange = [];
                        message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.reservedName && message.reservedName.length))
                            message.reservedName = [];
                        message.reservedName.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (var i = 0; i < message.value.length; ++i) {
                        var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (var i = 0; i < message.reservedRange.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (var i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (var i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (var i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (var i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.value = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (var j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (var j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (var j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnumDescriptorProto.EnumReservedRange = (function() {

                /**
                 * Properties of an EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @interface IEnumReservedRange
                 * @property {number|null} [start] EnumReservedRange start
                 * @property {number|null} [end] EnumReservedRange end
                 */

                /**
                 * Constructs a new EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @classdesc Represents an EnumReservedRange.
                 * @implements IEnumReservedRange
                 * @constructor
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 */
                function EnumReservedRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.start = 0;

                /**
                 * EnumReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.end = 0;

                /**
                 * Creates a new EnumReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                 */
                EnumReservedRange.create = function create(properties) {
                    return new EnumReservedRange(properties);
                };

                /**
                 * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && message.hasOwnProperty("start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && message.hasOwnProperty("end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EnumReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 */
                EnumReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this EnumReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EnumReservedRange;
            })();

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Creates a new EnumValueDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
             */
            EnumValueDescriptorProto.create = function create(properties) {
                return new EnumValueDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && message.hasOwnProperty("number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && message.hasOwnProperty("options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.number = reader.int32();
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Creates a new ServiceDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
             */
            ServiceDescriptorProto.create = function create(properties) {
                return new ServiceDescriptorProto(properties);
            };

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (var i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && message.hasOwnProperty("options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.method && message.method.length))
                            message.method = [];
                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (var i = 0; i < message.method.length; ++i) {
                        var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (var i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (var j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [inputType] MethodDescriptorProto inputType
             * @property {string|null} [outputType] MethodDescriptorProto outputType
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
             * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto inputType.
             * @member {string} inputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.inputType = "";

            /**
             * MethodDescriptorProto outputType.
             * @member {string} outputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.outputType = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto clientStreaming.
             * @member {boolean} clientStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.clientStreaming = false;

            /**
             * MethodDescriptorProto serverStreaming.
             * @member {boolean} serverStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.serverStreaming = false;

            /**
             * Creates a new MethodDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
             */
            MethodDescriptorProto.create = function create(properties) {
                return new MethodDescriptorProto(properties);
            };

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.hasOwnProperty("name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                if (message.options != null && message.hasOwnProperty("options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.inputType = reader.string();
                        break;
                    case 3:
                        message.outputType = reader.string();
                        break;
                    case 4:
                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.clientStreaming = reader.bool();
                        break;
                    case 6:
                        message.serverStreaming = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    if (!$util.isString(message.inputType))
                        return "inputType: string expected";
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    if (!$util.isString(message.outputType))
                        return "outputType: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    if (typeof message.clientStreaming !== "boolean")
                        return "clientStreaming: boolean expected";
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    if (typeof message.serverStreaming !== "boolean")
                        return "serverStreaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.inputType != null)
                    message.inputType = String(object.inputType);
                if (object.outputType != null)
                    message.outputType = String(object.outputType);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.clientStreaming != null)
                    message.clientStreaming = Boolean(object.clientStreaming);
                if (object.serverStreaming != null)
                    message.serverStreaming = Boolean(object.serverStreaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.inputType = "";
                    object.outputType = "";
                    object.options = null;
                    object.clientStreaming = false;
                    object.serverStreaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    object.inputType = message.inputType;
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    object.outputType = message.outputType;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    object.clientStreaming = message.clientStreaming;
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    object.serverStreaming = message.serverStreaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [javaPackage] FileOptions javaPackage
             * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
             * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
             * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
             * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
             * @property {string|null} [goPackage] FileOptions goPackage
             * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
             * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
             * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
             * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
             * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
             * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
             * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
             * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
             * @property {string|null} [phpNamespace] FileOptions phpNamespace
             * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
             * @property {string|null} [rubyPackage] FileOptions rubyPackage
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions javaPackage.
             * @member {string} javaPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaPackage = "";

            /**
             * FileOptions javaOuterClassname.
             * @member {string} javaOuterClassname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaOuterClassname = "";

            /**
             * FileOptions javaMultipleFiles.
             * @member {boolean} javaMultipleFiles
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaMultipleFiles = false;

            /**
             * FileOptions javaGenerateEqualsAndHash.
             * @member {boolean} javaGenerateEqualsAndHash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenerateEqualsAndHash = false;

            /**
             * FileOptions javaStringCheckUtf8.
             * @member {boolean} javaStringCheckUtf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaStringCheckUtf8 = false;

            /**
             * FileOptions optimizeFor.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimizeFor = 1;

            /**
             * FileOptions goPackage.
             * @member {string} goPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.goPackage = "";

            /**
             * FileOptions ccGenericServices.
             * @member {boolean} ccGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccGenericServices = false;

            /**
             * FileOptions javaGenericServices.
             * @member {boolean} javaGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenericServices = false;

            /**
             * FileOptions pyGenericServices.
             * @member {boolean} pyGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.pyGenericServices = false;

            /**
             * FileOptions phpGenericServices.
             * @member {boolean} phpGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpGenericServices = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions ccEnableArenas.
             * @member {boolean} ccEnableArenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccEnableArenas = false;

            /**
             * FileOptions objcClassPrefix.
             * @member {string} objcClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objcClassPrefix = "";

            /**
             * FileOptions csharpNamespace.
             * @member {string} csharpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharpNamespace = "";

            /**
             * FileOptions swiftPrefix.
             * @member {string} swiftPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.swiftPrefix = "";

            /**
             * FileOptions phpClassPrefix.
             * @member {string} phpClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpClassPrefix = "";

            /**
             * FileOptions phpNamespace.
             * @member {string} phpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpNamespace = "";

            /**
             * FileOptions phpMetadataNamespace.
             * @member {string} phpMetadataNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpMetadataNamespace = "";

            /**
             * FileOptions rubyPackage.
             * @member {string} rubyPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.rubyPackage = "";

            /**
             * FileOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new FileOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             * @returns {google.protobuf.FileOptions} FileOptions instance
             */
            FileOptions.create = function create(properties) {
                return new FileOptions(properties);
            };

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.javaPackage = reader.string();
                        break;
                    case 8:
                        message.javaOuterClassname = reader.string();
                        break;
                    case 10:
                        message.javaMultipleFiles = reader.bool();
                        break;
                    case 20:
                        message.javaGenerateEqualsAndHash = reader.bool();
                        break;
                    case 27:
                        message.javaStringCheckUtf8 = reader.bool();
                        break;
                    case 9:
                        message.optimizeFor = reader.int32();
                        break;
                    case 11:
                        message.goPackage = reader.string();
                        break;
                    case 16:
                        message.ccGenericServices = reader.bool();
                        break;
                    case 17:
                        message.javaGenericServices = reader.bool();
                        break;
                    case 18:
                        message.pyGenericServices = reader.bool();
                        break;
                    case 42:
                        message.phpGenericServices = reader.bool();
                        break;
                    case 23:
                        message.deprecated = reader.bool();
                        break;
                    case 31:
                        message.ccEnableArenas = reader.bool();
                        break;
                    case 36:
                        message.objcClassPrefix = reader.string();
                        break;
                    case 37:
                        message.csharpNamespace = reader.string();
                        break;
                    case 39:
                        message.swiftPrefix = reader.string();
                        break;
                    case 40:
                        message.phpClassPrefix = reader.string();
                        break;
                    case 41:
                        message.phpNamespace = reader.string();
                        break;
                    case 44:
                        message.phpMetadataNamespace = reader.string();
                        break;
                    case 45:
                        message.rubyPackage = reader.string();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    if (!$util.isString(message.javaPackage))
                        return "javaPackage: string expected";
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    if (!$util.isString(message.javaOuterClassname))
                        return "javaOuterClassname: string expected";
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    if (typeof message.javaMultipleFiles !== "boolean")
                        return "javaMultipleFiles: boolean expected";
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                        return "javaGenerateEqualsAndHash: boolean expected";
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    if (typeof message.javaStringCheckUtf8 !== "boolean")
                        return "javaStringCheckUtf8: boolean expected";
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    switch (message.optimizeFor) {
                    default:
                        return "optimizeFor: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    if (!$util.isString(message.goPackage))
                        return "goPackage: string expected";
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    if (typeof message.ccGenericServices !== "boolean")
                        return "ccGenericServices: boolean expected";
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    if (typeof message.javaGenericServices !== "boolean")
                        return "javaGenericServices: boolean expected";
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    if (typeof message.pyGenericServices !== "boolean")
                        return "pyGenericServices: boolean expected";
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    if (typeof message.phpGenericServices !== "boolean")
                        return "phpGenericServices: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    if (typeof message.ccEnableArenas !== "boolean")
                        return "ccEnableArenas: boolean expected";
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    if (!$util.isString(message.objcClassPrefix))
                        return "objcClassPrefix: string expected";
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    if (!$util.isString(message.csharpNamespace))
                        return "csharpNamespace: string expected";
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    if (!$util.isString(message.swiftPrefix))
                        return "swiftPrefix: string expected";
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    if (!$util.isString(message.phpClassPrefix))
                        return "phpClassPrefix: string expected";
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    if (!$util.isString(message.phpNamespace))
                        return "phpNamespace: string expected";
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    if (!$util.isString(message.phpMetadataNamespace))
                        return "phpMetadataNamespace: string expected";
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    if (!$util.isString(message.rubyPackage))
                        return "rubyPackage: string expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                var message = new $root.google.protobuf.FileOptions();
                if (object.javaPackage != null)
                    message.javaPackage = String(object.javaPackage);
                if (object.javaOuterClassname != null)
                    message.javaOuterClassname = String(object.javaOuterClassname);
                if (object.javaMultipleFiles != null)
                    message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                if (object.javaGenerateEqualsAndHash != null)
                    message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                if (object.javaStringCheckUtf8 != null)
                    message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                switch (object.optimizeFor) {
                case "SPEED":
                case 1:
                    message.optimizeFor = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimizeFor = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimizeFor = 3;
                    break;
                }
                if (object.goPackage != null)
                    message.goPackage = String(object.goPackage);
                if (object.ccGenericServices != null)
                    message.ccGenericServices = Boolean(object.ccGenericServices);
                if (object.javaGenericServices != null)
                    message.javaGenericServices = Boolean(object.javaGenericServices);
                if (object.pyGenericServices != null)
                    message.pyGenericServices = Boolean(object.pyGenericServices);
                if (object.phpGenericServices != null)
                    message.phpGenericServices = Boolean(object.phpGenericServices);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.ccEnableArenas != null)
                    message.ccEnableArenas = Boolean(object.ccEnableArenas);
                if (object.objcClassPrefix != null)
                    message.objcClassPrefix = String(object.objcClassPrefix);
                if (object.csharpNamespace != null)
                    message.csharpNamespace = String(object.csharpNamespace);
                if (object.swiftPrefix != null)
                    message.swiftPrefix = String(object.swiftPrefix);
                if (object.phpClassPrefix != null)
                    message.phpClassPrefix = String(object.phpClassPrefix);
                if (object.phpNamespace != null)
                    message.phpNamespace = String(object.phpNamespace);
                if (object.phpMetadataNamespace != null)
                    message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                if (object.rubyPackage != null)
                    message.rubyPackage = String(object.rubyPackage);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.javaPackage = "";
                    object.javaOuterClassname = "";
                    object.optimizeFor = options.enums === String ? "SPEED" : 1;
                    object.javaMultipleFiles = false;
                    object.goPackage = "";
                    object.ccGenericServices = false;
                    object.javaGenericServices = false;
                    object.pyGenericServices = false;
                    object.javaGenerateEqualsAndHash = false;
                    object.deprecated = false;
                    object.javaStringCheckUtf8 = false;
                    object.ccEnableArenas = false;
                    object.objcClassPrefix = "";
                    object.csharpNamespace = "";
                    object.swiftPrefix = "";
                    object.phpClassPrefix = "";
                    object.phpNamespace = "";
                    object.phpGenericServices = false;
                    object.phpMetadataNamespace = "";
                    object.rubyPackage = "";
                }
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    object.javaPackage = message.javaPackage;
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    object.javaOuterClassname = message.javaOuterClassname;
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    object.javaMultipleFiles = message.javaMultipleFiles;
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    object.goPackage = message.goPackage;
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    object.ccGenericServices = message.ccGenericServices;
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    object.javaGenericServices = message.javaGenericServices;
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    object.pyGenericServices = message.pyGenericServices;
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    object.ccEnableArenas = message.ccEnableArenas;
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    object.objcClassPrefix = message.objcClassPrefix;
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    object.csharpNamespace = message.csharpNamespace;
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    object.swiftPrefix = message.swiftPrefix;
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    object.phpClassPrefix = message.phpClassPrefix;
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    object.phpNamespace = message.phpNamespace;
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    object.phpGenericServices = message.phpGenericServices;
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    object.phpMetadataNamespace = message.phpMetadataNamespace;
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    object.rubyPackage = message.rubyPackage;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {string}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
             * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [mapEntry] MessageOptions mapEntry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions messageSetWireFormat.
             * @member {boolean} messageSetWireFormat
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.messageSetWireFormat = false;

            /**
             * MessageOptions noStandardDescriptorAccessor.
             * @member {boolean} noStandardDescriptorAccessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.noStandardDescriptorAccessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions mapEntry.
             * @member {boolean} mapEntry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.mapEntry = false;

            /**
             * MessageOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             * @returns {google.protobuf.MessageOptions} MessageOptions instance
             */
            MessageOptions.create = function create(properties) {
                return new MessageOptions(properties);
            };

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.messageSetWireFormat = reader.bool();
                        break;
                    case 2:
                        message.noStandardDescriptorAccessor = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 7:
                        message.mapEntry = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    if (typeof message.messageSetWireFormat !== "boolean")
                        return "messageSetWireFormat: boolean expected";
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    if (typeof message.noStandardDescriptorAccessor !== "boolean")
                        return "noStandardDescriptorAccessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    if (typeof message.mapEntry !== "boolean")
                        return "mapEntry: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                var message = new $root.google.protobuf.MessageOptions();
                if (object.messageSetWireFormat != null)
                    message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                if (object.noStandardDescriptorAccessor != null)
                    message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.mapEntry != null)
                    message.mapEntry = Boolean(object.mapEntry);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.messageSetWireFormat = false;
                    object.noStandardDescriptorAccessor = false;
                    object.deprecated = false;
                    object.mapEntry = false;
                }
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    object.messageSetWireFormat = message.messageSetWireFormat;
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    object.mapEntry = message.mapEntry;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
             * @property {boolean|null} [".cloudstate.entityKey"] FieldOptions .cloudstate.entityKey
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * FieldOptions .cloudstate.entityKey.
             * @member {boolean} .cloudstate.entityKey
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".cloudstate.entityKey"] = false;

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             * @returns {google.protobuf.FieldOptions} FieldOptions instance
             */
            FieldOptions.create = function create(properties) {
                return new FieldOptions(properties);
            };

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && message.hasOwnProperty("packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && message.hasOwnProperty("weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".cloudstate.entityKey"] != null && message.hasOwnProperty(".cloudstate.entityKey"))
                    writer.uint32(/* id 50002, wireType 0 =*/400016).bool(message[".cloudstate.entityKey"]);
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ctype = reader.int32();
                        break;
                    case 2:
                        message.packed = reader.bool();
                        break;
                    case 6:
                        message.jstype = reader.int32();
                        break;
                    case 5:
                        message.lazy = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 10:
                        message.weak = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 50002:
                        message[".cloudstate.entityKey"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".cloudstate.entityKey"] != null && message.hasOwnProperty(".cloudstate.entityKey"))
                    if (typeof message[".cloudstate.entityKey"] !== "boolean")
                        return ".cloudstate.entityKey: boolean expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                var message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".cloudstate.entityKey"] != null)
                    message[".cloudstate.entityKey"] = Boolean(object[".cloudstate.entityKey"]);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object[".cloudstate.entityKey"] = false;
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".cloudstate.entityKey"] != null && message.hasOwnProperty(".cloudstate.entityKey"))
                    object[".cloudstate.entityKey"] = message[".cloudstate.entityKey"];
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {string}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {string}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             * @returns {google.protobuf.OneofOptions} OneofOptions instance
             */
            OneofOptions.create = function create(properties) {
                return new OneofOptions(properties);
            };

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                var message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allowAlias] EnumOptions allowAlias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allowAlias.
             * @member {boolean} allowAlias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allowAlias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumOptions} EnumOptions instance
             */
            EnumOptions.create = function create(properties) {
                return new EnumOptions(properties);
            };

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.allowAlias = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    if (typeof message.allowAlias !== "boolean")
                        return "allowAlias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                var message = new $root.google.protobuf.EnumOptions();
                if (object.allowAlias != null)
                    message.allowAlias = Boolean(object.allowAlias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.allowAlias = false;
                    object.deprecated = false;
                }
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    object.allowAlias = message.allowAlias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
             */
            EnumValueOptions.create = function create(properties) {
                return new EnumValueOptions(properties);
            };

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                var message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new ServiceOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
             */
            ServiceOptions.create = function create(properties) {
                return new ServiceOptions(properties);
            };

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                var message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
             * @property {cloudstate.IEventing|null} [".cloudstate.eventing"] MethodOptions .cloudstate.eventing
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions idempotencyLevel.
             * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.idempotencyLevel = 0;

            /**
             * MethodOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MethodOptions .cloudstate.eventing.
             * @member {cloudstate.IEventing|null|undefined} .cloudstate.eventing
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".cloudstate.eventing"] = null;

            /**
             * Creates a new MethodOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             * @returns {google.protobuf.MethodOptions} MethodOptions instance
             */
            MethodOptions.create = function create(properties) {
                return new MethodOptions(properties);
            };

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".cloudstate.eventing"] != null && message.hasOwnProperty(".cloudstate.eventing"))
                    $root.cloudstate.Eventing.encode(message[".cloudstate.eventing"], writer.uint32(/* id 50003, wireType 2 =*/400026).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 34:
                        message.idempotencyLevel = reader.int32();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 50003:
                        message[".cloudstate.eventing"] = $root.cloudstate.Eventing.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    switch (message.idempotencyLevel) {
                    default:
                        return "idempotencyLevel: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".cloudstate.eventing"] != null && message.hasOwnProperty(".cloudstate.eventing")) {
                    var error = $root.cloudstate.Eventing.verify(message[".cloudstate.eventing"]);
                    if (error)
                        return ".cloudstate.eventing." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                var message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                switch (object.idempotencyLevel) {
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                    message.idempotencyLevel = 0;
                    break;
                case "NO_SIDE_EFFECTS":
                case 1:
                    message.idempotencyLevel = 1;
                    break;
                case "IDEMPOTENT":
                case 2:
                    message.idempotencyLevel = 2;
                    break;
                }
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".cloudstate.eventing"] != null) {
                    if (typeof object[".cloudstate.eventing"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..cloudstate.eventing: object expected");
                    message[".cloudstate.eventing"] = $root.cloudstate.Eventing.fromObject(object[".cloudstate.eventing"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                    object[".cloudstate.eventing"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".cloudstate.eventing"] != null && message.hasOwnProperty(".cloudstate.eventing"))
                    object[".cloudstate.eventing"] = $root.cloudstate.Eventing.toObject(message[".cloudstate.eventing"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * IdempotencyLevel enum.
             * @name google.protobuf.MethodOptions.IdempotencyLevel
             * @enum {string}
             * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
             * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
             * @property {number} IDEMPOTENT=2 IDEMPOTENT value
             */
            MethodOptions.IdempotencyLevel = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                values[valuesById[2] = "IDEMPOTENT"] = 2;
                return values;
            })();

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifierValue] UninterpretedOption identifierValue
             * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
             * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
             * @property {number|null} [doubleValue] UninterpretedOption doubleValue
             * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
             * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifierValue.
             * @member {string} identifierValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifierValue = "";

            /**
             * UninterpretedOption positiveIntValue.
             * @member {number|Long} positiveIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negativeIntValue.
             * @member {number|Long} negativeIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption doubleValue.
             * @member {number} doubleValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.doubleValue = 0;

            /**
             * UninterpretedOption stringValue.
             * @member {Uint8Array} stringValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregateValue.
             * @member {string} aggregateValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregateValue = "";

            /**
             * Creates a new UninterpretedOption instance using the specified properties.
             * @function create
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
             */
            UninterpretedOption.create = function create(properties) {
                return new UninterpretedOption(properties);
            };

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (var i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.name && message.name.length))
                            message.name = [];
                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.identifierValue = reader.string();
                        break;
                    case 4:
                        message.positiveIntValue = reader.uint64();
                        break;
                    case 5:
                        message.negativeIntValue = reader.int64();
                        break;
                    case 6:
                        message.doubleValue = reader.double();
                        break;
                    case 7:
                        message.stringValue = reader.bytes();
                        break;
                    case 8:
                        message.aggregateValue = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (var i = 0; i < message.name.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    if (!$util.isString(message.identifierValue))
                        return "identifierValue: string expected";
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                        return "positiveIntValue: integer|Long expected";
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                        return "negativeIntValue: integer|Long expected";
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    if (typeof message.doubleValue !== "number")
                        return "doubleValue: number expected";
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                        return "stringValue: buffer expected";
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    if (!$util.isString(message.aggregateValue))
                        return "aggregateValue: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                var message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (var i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifierValue != null)
                    message.identifierValue = String(object.identifierValue);
                if (object.positiveIntValue != null)
                    if ($util.Long)
                        (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                    else if (typeof object.positiveIntValue === "string")
                        message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                    else if (typeof object.positiveIntValue === "number")
                        message.positiveIntValue = object.positiveIntValue;
                    else if (typeof object.positiveIntValue === "object")
                        message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                if (object.negativeIntValue != null)
                    if ($util.Long)
                        (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                    else if (typeof object.negativeIntValue === "string")
                        message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                    else if (typeof object.negativeIntValue === "number")
                        message.negativeIntValue = object.negativeIntValue;
                    else if (typeof object.negativeIntValue === "object")
                        message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                if (object.doubleValue != null)
                    message.doubleValue = Number(object.doubleValue);
                if (object.stringValue != null)
                    if (typeof object.stringValue === "string")
                        $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                    else if (object.stringValue.length)
                        message.stringValue = object.stringValue;
                if (object.aggregateValue != null)
                    message.aggregateValue = String(object.aggregateValue);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifierValue = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positiveIntValue = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negativeIntValue = options.longs === String ? "0" : 0;
                    object.doubleValue = 0;
                    if (options.bytes === String)
                        object.stringValue = "";
                    else {
                        object.stringValue = [];
                        if (options.bytes !== Array)
                            object.stringValue = $util.newBuffer(object.stringValue);
                    }
                    object.aggregateValue = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (var j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    object.identifierValue = message.identifierValue;
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (typeof message.positiveIntValue === "number")
                        object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                    else
                        object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (typeof message.negativeIntValue === "number")
                        object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                    else
                        object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    object.aggregateValue = message.aggregateValue;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} namePart NamePart namePart
                 * @property {boolean} isExtension NamePart isExtension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart namePart.
                 * @member {string} namePart
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.namePart = "";

                /**
                 * NamePart isExtension.
                 * @member {boolean} isExtension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.isExtension = false;

                /**
                 * Creates a new NamePart instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                 */
                NamePart.create = function create(properties) {
                    return new NamePart(properties);
                };

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.namePart = reader.string();
                            break;
                        case 2:
                            message.isExtension = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("namePart"))
                        throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                    if (!message.hasOwnProperty("isExtension"))
                        throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.namePart))
                        return "namePart: string expected";
                    if (typeof message.isExtension !== "boolean")
                        return "isExtension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.namePart != null)
                        message.namePart = String(object.namePart);
                    if (object.isExtension != null)
                        message.isExtension = Boolean(object.isExtension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.namePart = "";
                        object.isExtension = false;
                    }
                    if (message.namePart != null && message.hasOwnProperty("namePart"))
                        object.namePart = message.namePart;
                    if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                        object.isExtension = message.isExtension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Creates a new SourceCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
             */
            SourceCodeInfo.create = function create(properties) {
                return new SourceCodeInfo(properties);
            };

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (var i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.location && message.location.length))
                            message.location = [];
                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (var i = 0; i < message.location.length; ++i) {
                        var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                var message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (var i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (var j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leadingComments] Location leadingComments
                 * @property {string|null} [trailingComments] Location trailingComments
                 * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leadingDetachedComments = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leadingComments.
                 * @member {string} leadingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingComments = "";

                /**
                 * Location trailingComments.
                 * @member {string} trailingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailingComments = "";

                /**
                 * Location leadingDetachedComments.
                 * @member {Array.<string>} leadingDetachedComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingDetachedComments = $util.emptyArray;

                /**
                 * Creates a new Location instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                 */
                Location.create = function create(properties) {
                    return new Location(properties);
                };

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                    if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                        for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            if (!(message.span && message.span.length))
                                message.span = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.span.push(reader.int32());
                            } else
                                message.span.push(reader.int32());
                            break;
                        case 3:
                            message.leadingComments = reader.string();
                            break;
                        case 4:
                            message.trailingComments = reader.string();
                            break;
                        case 6:
                            if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                message.leadingDetachedComments = [];
                            message.leadingDetachedComments.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (var i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (var i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        if (!$util.isString(message.leadingComments))
                            return "leadingComments: string expected";
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        if (!$util.isString(message.trailingComments))
                            return "trailingComments: string expected";
                    if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                        if (!Array.isArray(message.leadingDetachedComments))
                            return "leadingDetachedComments: array expected";
                        for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                            if (!$util.isString(message.leadingDetachedComments[i]))
                                return "leadingDetachedComments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (var i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (var i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leadingComments != null)
                        message.leadingComments = String(object.leadingComments);
                    if (object.trailingComments != null)
                        message.trailingComments = String(object.trailingComments);
                    if (object.leadingDetachedComments) {
                        if (!Array.isArray(object.leadingDetachedComments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                        message.leadingDetachedComments = [];
                        for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                            message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leadingDetachedComments = [];
                    }
                    if (options.defaults) {
                        object.leadingComments = "";
                        object.trailingComments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (var j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (var j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        object.leadingComments = message.leadingComments;
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        object.trailingComments = message.trailingComments;
                    if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                        object.leadingDetachedComments = [];
                        for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                            object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Creates a new GeneratedCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
             */
            GeneratedCodeInfo.create = function create(properties) {
                return new GeneratedCodeInfo(properties);
            };

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (var i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (var i = 0; i < message.annotation.length; ++i) {
                        var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (var i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (var j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [sourceFile] Annotation sourceFile
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation sourceFile.
                 * @member {string} sourceFile
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.sourceFile = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Creates a new Annotation instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                 */
                Annotation.create = function create(properties) {
                    return new Annotation(properties);
                };

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && message.hasOwnProperty("end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            message.sourceFile = reader.string();
                            break;
                        case 3:
                            message.begin = reader.int32();
                            break;
                        case 4:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (var i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        if (!$util.isString(message.sourceFile))
                            return "sourceFile: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (var i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.sourceFile != null)
                        message.sourceFile = String(object.sourceFile);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.sourceFile = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (var j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        object.sourceFile = message.sourceFile;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        return protobuf;
    })();

    return google;
})();

module.exports = $root;
